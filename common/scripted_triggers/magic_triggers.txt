can_be_cursed_trigger = {
	NOR = {
		has_perk = protective_runes_perk
		is_a_demon_trigger = yes
		has_character_modifier = cursed_modifier
		any_character_artifact = { has_variable = magic_ring }
		any_parent = { has_perk = protective_runes_perk }
		AND = {
			exists = liege
			liege = { has_perk = protective_runes_perk }
			is_councillor = yes
		}
		any_consort = { has_perk = protective_runes_perk }
		AND = {
			employs_court_position = mage_court_position
			any_court_position_holder = {
				type = mage_court_position
				has_perk = protective_runes_perk
			}
		}
	}
}

can_spend_standard_ps_trigger = {
	OR = {
		has_character_modifier = power_saturated1
		has_character_modifier = power_saturated2
		AND = {
			has_trait = archmage
			has_trait_xp = {
				trait = archmage
				track = power_saturation
				value > 9
			}
		}
	}
}
can_spend_huge_ps_trigger = {
	has_trait = archmage
	has_trait_xp = {
		trait = archmage
		track = power_saturation
		value > 19
	}
}

can_be_power_saturated_trigger = {
	OR = {
		AND = {
			has_trait = archmage
			has_trait_xp = {
				trait = archmage
				track = power_saturation
				value < 100
			}
		}
		NOR = {
			has_trait = archmage
			has_character_modifier = power_saturated1
			has_character_modifier = power_saturated2
		}
	}
}

is_legendary_mage_trigger = {
	has_trait = archmage
	has_trait_xp = {
		trait = archmage
		track = secret_knowledge
		value > 99
	}
}
is_the_choosen_one_trigger = {
	has_trait = source
	has_trait_xp = {
		trait = source
		track = magic_potential
		value > 99
	}
}
has_at_least_minor_source_trigger = {
	has_trait = source
	has_trait_xp = {
		trait = source
		track = magic_potential
		value > 19
	}
}
has_unstable_source_trigger = {
	has_trait = source
	has_trait_xp = {
		trait = source
		track = instability
		value > 29
	}
}

has_basic_magic_prot_trigger = {
	OR = {
		has_perk = protective_runes_perk
		has_perk = mage_tower_p2_perk
		is_a_demon_trigger = yes
		has_trait = golem
		has_trait = supernatural_hunter
		has_character_modifier = aura_boost1_modifier
		has_character_modifier = aura_boost2_modifier
		any_equipped_character_artifact = {	has_variable = magic_ring	}
		AND = {
			any_parent = { has_perk = protective_runes_perk }
			NOT = { is_child_of = scope:actor }
		}
		AND = {
			exists = liege
			liege = { has_perk = protective_runes_perk }
			is_councillor = yes
			NOT = { is_councillor_of = scope:actor }
		}
		AND = {
			any_consort = { has_perk = protective_runes_perk }
			NOT = { is_consort_of = scope:actor }
		}
		AND = {
			employs_court_position = mage_court_position
			any_court_position_holder = {
				type = mage_court_position
				OR = {
					has_perk = protective_runes_perk
					has_perk = mage_tower_p2_perk
				}
				NOT = { scope:actor = this }
			}
		}
	}
	NOT = {
		is_imprisoned_by = scope:actor
	}
}
has_basic_magic_prot_trigger2 = {
	OR = {
		has_perk = protective_runes_perk
		has_perk = mage_tower_p2_perk
		is_a_demon_trigger = yes
		has_trait = golem
		has_trait = supernatural_hunter
		has_character_modifier = aura_boost1_modifier
		has_character_modifier = aura_boost2_modifier
		any_equipped_character_artifact = {	has_variable = magic_ring	}
		AND = {
			any_parent = { has_perk = protective_runes_perk }
			NOT = { is_child_of = scope:owner }
		}
		AND = {
			exists = liege
			liege = { has_perk = protective_runes_perk }
			is_councillor = yes
			NOT = { is_councillor_of = scope:owner }
		}
		AND = {
			any_consort = { has_perk = protective_runes_perk }
			NOT = { is_consort_of = scope:owner }
		}
		AND = {
			employs_court_position = mage_court_position
			any_court_position_holder = {
				type = mage_court_position
				OR = {
					has_perk = protective_runes_perk
					has_perk = mage_tower_p2_perk
				}
				NOT = { scope:owner = this }
			}
		}
	}
	NOT = {
		is_imprisoned_by = scope:owner
	}
}
has_any_basic_magic_prot_trigger = {
	OR = {
		has_perk = protective_runes_perk
		has_perk = mage_tower_p2_perk
		is_a_demon_trigger = yes
		has_trait = golem
		has_trait = supernatural_hunter
		has_character_modifier = aura_boost1_modifier
		has_character_modifier = aura_boost2_modifier
		any_equipped_character_artifact = {	has_variable = magic_ring	}
		any_parent = { has_perk = protective_runes_perk }
		AND = {
			exists = liege
			liege = { has_perk = protective_runes_perk }
			is_councillor = yes
		}
		any_consort = { has_perk = protective_runes_perk }
		AND = {
			employs_court_position = mage_court_position
			any_court_position_holder = {
				type = mage_court_position
				OR = {
					has_perk = protective_runes_perk
					has_perk = mage_tower_p2_perk
				}
			}
		}
	}
}
is_magic_protected = {
	OR = {
		AND = {
			has_perk = mage_tower_p2_perk
			is_imprisoned = no
		}
		AND = {
			is_courtier = yes
			exists = liege
			trigger_if = {
				limit = {
					exists = ROOT
					NOT = {
						ROOT = THIS
					}
				}
				NOT = {
					liege = ROOT
				}
			}
			trigger_if = {
				limit = {
					exists = scope:magic_user
					NOT = {
						scope:magic_user = THIS
					}
				}
				NOT = {
					liege = scope:magic_user
				}
			}
			liege = {
				trigger_if = {
					limit = {
						exists = scope:magic_user
						NOT = {
							scope:magic_user = THIS
						}
					}
					NOT = {
						liege = scope:magic_user
					}
				}
				has_perk = mage_tower_p2_perk
				is_imprisoned = no
			}
		}
		AND = {
			is_courtier = yes
			exists = liege
			trigger_if = {
				limit = {
					exists = ROOT
					NOT = {
						ROOT = THIS
					}
				}
				NOT = {
					liege = ROOT
				}
			}
			trigger_if = {
				limit = {
					exists = scope:magic_user
					NOT = {
						scope:magic_user = THIS
					}
				}
				NOT = {
					liege = scope:magic_user
				}
			}
			liege = {
				employs_court_position = mage_court_position
				any_court_position_holder = {
					type = mage_court_position
					has_perk = mage_tower_p2_perk
					is_imprisoned = no
					trigger_if = {
						limit = {
							exists = ROOT
						}
						NOT = {
							THIS = ROOT
						}
					}
					trigger_if = {
						limit = {
							exists = scope:magic_user
							NOT = {
								scope:magic_user = THIS
							}
						}
						NOT = {
							liege = scope:magic_user
						}
					}
					trigger_if = {
						limit = {
							exists = scope:magic_user
						}
						NOT = {
							scope:magic_user = THIS
						}
					}
				}
			}
		}
		AND = {
			is_ruler = yes
			employs_court_position = mage_court_position
			any_court_position_holder = {
				type = mage_court_position
				has_perk = mage_tower_p2_perk
				is_imprisoned = no
				trigger_if = {
					limit = {
						exists = ROOT
					}
					NOT = {
						THIS = ROOT
					}
				}
				trigger_if = {
					limit = {
						exists = scope:magic_user
						NOT = {
							scope:magic_user = THIS
						}
					}
					NOT = {
						liege = scope:magic_user
					}
				}
				trigger_if = {
					limit = {
						exists = scope:magic_user
					}
					NOT = {
						scope:magic_user = THIS
					}
				}
			}
		}
	}
}
is_antimagic_trigger = {
	has_character_modifier = antimagic_seal_modifier
}
can_penetrate_basic_magic_prot_trigger = {
	OR = {
		has_character_modifier = touched_divinity_modifier
		is_legendary_mage_trigger = yes
		any_equipped_character_artifact = {	has_variable = catalyst	}
	}
}
can_use_banish_spell = {
	OR = {
		has_character_flag = banish_spell_flag
		AND = {
			has_trait = archmage
			has_trait_xp = {
				trait = archmage
				track = demonology
				value > 99
			}
		}
	}
}
can_use_healing_spell = {
	OR = {
		any_character_artifact = {
			has_artifact_modifier = artifact_ring_of_life_modifier
		}
		has_character_flag = healing_spell_flag
	}
}
has_physical_contanct = {
	OR = {
		AND = {
			NOT = {
				has_game_rule = unlimited_spells_range
			}
			OR = {
				AND = {
					scope:actor = {
						OR = {
							is_landed_or_landless_administrative = yes
							AND = {
								is_in_army = yes
								scope:recipient = {
									is_in_army = yes
								}
							}
							AND = {
								is_landless_ruler = yes
								scope:recipient = {
									is_landless_ruler = yes
								}
							}
							AND = {
								exists = involved_activity
								exists = scope:recipient.involved_activity
								involved_activity = scope:recipient.involved_activity
							}
						}
					}
					scope:actor.location = scope:recipient.location
				}
				#scope:actor = {
				#	has_contact = scope:recipient
				#}
				#scope:actor = {
				#	is_legendary_mage_trigger = yes
				#}
				#scope:actor = {
				#	any_courtier_or_guest = {
				#		THIS = scope:recipient
				#	}
				#}
				scope:actor = {
					has_character_modifier = master_psionic_modifier
				}
				scope:actor = {
					any_equipped_character_artifact = {
						has_artifact_modifier = magic_orb_modifier
					}
				}
				scope:actor = {
					has_relation_lover = scope:recipient
				}
				scope:actor = {
					has_relation_soulmate = scope:recipient
				}
				scope:actor = {
					has_relation_friend = scope:recipient
				}
				scope:actor = {
					has_relation_best_friend = scope:recipient
				}
				scope:actor = {
					has_relation_ward = scope:recipient
				}
				scope:actor = {
					is_consort_of = scope:recipient
				}
				#AND = {
				#	exists=scope:actor.liege
				#	scope:recipient = scope:actor.liege
				#}
				scope:actor = {
					has_strong_usable_hook = scope:recipient
				}
				scope:recipient = {
					AND = {
						is_vassal_of = scope:actor
						NOT = {
							is_at_war_with = scope:actor
						}
					}
				}
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				scope:recipient = {
					is_courtier_of = scope:actor
				}
				scope:recipient = {
					is_foreign_court_or_pool_guest_of = scope:actor
				}
				AND = {
					scope:actor = { government_has_flag = government_is_landless_adventurer }
					scope:recipient = { is_contact_of = scope:actor }
					ep3_laamp_diplo_range_trigger = {
						TARGET = scope:recipient
						LAAMP = scope:actor
					}
				}
			}
		}
		has_game_rule = unlimited_spells_range
	}
}
has_physical_contanct2 = {
	OR = {
		AND = {
			OR = {
				AND = {
					scope:actor = {
						OR = {
							is_landed_or_landless_administrative = yes
							AND = {
								is_in_army = yes
								scope:recipient = {
									is_in_army = yes
								}
							}
							AND = {
								is_landless_ruler = yes
								scope:recipient = {
									is_landless_ruler = yes
								}
							}
							AND = {
								exists = involved_activity
								exists = scope:recipient.involved_activity
								involved_activity = scope:recipient.involved_activity
							}
						}
					}
					scope:actor.location = scope:recipient.location
				}
				#scope:actor = {
				#	has_contact = scope:recipient
				#}
				scope:actor = {
					has_relation_lover = scope:recipient
				}
				scope:actor = {
					has_relation_soulmate = scope:recipient
				}
				scope:actor = {
					has_relation_friend = scope:recipient
				}
				scope:actor = {
					has_relation_best_friend = scope:recipient
				}
				scope:actor = {
					has_relation_ward = scope:recipient
				}
				scope:actor = {
					is_consort_of = scope:recipient
				}
				#AND = {
				#	exists=scope:actor.liege
				#	scope:recipient = scope:actor.liege
				#}
				scope:actor = {
					has_strong_usable_hook = scope:recipient
				}
				scope:recipient = {
					AND = {
						is_vassal_of = scope:actor
						NOT = {
							is_at_war_with = scope:actor
						}
					}
				}
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				scope:recipient = {
					is_courtier_of = scope:actor
				}
				scope:recipient = {
					is_foreign_court_or_pool_guest_of = scope:actor
				}
				AND = {
					scope:actor = { government_has_flag = government_is_landless_adventurer }
					scope:recipient = { is_contact_of = scope:actor }
					ep3_laamp_diplo_range_trigger = {
						TARGET = scope:recipient
						LAAMP = scope:actor
					}
				}
			}
			NOT = {
				has_game_rule = unlimited_spells_range
			}
		}
		has_game_rule = unlimited_spells_range
	}
}

has_power_place_trigger = {
	#is_landed_or_landless_administrative = yes
	#primary_title = { is_mercenary_company = no }
	#any_held_title = {
	#	tier = tier_county
	#	any_county_province = {
	#		OR = {
	#			#has_building_or_higher = generic_university
	#			has_building_or_higher = witch_house
	#			has_building_or_higher = horned_god_house
	#			has_building_or_higher = mage_house
	#		}
	#	}
	#	
	#	#exists = title_province
	#	#title_province = {
	#	#	OR = {
	#	#		#has_building_or_higher = generic_university
	#	#		has_building_or_higher = witch_house
	#	#		has_building_or_higher = horned_god_house
	#	#		has_building_or_higher = mage_house
	#	#	}
	#	#}
	#}
	any_held_county = {
		#tier = tier_county
		exists = title_province
		title_province = {
			OR = {
				has_building_or_higher = witch_house
				has_building_or_higher = horned_god_house
				has_building_or_higher = mage_house
			}
		}
	}
}
is_power_place_trigger = {
	OR = {
		has_building_or_higher = witch_house
		has_building_or_higher = horned_god_house
		has_building_or_higher = mage_house
	}
}


has_dark_temple_trigger = {
	any_held_county = {
		exists = title_province
		title_province = {
			has_building_or_higher = horned_god_house
		}
	}
}

has_witch_house_trigger = {
	any_held_county = {
		exists = title_province
		title_province = {
			has_building_or_higher = witch_house
		}
	}
}

has_mage_academy_trigger = {
	any_held_county = {
		exists = title_province
		title_province = {
			has_building_or_higher = mage_house
		}
	}
}
has_houska_trigger = {
	any_held_county = {
		exists = title_province
		title_province = {
			has_building_or_higher = houska
		}
	}
}

can_unlock_arcane_focus_trigger = {
	OR = {
		has_trait = witch
		has_trait = true_witch
		any_secret = { secret_type = secret_witch }
	}
	OR = {
		any_character_artifact = { has_variable = magic1 }
		any_character_artifact = { has_variable = magic_ring }
		any_character_artifact = { has_variable = singularity2 }
		has_trait = source
		#has_trait = source2
		#has_trait = source3
		#has_trait = source4
		has_perk = magical_experiments_p1_perk
		has_character_flag = arcane_unlocked_flag
		has_power_place_trigger = yes
		has_character_modifier = research_cooperation
		has_character_modifier = mc_place_of_power_modifier
		AND = {
			exists = house
			house = {
				has_house_modifier = house_magic_academy_modifier
			}
		}
		AND = {
			exists = global_var:magic_academy_opened
			has_trait = true_witch
		}
	}
}

has_ms_knowledge_sharing_intent_trigger = {
	OR = {
		AND = {
			is_ai = no
			has_activity_intent = sharing_knowledge_intent
		}
		AND = {
			is_ai = yes
			has_character_flag = ms_intent_flag1
		}
	}
}
has_ms_political_matters_intent_trigger = {
	OR = {
		AND = {
			is_ai = no
			has_activity_intent = political_matters_intent
		}
		AND = {
			is_ai = yes
			has_character_flag = ms_intent_flag2
		}
	}
}
has_ms_show_superiority_intent_trigger = {
	OR = {
		AND = {
			is_ai = no
			has_activity_intent = show_superiority_intent
		}
		AND = {
			is_ai = yes
			has_character_flag = ms_intent_flag3
		}
	}
}

me_can_take_spells_option_trigger = {
	OR = {
		NOT = {
			has_character_modifier = master_alteration_modifier
		}
		AND = {
			has_trait = necromancer
			NOT = {
				has_character_modifier = master_necromancer_modifier
			}
		}
		AND = {
			has_character_modifier = mind_reader_modifier
			NOT = {
				has_character_modifier = master_psionic_modifier
			}
		}
		AND = {
			OR = {
				has_trait = schemer
				has_trait = shrewd
				has_trait = intrigue_court_1
				has_trait = intrigue_court_2
			}
			NOT = {
				has_character_modifier = mind_reader_modifier
			}
		}
		AND = {
			learning > 29
			NOT = {
				has_character_modifier = master_metamagic_modifier
			}
		}
		AND = {
			has_trait = whole_of_body
			NOT = {
				has_character_modifier = upgraded_body_modifier
			}
		}
		AND = {
			AND = {
				has_trait = lifestyle_mystic
				has_trait_xp = {
					trait = lifestyle_mystic
					value >= 30
				}
			}
			NOT = {
				has_character_modifier = contact_other_worlds_modifier
			}
		}
		NOT = {
			has_character_flag = mana_siphon_flag
		}
		AND = {
			NOT = {
				has_character_flag = tornado_spell_flag
			}
			martial > 24
		}
	}
}

me_have_unlocked_special_project = {
	OR = {
		any_character_artifact = {
			has_variable = magic_ring0
			has_artifact_modifier = artifact_ring_of_life_modifier0
		}
		AND = {
			has_character_flag = me_golem_project
			NOT = {
				has_character_flag = me_golem_project_done
			}
		}
		AND = {
			has_character_flag = me_golem2_project
			NOT = {
				has_character_flag = me_golem2_project_done
			}
		}
		AND = {
			OR = {
				has_character_flag = me_immortality_project
				is_legendary_mage_trigger = yes
			}
			NOT = {
				has_character_flag = me_immortality_project_done
			}
		}
		AND = {
			has_character_flag = me_death_project
			NOT = {
				has_character_flag = me_death_project_done
			}
		}
		AND = {
			has_character_flag = me_ascendency_project
			NOR = {
				has_character_flag = me_ascendency_project_done
				is_a_demon_trigger = yes
			}
		}
		AND = {
			has_character_flag = me_castle_project
			NOT = {
				has_character_flag = me_castle_project_done
			}
		}
		AND = {
			has_character_flag = me_sing_project
			NOT = {
				has_character_flag = me_sing_project_done
			}
		}
		AND = {
			has_character_flag = me_soul_project
			NOT = {
				has_character_flag = me_soul_project_done
			}
		}
		AND = {
			has_character_flag = me_time_travel_project
			NOT = {
				has_character_flag = me_time_travel_project_done
			}
		}
		AND = {
			any_character_artifact = {
				has_variable = singularity
				OR = {
					has_artifact_modifier = singularity_modifier2a
					has_artifact_modifier = singularity_modifier1
				}
			}
			OR = {
				has_character_flag = me_as_project
				any_character_artifact = {
					has_variable = msscroll
				}
			}
			NOT = {
				has_character_flag = me_as_project_done
			}
		}
		AND = {
			has_trait = archmage
			has_trait_xp = {
				trait = archmage
				track = combat_magic
				value > 99
			}
			NOT = {
				has_character_flag = me_custom_spell_project_done
			}
		}
	}
}
me_may_unlocks_special_project = {
	OR = {
		NOR = {
			has_character_flag = me_golem_project_done
			has_character_flag = me_golem_project
		}
		AND = {
			NOR = {
				has_character_flag = me_immortality_project_done
				has_character_flag = me_immortality_project
				is_legendary_mage_trigger = yes
			}
			learning > 49
		}
		AND = {
			NOR = {
				has_character_flag = me_death_project_done
				has_character_flag = me_death_project
			}
			OR = {
				is_cannibal_trigger = yes
				has_trait = necromancer
			}
			is_or_will_be_a_demon_trigger = no
		}
		AND = {
			NOR = {
				has_character_flag = me_ascendency_project_done
				has_character_flag = me_ascendency_project
				is_a_demon_trigger = yes
			}
			OR = {
				has_trait = source
				#has_trait = source2
				#has_trait = source3
				#has_trait = source4
				any_character_artifact = {
					has_variable = magic_scepter
				}
			}
		}
		AND = {
			NOR = {
				has_character_flag = me_castle_project_done
				has_character_flag = me_castle_project
			}
			is_landed = yes
		}
		AND = {
			NOR = {
				has_character_flag = me_sing_project_done
				has_character_flag = me_sing_project
			}
			any_character_artifact = {
				has_variable = singularity
				has_artifact_modifier = singularity_modifier5
			}
		}
		AND = {
			NOR = {
				has_character_flag = me_soul_project_done
				has_character_flag = me_soul_project
				has_character_flag = no_soul
			}
			is_legendary_mage_trigger = yes
			#OR = {
			#	has_character_flag = me_sing_project_done
			#	has_character_flag = me_castle_project_done
			#	has_character_flag = me_ascendency_project_done
			#	has_character_flag = me_death_project_done
			#	has_character_flag = me_immortality_project_done
			#	has_character_flag = me_golem_project_done
			#}
		}
		AND = {
			may_unlock_time_travel_sp_trigger = yes
			is_ai = no
			NOR = {
				has_character_flag = me_time_travel_project_done
				has_character_flag = me_time_travel_project
			}
		}
		AND = {
			NOR = {
				has_character_flag = me_as_project_done
				has_character_flag = me_as_project
				any_character_artifact = {
					has_variable = msscroll
				}
			}
			OR = {
				has_character_flag = me_as_project_may_be_random_flag
				is_legendary_mage_trigger = yes
			}
			any_character_artifact = {
				has_variable = singularity
				OR = {
					has_artifact_modifier = singularity_modifier2a
					has_artifact_modifier = singularity_modifier1
				}
			}
		}
	}
}
requires_magic_healing_trigger = {
	OR = {
		has_trait = ill
		has_trait = pneumonic
		has_trait = great_pox
		has_trait = early_great_pox
		has_trait = lovers_pox
		has_trait = leper
		has_trait = wounded_1
		has_trait = wounded_2
		has_trait = wounded_3
		has_trait = maimed
		has_trait = infirm
		has_trait = incapable
		has_trait = gout_ridden
		has_trait = consumption
		has_trait = cancer
		has_trait = typhus
		has_trait = bubonic_plague
		has_trait = smallpox
		has_trait = sickly
		has_trait = blind
		has_trait = disfigured
		has_character_modifier = chronic_headaches_modifier
		has_character_modifier = infected_wound_modifier
		has_character_modifier = gangrene_modifier
		has_trait = measles
		has_trait = dysentery
		has_trait = ergotism
	}
}
may_unlock_time_travel_sp_trigger = {
	NOT = {
		any_culture_global = {
			has_variable = has_time_traveler
		}
	}
}
can_use_tornado_spell_trigger = {
	has_character_flag = tornado_spell_flag
}
is_or_will_be_a_demon_trigger = {
	OR = {
		has_trait = demon2
		is_a_demon_trigger = yes
		has_trait = demon0
	}
}
has_access_to_aura_reading_trigger = {
	OR = {
		has_character_modifier = master_magic_modifier
		has_character_flag = aura_reading_spell
		has_character_modifier = magic_eyes_modifier
		has_perk = magical_creature_perk
	}
}
has_immunity_for_regular_curse = {
	OR = {
		any_equipped_character_artifact = {
			has_artifact_modifier = immunity_curse_terrain_cancel_negative_supply
		}
		any_equipped_character_artifact = {
			has_artifact_modifier = artifact_dragon_scales_modifier
		}
		has_character_modifier = master_defence_modifier
		has_perk = natural_immunity_perk
		is_antimagic_trigger = yes
	}
}
has_immunity_for_powerful_curse = {
	OR = {
		any_equipped_character_artifact = {
			has_artifact_modifier = immunity_curse2_terrain_cancel_negative_supply
		}
		any_equipped_character_artifact = {
			has_artifact_modifier = artifact_dragon_scales_modifier
		}
		has_character_modifier = master_defence_modifier
		has_perk = natural_immunity_perk
		is_antimagic_trigger = yes
	}
}
has_immunity_for_magic_domination = {
	OR = {
		any_equipped_character_artifact = {
			has_artifact_modifier = immunity_domination_terrain_cancel_negative_supply
		}
		any_equipped_character_artifact = {
			has_artifact_modifier = artifact_dragon_scales_modifier
		}
		has_character_modifier = master_defence_modifier
		has_perk = natural_immunity_perk
		is_antimagic_trigger = yes
	}
}
has_immunity_for_mind_scan = {
	OR = {
		any_equipped_character_artifact = {
			has_artifact_modifier = immunity_mind_scan_terrain_cancel_negative_supply
		}
		any_equipped_character_artifact = {
			has_artifact_modifier = artifact_dragon_scales_modifier
		}
		has_character_modifier = master_defence_modifier
		is_antimagic_trigger = yes
	}
}
has_immunity_for_death_wish = {
	OR = {
		is_antimagic_trigger = yes
		has_character_modifier = master_defence_modifier
		has_character_modifier = samael_blessing
	}
}
has_immunity_for_antimagic_seal = {
	OR = {
		is_antimagic_trigger = yes
		has_perk = magical_creature_perk
		has_character_modifier = master_defence_modifier
	}
}
is_powerful_being = {
	OR = {
		AND = {
			has_trait = archmage
			NOT = {
				any_secret = {
					secret_type = secret_false_mage
				}
			}
		}
		has_trait = yaga
		is_a_demon_trigger = yes
	}
}
is_a_demon_trigger = {
	OR = {
		has_trait = demon2
		has_trait = demon1
	}
}
has_access_to_demon_lifestyle_trigger = {
	is_a_demon_trigger = yes
	NAND = {
		has_perk = archdemon_perk
		has_perk = crossroad_dealer_perk
	}
}
can_cast_firestorm_trigger = {
	OR = {
		AND = {
			has_trait = demon2
			has_trait_xp = {
				trait = demon2
				track = hell_powers
				value > 99
			}
		}
		has_character_flag = firestorm_spell_flag
	}
}
is_true_mage = {
	has_trait = archmage
	NOT = {
		any_secret = {
			secret_type = secret_false_mage
		}
	}
}
is_false_mage = {
	has_trait = archmage
	any_secret = {
		secret_type = secret_false_mage
	}
}
is_witch_huter = {
	OR = {
		has_character_modifier = novice_witch_hunter_modifier
		has_trait = witch_hunter
		any_secret = {
			secret_type = secret_witch_hunter
		}
	}
}
new_archmage_must_be_selected_trigger = {
	exists = global_var:mc_has_been_formed
	exists = scope:activity
	scope:activity = {
		has_variable = elections
	}
	#NOT = {
	#	exists = global_var:current_archmage_global
	#}
}
mc_gold_global_exists_trigger = {
	exists = global_var:mc_gold_global
}
mc_gold_global_avaiable_trigger = {
	exists = global_var:mc_gold_global
	global_var:mc_gold_global > 99
}
#is_landless_adventurer = no
#is_landless_administrative = no
#change_to_administrative_interaction_effect = yes
#change_to_administrative_effect = yes