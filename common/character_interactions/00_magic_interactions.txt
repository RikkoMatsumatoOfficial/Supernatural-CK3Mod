cast_curse = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
				has_perk = evil_eye_perk
				is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				has_immunity_for_regular_curse = no
			}
		}
		#scope:recipient = {
		#	custom_description = {
		#	text = magic_protection_custom
		#		has_full_magic_prot_trigger = no
		#		OR = {
		#			has_basic_magic_prot_trigger = no
		#			AND = {
		#				has_basic_magic_prot_trigger = yes
		#				scope:actor = {	can_penetrate_basic_magic_prot_trigger = yes	}
		#			}
		#		}
		#	}
		#}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile
	desc = "cast_curse_desc"
	#prompt = "cast_curse_prompt_text"
	#custom_description="cast_curse_custom_desc"
	#notification_text = cast_curse_notification_text

	cooldown_against_recipient = { years = 5 } 
	cooldown = { years = 2 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			
			#add_character_flag = {
			#	flag = magic_user
			#	years = 5
			#}
			#every_courtier_or_guest = {
			#			limit = { has_perk = magical_senses_perk }
			#	trigger_event = magic_ev.4
			#}
			
			#location = {
			#	duchy = {
			#		every_de_jure_county_holder = {
			#			limit = { 
			#				AND = {
			#					NOT = { this = scope:actor }
			#					has_perk = magical_senses_perk
			#				}
			#			}
			#				trigger_event = magic_ev.4
			#		}
			#
			#	}
			#}
			#mark_as_black_magic_caster = yes
			
			
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = cast_curse
			#	desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#	
			#	
			#}
			set_spell_id = { ID = 2 }
			save_scope_as = magic_user
			
			mark_as_black_magic_caster_effect = { L = 1 }
			stress_impact = {
				compassionate = medium_stress_impact_gain
				honest = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
			display_extended_duration_spell_catalyst = yes
			execute_or_counter_spell_effect = { SID = 2 }
			send_message_4_magic_sense_effect = yes
				#scope:recipient = {
				#	trigger_event = magic_ev.3
				#	if = {
				#		limit = {
				#			scope:actor = {
				#				exists = dynasty
				#				dynasty = {
				#					has_dynasty_perk = witchcraft_legacy_4
				#				}
				#			}
				#		}
				#		custom_tooltip = chance_to_cursed2_custom_tooltip
				#	}
				#	else = {
				#		custom_tooltip = chance_to_cursed_custom_tooltip
				#	}
				#	
				#}
			
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = spouses
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		modifier = {
			add = 100
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = 50
			scope:actor = {
				OR = {
					has_character_modifier = yaga_modifier
					has_character_modifier = yagas_blood_modifier
					has_trait = yaga
				}
				NOT = {
					has_witch_house_trigger = yes
				}
			}
			scope:recipient = {
				NOR = {
					has_character_modifier = yaga_modifier
					has_character_modifier = yagas_blood_modifier
					has_trait = yaga
				}
				has_witch_house_trigger = yes
			}
		}
		modifier = {
			add = -100
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
		modifier = {
			add = -60
			scope:actor = {
				has_character_flag = forbidden_black_magic_flag
			}
		}
	}
}

magic_domination = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			has_perk = mind_control_p6_perk
			#OR = {
			#	has_perk = mind_control_p6_perk
			#	AND = {
			#		is_a_demon_trigger = yes
			#		has_trait_xp = {
			#			trait = demon1
			#			value > 49
			#		}
			#	}
			#}
		}
		scope:recipient = {
			NOR = {
				has_relation_mminion = scope:actor
				has_relation_mmaster = scope:actor
				
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				has_immunity_for_magic_domination = no
			}
		}
		#scope:recipient = {
		#	custom_description = {
		#		text = magic_protection_custom
		#		has_full_magic_prot_trigger = no
		#		OR = {
		#			has_basic_magic_prot_trigger = no
		#			AND = {
		#				has_basic_magic_prot_trigger = yes
		#				scope:actor = {	can_penetrate_basic_magic_prot_trigger = yes	}
		#			}
		#		}
		#	}
		#}
		custom_description = {
			text = physical_contact_custom
			has_physical_contanct2 = yes
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			#custom_description = {
			#	text = not_war_against
			#	NOT = { is_at_war_with = scope:recipient }
			#}
			custom_description = {
				text = not_in_army_0
				is_in_army = no
			}
			custom_description = {
				text = not_in_travel_0
				OR = {
					trigger_if = {
						limit = {
							exists = location
							exists = capital_province
						}
						location = capital_province
					}
					#is_at_home = yes
					AND = {
						exists = involved_activity
						NOT = {
							has_activity_state = travel
						}
					}
					AND = {
						exists = current_travel_plan
						current_travel_plan = {
							any_entourage_character = {
								this = scope:recipient
							}
						}
					}
					AND = {
						exists = liege
						exists = location
						exists = liege.location
						exists = scope:recipient.location
						location = liege.location
						location = scope:recipient.location
						liege.location = liege.capital_province
					}
				}
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 5 } 
	cooldown = { days = 7 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 3 }
			save_scope_as = magic_user
			hidden_effect = {
				if = {
					limit = {
						any_character_artifact = {
							has_variable = magic1
						}
						is_ai = no
						any_living_character = {
							has_trait = true_witch
							count < 4
						}
					}
					random = {
						chance = 40
						create_true_witch_effect = yes
					}
				}
			}
			#add_character_flag = {
			#	flag = magic_user
			#	years = 5
			#}
			#mark_as_black_magic_caster = yes
			
			#add_gold=-10
			spend_standard_ps_effect = yes
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = magic_domination
			#	desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#	
			#}
			mark_as_black_magic_caster_effect = { L = 1 }
			gain_sc_xp1_effect = yes
			custom_tooltip = command_minion_interaction_unlocked_ct
			stress_impact = {
				compassionate = medium_stress_impact_gain
				honest = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
			scope:recipient = {
				custom_tooltip = mind_control_custom_tooltip
			}
			execute_or_counter_spell_effect = { SID = 3 }
			metamagic_effect = yes
			send_message_4_magic_sense_effect = yes
		}
	}
	send_options_exclusive = no
	send_option = {
		is_shown = {
			scope:actor = {
				has_character_flag = better_domination_spell
			}
		}
		flag = magic_domination_faith
		localization = MAGIC_DOMINATION_O1
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = nearby_domicile_owners
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = courtiers
		ai_recipients = spouses
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0		
		modifier = {
			add = 40
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}
		modifier = {
			add = 100
			scope:recipient = {
				is_vassal_of = scope:actor
				exists = joined_faction
				#is_powerful_vassal = yes
				#opinion = {
				#	target = scope:actor
				#	value < -10
				#}
			}
		}
		modifier = {
			add = 20
			scope:recipient = {
				opinion = {
					target = scope:actor
					value < -70
				}
			}
		}
		modifier = {
			add = 10
			scope:recipient = {
				is_spouse_of = scope:actor
				NOR = {
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
		}
		modifier = {
			add = -200
			scope:recipient = {
				is_ai = no
			}
		}
		modifier = {
			add = -200
			scope:actor = {
				has_strong_hook = scope:recipient
			}
		}
	}
}

magic_healing = {
	
	is_shown = {
		#NOT = { scope:recipient = scope:actor }
		scope:actor = {
			can_use_healing_spell = yes
			is_imprisoned = no
			NOT = {
				has_character_flag = abdul_dude
			}
		}
		OR = {
			scope:recipient = {
				OR = {
					has_trait = ill
					has_trait = pneumonic
					has_trait = great_pox
					has_trait = early_great_pox
					has_trait = lovers_pox
					has_trait = leper
					has_trait = wounded_1
					has_trait = wounded_2
					has_trait = wounded_3
					has_trait = maimed
					has_trait = infirm
					has_trait = incapable
					has_trait = gout_ridden
					has_trait = consumption
					has_trait = cancer
					has_trait = typhus
					has_trait = bubonic_plague
					has_trait = smallpox
					has_trait = sickly
					has_trait = blind
					has_trait = disfigured
					has_character_modifier = chronic_headaches_modifier
					has_character_modifier = infected_wound_modifier
					has_character_modifier = gangrene_modifier
					has_character_modifier = hunger_sickness_modifier
					has_character_modifier = travel_mild_frostbite_modifier
					has_trait = measles
					has_trait = dysentery
					has_trait = ergotism
					has_trait = scarred
					has_trait = beardless_eunuch
					has_trait = eunuch_1
				}
			}
			AND = {
				scope:actor = {
					any_character_artifact = {
						has_artifact_modifier = artifact_ring_of_life_modifier
					}
				}
				scope:recipient = {
					OR = {
						has_trait = ill
						has_trait = pneumonic
						has_trait = great_pox
						has_trait = early_great_pox
						has_trait = lovers_pox
						has_trait = leper
						has_trait = wounded_1
						has_trait = wounded_2
						has_trait = wounded_3
						has_trait = maimed
						has_trait = infirm
						has_trait = incapable
						has_trait = gout_ridden
						has_trait = consumption
						has_trait = cancer
						has_trait = typhus
						has_trait = bubonic_plague
						has_trait = smallpox
						has_trait = sickly
						has_trait = blind
						has_trait = disfigured
						has_character_modifier = chronic_headaches_modifier
						has_character_modifier = infected_wound_modifier
						has_character_modifier = gangrene_modifier
						has_trait = measles
						has_trait = dysentery
						has_trait = ergotism
						has_trait = scarred
						has_trait = beardless_eunuch
						has_trait = eunuch_1
						has_trait = depressed_genetic
						has_trait = lunatic_genetic
						has_trait = beauty_bad_1
						has_trait = beauty_bad_2
						has_trait = beauty_bad_3
						has_trait = intellect_bad_1
						has_trait = intellect_bad_2
						has_trait = intellect_bad_3
						has_trait = physique_bad_1
						has_trait = physique_bad_2
						has_trait = physique_bad_3
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = lisping
						has_trait = stuttering
						has_trait = dwarf
						has_trait = spindly
						has_trait = scaly
						has_trait = wheezing
						has_trait = infertile
						has_trait = dull
						has_trait = weak
						has_trait = inbred
						has_trait = one_legged
					}
				}
			}
		}
		
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
			#custom_description = {
			#	text = physical_contact_custom
			#	has_physical_contanct2 = yes
			#}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly

	cooldown_against_recipient = { years = 2 } 
	cooldown = { months = 6 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 4 }
			save_scope_as = magic_user
			#add_character_flag = {
			#	flag = magic_user
			#	years = 5
			#}
			send_message_4_magic_sense_effect = yes
			#add_gold=-10
			spend_standard_ps_effect = yes
			hidden_effect = {
				if = {
					limit = {
						exists = liege
						liege = scope:recipient
						NOT = {
							scope:actor = scope:recipient
						}
					}
					if = {
						limit = {
							has_character_flag = cm_busy_flag
						}
						remove_character_flag = cm_busy_flag
					}
					add_character_flag = {
						flag = cm_busy_flag
						years = 2
					}
					if = {
						limit = {
							has_character_flag = cm_yellow_card_flag
						}
						remove_character_flag = cm_yellow_card_flag
					}
				}
			}
			send_interface_message = {
				type = event_toast_effect_neutral
				title = magic_healing
				desc = magic_healing_text
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = use_magic_custom_tooltip1
				metamagic_effect = yes
				if = {
					limit = {
						NOT = {
							scope:actor = scope:recipient
						}
					}
					stress_impact = {
						compassionate = medium_stress_impact_loss
						sadistic = minor_stress_gain
						callous = minor_stress_gain
					}
					add_dread = minor_dread_loss
				}
				
				if = {
					limit = {
						NOT = { scope:actor = scope:recipient }
						any_secret = {
							secret_type = secret_witch
							NOT = { is_known_by = scope:recipient }
						}
					}
					random_secret = {
						limit = {
							secret_type = secret_witch
							NOT = { is_known_by = scope:recipient }
						}
						reveal_to = scope:recipient
					}
				}
			}
		}
		scope:recipient = {
					full_healing_effect = yes
					if = {
						limit = {
							scope:actor = {
								any_character_artifact = {
									has_artifact_modifier = artifact_ring_of_life_modifier
								}
							}
						}
						extra_healing_effect = yes
					}
					if = {	limit = {	scope:magic_healing_removes_scars = yes	}
						remove_trait = scarred
					}
					if = {
						limit = {
							NOT = { scope:actor = scope:recipient }
							NOT = {
								has_opinion_modifier = {
									modifier = grateful_opinion
									target = scope:actor
								}
							}
						}
						add_opinion = {
							modifier = grateful_opinion
							target = scope:actor
							opinion = 70
						}
					}
		}
	}
	send_options_exclusive = no
	send_option = {
		is_shown = {
			scope:recipient = {
				has_trait = scarred
			}
		}
		flag = magic_healing_removes_scars
		localization = MAGIC_HEALING_SCARS
	}
	auto_accept = yes
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
		modifier = {
			add = -100
			scope:actor = {
				is_a_demon_trigger = yes
			}
		}
	}
}


cast_powerfull_curse = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			OR = {
				has_perk = fate_weaver_p10_perk
				#is_a_demon_trigger = yes
				#has_trait = yaga
				has_character_flag = powerful_curse_one_time
			}
			is_imprisoned = no
		}
		scope:recipient = {
			NOT = {
				has_relation_mminion = scope:actor
				#has_relation_mmaster = scope:actor
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				has_immunity_for_powerful_curse = no
			}
		}
		#scope:recipient = {
		#	custom_description = {
		#		text = magic_protection_custom
		#		has_full_magic_prot_trigger = no
		#		OR = {
		#			has_basic_magic_prot_trigger = no
		#			AND = {
		#				has_basic_magic_prot_trigger = yes
		#				scope:actor = {	can_penetrate_basic_magic_prot_trigger = yes	}
		#			}
		#		}
		#	}
		#}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					AND = {
						can_spend_standard_ps_trigger = no
						has_trait = yaga
					}
				}
				
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 5 } 
	cooldown = { months = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			save_scope_as = magic_user
			#add_character_flag = {
			#	flag = magic_user
			#	years = 5
			#}
			#mark_as_black_magic_caster = yes
			
			scope:recipient = {
				save_scope_as = reci
			}
			hidden_effect = {
						#create_character = {
						#	employer = scope:actor
						#	template = witch_hunter_character
						#	save_scope_as = whunter
						#}
						#scope:whunter = {
						#	add_perk = protective_runes_perk
						#	add_perk = magical_senses_perk
						#}
				if = {
					limit = {
						has_game_rule = high_whunters
						is_ai = no
					}
					random = {
						chance = 30
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_courtier_or_guest = {
								has_trait = witch_hunter
							}
						}
					}	
					random = {
						chance = 10
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
				if = {
					limit = {
						has_character_flag = powerful_curse_one_time
					}
					remove_character_flag = powerful_curse_one_time
				}
			}
			
			trigger_event = magic_ev.10
			if = {
				limit = {
					scope:recipient = {
						is_magic_protected = yes
					}
				}
				custom_tooltip = spell_may_be_countered
			}
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = cast_powerfull_curse
			#	#desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#	
			#}
			mark_as_black_magic_caster_effect = { L = 1 }
			show_as_tooltip = {
				if = {
					limit = {	NOT = {	has_trait = yaga	}	}
					spend_standard_ps_effect = yes
				}
				gain_sc_xp1_effect = yes
			}
			stress_impact = {
				compassionate = medium_stress_impact_gain
				honest = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
			scope:recipient = {
				custom_tooltip = cast_powerfull_curse_ct
			}
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = courtiers
		ai_recipients = spouses
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		
		modifier = {
			add = 90
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		#modifier = {
		#	add = 50
		#	scope:recipient = {
		#		opinion = {
		#			target = scope:actor
		#			value < -50
		#		}
		#	}
		#}
		modifier = {
			add = 50
			scope:actor = {
				OR = {
					has_character_modifier = yaga_modifier
					has_trait = source2
				}
				NOT = {
					has_witch_house_trigger = yes
				}
			}
			scope:recipient = {
				NOR = {
					has_character_modifier = yaga_modifier
					has_trait = source2
				}
				has_witch_house_trigger = yes
			}
		}
		modifier = {
			add = -110
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
		modifier = {
			add = -60
			scope:actor = {
				has_character_flag = forbidden_black_magic_flag
			}
		}
		modifier = {
			add = 10
			scope:actor = {
				OR = {
					has_trait = lunatic_1
					has_trait = lunatic_genetic
					has_trait = paranoid
				}
			}
		}
	}
}

banish_demon = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			can_use_banish_spell = yes
		}
		scope:recipient = {
			is_a_demon_trigger = yes
			NOT = { has_relation_mminion = scope:actor }
			NOT = { has_character_flag = summoned_by_abdul_flag }
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				NOR = {
					has_trait = demon2
					any_character_artifact = {
						has_artifact_modifier = hells_scepter_base_modifier
					}
				}
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
		#scope:recipient = {
		#	custom_description = {
		#		text = magic_protection_custom
		#		has_full_magic_prot_trigger = no
		#		NOR = {
		#			any_equipped_character_artifact = {
		#				has_variable = magic_scepter
		#			}
		#			has_character_modifier = touched_divinity_modifier
		#		}
		#	}
		#}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 5 } 
	cooldown = { months = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	popup_on_receive = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 6 }
			save_scope_as = magic_user
			#add_character_flag = {
			#	flag = magic_user
			#	years = 5
			#}
			
			scope:recipient = {
				save_scope_as = reci
			}
			
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = banish_demon
			#	#desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#}
			custom_tooltip = use_magic_custom_tooltip
			spend_standard_ps_effect = yes
			gain_sc_xp1_effect = yes
			execute_or_counter_spell_effect = { SID = 6 }
			#hidden_effect = {
			#	if = {
			#		limit = {
			#			has_character_flag = fund_demon_fighting_flag
			#		}
			#		pay_for_demon_head_effect = yes
			#	}
			#}
			metamagic_effect = yes
			send_message_4_magic_sense_effect = yes
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = courtiers
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
		ai_recipients = realm_characters
		ai_recipients = sub_realm_characters
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		
		modifier = {
			add = 100
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -1000
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
					has_strong_hook = scope:actor
				}
			}
		}
		modifier = {
			add = 80
			scope:actor = {
				has_variable = mc_member_var
				has_character_flag = mc_fighting_demons_flag
			}
		}
	}
}

consume_child = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			OR = {
				has_trait = cannibal
				any_secret = {
					secret_type = secret_cannibal
				}
			}
			OR = {
				has_trait = witch
				any_secret = {
					secret_type = secret_witch
				}
			}
			
		}
		scope:recipient = {
			age < 16
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:recipient = {
			custom_description = {
				text = only_specified_child
				OR = {
					is_courtier_of = scope:actor
					has_relation_guardian = scope:actor
					is_imprisoned_by = scope:actor
					is_foreign_court_or_pool_guest_of = scope:actor
				}
			}
			custom_description = {
				text = only_specified_child2
				OR = {
					NOT = {
						is_child_of = scope:actor
					}
					scope:actor = {
						has_trait = sadistic
					}
				}
				
			}
		}
	}
	icon = icon_cann
	common_interaction = yes
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			hidden_effect = {
				random_list = {
					40 = {
						send_message_4_child_missing_effect = yes
					}
					20 = {
						trigger_event = {
							id = magic_ev6.66
							days = 4
						}
					}
					40 = {

					}
				}
				if = {
					limit = {
						has_game_rule = high_whunters
					}
					if = {
						limit = {
							is_ai = no
						}
						random = {
							chance = 40
							spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
						}
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_courtier_or_guest = {
								has_trait = witch_hunter
							}
						}
					}
					if = {
						limit = {
							is_ai = no
						}
						random = {
							chance = 25
							spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
						}
					}
				}
				random_list = {
					1 = { mark_as_black_magic_caster_effect = { L= 2 } }
					1 = { mark_as_black_magic_caster_effect = { L= 1 } }
					1 = {  }
				}
			}
			
			send_interface_message = {
				type = event_toast_effect_neutral
				title = consume_child
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = absorb_good_traits_ct
				custom_tooltip = ev6.66.0.a_ct
				#hidden_effect = {
				#	add_secret = {
				#		type = secret_murder
				#		target = scope:recipient
				#	}
				#}
				if = {
					limit = {
						NOR = {
							has_trait = compassionate
							has_trait = honest
							has_trait = just
						}
					}
					add_stress = minor_stress_loss
				}
				
				stress_impact = {
					compassionate = major_stress_impact_gain
					honest = minor_stress_impact_gain
					just = minor_stress_impact_gain
				}
				if = {
					limit = {
						has_trait = yaga
						is_ai = no
					}
					if = {
						limit = {
							has_character_modifier = yaga_beauty_modifier
						}
						hidden_effect = {
							remove_character_modifier = yaga_beauty_modifier
						}
					}
					add_character_modifier = {
						modifier = yaga_beauty_modifier
						years = 1
					}
				}
				if = {
					limit = {
						has_character_flag = me_death_project_done2
					}
					add_character_modifier = {
						modifier = lifestealer_modifier
					}
				}
				if = {
					limit = {
						OR = {
							has_relation_guardian = scope:recipient
							has_relation_ward = scope:recipient
						}
					}
					if = {
						limit = { NOT = { has_character_flag = dubious_guardian } }
						add_character_flag = dubious_guardian
					}
					else_if = {
						limit = {
							NOT = { has_character_modifier = dubious_guardian_modifier }
						}
						random = {
							chance = 50
							add_character_modifier = {
								modifier = dubious_guardian_modifier
								years = 10
							}
						}
					}
				}
				
				scope:recipient = {
					custom_tooltip = consume_child_ct
					if = {
						limit = {
							num_of_bad_genetic_traits = 0
						}
						scope:actor = {
							add_character_modifier = {
								modifier = ate_good_meal
								years = 3
							}
						}
					}
					hidden_effect = {
						
						random = {
							chance = 50
							#physique
							if = {
								limit = {
									OR = {
										has_trait = physique_good_3
										has_trait = physique_good_2
										has_trait = physique_good_1
									}
									scope:actor = {
										NOT = {
											has_trait = physique_good_3
										}
									}
								}
								scope:actor = {
									if = {
										limit = {
											has_trait = physique_bad_3
										}
										remove_trait = physique_bad_3
										add_trait = physique_bad_2
									}
									else_if = {
										limit = {
											has_trait = physique_bad_2
										}
										remove_trait = physique_bad_2
										add_trait = physique_bad_1
									}
									else_if = {
										limit = {
											has_trait = physique_bad_1
										}
										remove_trait = physique_bad_1
									}
									else_if = {
										limit = {
											has_trait = physique_good_1
											scope:recipient = {
												OR = {
													has_trait = physique_good_3
													has_trait = physique_good_2
												}
												
											}
										}
										remove_trait = physique_good_1
										add_trait = physique_good_2
									}
									else_if = {
										limit = {
											has_trait = physique_good_2
											scope:recipient = {
												has_trait = physique_good_3
											}
										}
										remove_trait = physique_good_2
										add_trait = physique_good_3
									}
									else = {
										add_trait = physique_good_1
									}
								}	
							}
						}
						random = {
							chance = 50
							#beuty
							if = {
								limit = {
									OR = {
										has_trait = beauty_good_3
										has_trait = beauty_good_2
										has_trait = beauty_good_1
									}
									scope:actor = {
										NOT = {
											has_trait = beauty_good_3
										}
									}
								}
								scope:actor = {
									if = {
										limit = {
											has_trait = beauty_bad_3
										}
										remove_trait = beauty_bad_3
										add_trait = beauty_bad_2
									}
									else_if = {
										limit = {
											has_trait = beauty_bad_2
										}
										remove_trait = beauty_bad_2
										add_trait = beauty_bad_1
									}
									else_if = {
										limit = {
											has_trait = beauty_bad_1
										}
										remove_trait = beauty_bad_1
									}
									else_if = {
										limit = {
											has_trait = beauty_good_1
											scope:recipient = {
												OR = {
													has_trait = beauty_good_3
													has_trait = beauty_good_2
												}
												
											}
										}
										remove_trait = beauty_good_1
										add_trait = beauty_good_2
									}
									else_if = {
										limit = {
											has_trait = beauty_good_2
											scope:recipient = {
												has_trait = beauty_good_3
											}
										}
										remove_trait = beauty_good_2
										add_trait = beauty_good_3
									}
									else = {
										add_trait = beauty_good_1
									}
								}	
							}
						}
						random = {
							chance = 50
							#intellect
							if = {
								limit = {
									OR = {
										has_trait = intellect_good_3
										has_trait = intellect_good_2
										has_trait = intellect_good_1
									}
									scope:actor = {
										NOT = {
											has_trait = intellect_good_3
										}
									}
								}
								scope:actor = {
									if = {
										limit = {
											has_trait = intellect_bad_3
										}
										remove_trait = intellect_bad_3
										add_trait = intellect_bad_2
									}
									else_if = {
										limit = {
											has_trait = intellect_bad_2
										}
										remove_trait = intellect_bad_2
										add_trait = intellect_bad_1
									}
									else_if = {
										limit = {
											has_trait = intellect_bad_1
										}
										remove_trait = intellect_bad_1
									}
									else_if = {
										limit = {
											has_trait = intellect_good_1
											scope:recipient = {
												OR = {
													has_trait = intellect_good_3
													has_trait = intellect_good_2
												}
												
											}
										}
										remove_trait = intellect_good_1
										add_trait = intellect_good_2
									}
									else_if = {
										limit = {
											has_trait = intellect_good_2
											scope:recipient = {
												has_trait = intellect_good_3
											}
										}
										remove_trait = intellect_good_2
										add_trait = intellect_good_3
									}
									else = {
										add_trait = intellect_good_1
									}
								}	
							}
						}
							
							
						if = {
							limit = {
								has_trait = pure_blooded
							}
							scope:actor = {
								random = {
									chance = 75
									random_list = {
										10 = {
											trigger = {
												NOT = {
													has_trait = pure_blooded
												}
											}
											add_trait = pure_blooded
										}
										10 = {
											random_list = {
												10 = {
													send_interface_toast = {
														title = ic_pure_meal
														add_diplomacy_skill = 1
													}
												}
												10 = {
													send_interface_toast = {
														title = ic_pure_meal
														add_martial_skill = 1
													}
												}
												10 = {
													send_interface_toast = {
														title = ic_pure_meal
														add_stewardship_skill = 1
													}
												}
												10 = {
													send_interface_toast = {
														title = ic_pure_meal
														add_intrigue_skill = 1
													}
												}
												10 = {
													send_interface_toast = {
														title = ic_pure_meal
														add_learning_skill = 1
													}
												}
											}
										}
									}
								}
								
							}
						}
						if = {
							limit = {
								has_trait = source
								scope:actor = {
									NOT = {
										has_trait = source
										#has_trait = source2
										#has_trait = source3
										#has_trait = source4
									}
								}
							}
							scope:actor = {
								random = {
									chance = 50
									add_trait = source
									if = {
										limit = {
											scope:recipient = {
												has_trait_xp = {
													trait = source
													track = magic_potential
													value > 50
												}
											}
										}
										add_trait_xp = {
											trait = source
											track = magic_potential
											value = 45
										}
									}
									else_if = {
										limit = {
											scope:recipient = {
												has_trait_xp = {
													trait = source
													track = magic_potential
													value > 19
												}
											}
										}
										add_trait_xp = {
											trait = source
											track = magic_potential
											value = 20
										}
									}
									hidden_effect = {
										if = {
											limit = {
												exists = dynasty
												dynasty = {
													has_dynasty_perk = witchcraft_legacy_5
												}
											}
											add_trait_xp = {
												trait = source
												track = magic_potential
												value = 10
											}
										}
									}
								}
							}
						}
	
						if = {
							limit = {
								has_trait = strong
								scope:actor = {
									NOT = {
										has_trait = strong
									}
								}
							}
							scope:actor = {
								random = {
									chance = 50
									if = {
										limit = {
											has_trait = weak
										}
										remove_trait = weak
									}
									else = {
										add_trait = strong
									}
									
								}
							}
						}

						if = {
							limit = {
								has_trait = fecund
								scope:actor = {
									NOT = {
										has_trait = fecund
									}
								}
							}
							scope:actor = {
								random = {
									chance = 50
									if = {
										limit = {
											has_trait = infertile
										}
										remove_trait = infertile
									}
									else = {
										add_trait = fecund
									}
								}
							}
						}

						if = {
							limit = {
								has_trait = shrewd
								scope:actor = {
									NOT = {
										has_trait = shrewd
									}
								}
							}
							scope:actor = {
								random = {
									chance = 50
									if = {
										limit = {
											has_trait = dull
										}
										remove_trait = dull
									}
									else = {
										add_trait = shrewd
									}
								}
							}
						}
					}
					
					if = {
						limit = {
							can_spend_standard_ps_trigger = yes
							scope:actor = {
								can_be_power_saturated_trigger = yes
							}
						}
						scope:actor = {
							gain_source_ps_effect = yes
						}
					}

					
					
					hidden_effect = {
						death = {
							killer = scope:actor
							#death_reason = death_eaten
							death_reason = death_murder
						}
					}
					
					
				}
				hidden_effect = {
					add_secret = {
						type = secret_murder
						target = scope:recipient
					}
				}
			}
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOR = {
			has_trait = compassionate
			has_trait = forgiving
			has_trait = temperate
		}
	}
	
	ai_targets = {
		ai_recipients = courtiers
		ai_recipients = prisoners
		ai_recipients = guests
		ai_recipients = scripted_relations
	}

	ai_frequency = 24

	ai_will_do = {
		base = 50
		modifier = {
			add = -150
			scope:recipient = {
				is_primary_heir_of = scope:actor
			}
		}
		modifier = {
			add = 30
			has_character_modifier = yaga_modifier
		}
		modifier = {
			add = -250
			has_character_modifier = yaga_modifier
			scope:recipient = {
				has_trait = source2
			}
		}
		modifier = {
			add = -250
			has_trait = source2
			scope:recipient = {
				has_trait = source2
			}
		}
	}
}


use_singularity = {
	target_type = title
	target_filter = recipient_domain_titles
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			any_character_artifact = {
				OR = {
					has_artifact_modifier = singularity_modifier5
					has_artifact_modifier = singularity_modifierX
				}
			}
			is_true_mage = yes
			is_imprisoned = no
		}
		scope:recipient = {
			is_landed_or_landless_administrative = yes
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	category = interaction_category_hostile

	cooldown_against_recipient = { months = 12 } 
	cooldown = { months = 12 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	can_be_picked_title = {
		scope:target = {
			is_leased_out = no
			tier = tier_county
		}
	}
	on_accept = {
		scope:target = {
			#change_development_progress = major_development_progress_loss
			change_development_level = -50
			save_scope_as = ttile
		}
		scope:actor = {
			set_spell_id = { ID = 7 }
			add_dread = 50
			gain_cm_xp5_effect = yes
			spend_standard_ps_effect = yes
			stress_impact = {
				compassionate = massive_stress_gain
				sadistic = major_stress_loss
				callous = minor_stress_loss
			}
			mark_as_black_magic_caster_effect = { L = 2 }
			expose_your_witch_secret = yes
			hidden_effect = {
				random = {
					chance = 7
					trigger_event = {
						id = magic_ev10.161
						days = { 20 80 }
					}
				}
			}
		}
		custom_tooltip = spell_cannot_be_countered
		custom_tooltip = use_singularity_ct
		custom_tooltip = use_singularity_agains_army_ct
		scope:target.title_province = {
			add_province_modifier = {
				modifier = magical_radiation_modifier
				years = 50
			}
			if = {
				limit = {
					NOT = {
						has_province_modifier = magic_damaged_walls_modifier
					}
				}
				add_province_modifier = {
					modifier = magic_damaged_walls_modifier
					years = 10
				}
			}
		}
		#custom_tooltip = use_singularity_ct2
		
		
		
		hidden_effect_new_object = {
			scope:target.title_province = {
				every_army_in_location = {
					deplete_army_by_percentage = 0.99
				}
				every_character_in_location = {
					limit = {
						exists = location
						location = scope:target.title_province
						#has_full_magic_prot_trigger = no
					}
					if = {
						limit = {
							has_perk = mage_tower_p2_perk
						}
						trigger_event = magic_ev10.9
					}
					else = {
						random_list = {
							80 = {
								death = {
									death_reason = death_murder
									killer = scope:actor
								}
							}
							5 = {
								add_trait = incapable
							}
							5 = {
								add_trait = cancer
								add_trait = wounded_2
								add_trait = infertile
							}
							3 = {
								add_trait = cancer
								add_trait = wounded_1
								add_trait = disfigured
								add_trait = infertile
							}
							2 = {
								add_trait = cancer
								add_trait = wounded_1
								add_trait = lunatic_1
								add_trait = infertile
							}
							5 = {
								add_trait = cancer
								add_trait = wounded_1
								add_trait = blind
								add_trait = infertile
							}
						}
					}
				}
			}
			scope:actor = {
				save_scope_as = magic_user
				send_message_4all_magic_sense_effect = yes
			}
			
			#every_living_character = {
			#	limit = {
			#		exists = location
			#		location = scope:target.title_province
			#		has_full_magic_prot_trigger = no
			#	}
			#	random_list = {
			#		80 = {
			#			death = {
			#				death_reason = death_murder
			#				killer = scope:actor
			#			}
			#		}
			#		5 = {
			#			add_trait = incapable
			#		}
			#		5 = {
			#			add_trait = cancer
			#			add_trait = wounded_2
			#			add_trait = infertile
			#		}
			#		3 = {
			#			add_trait = cancer
			#			add_trait = wounded_1
			#			add_trait = disfigured
			#			add_trait = infertile
			#		}
			#		2 = {
			#			add_trait = cancer
			#			add_trait = wounded_1
			#			add_trait = lunatic_1
			#			add_trait = infertile
			#		}
			#		5 = {
			#			add_trait = cancer
			#			add_trait = wounded_1
			#			add_trait = blind
			#			add_trait = infertile
			#		}
			#	}
			#	
			#}
			every_player = {
				trigger_event = {
					id = magic_ev2.74
					days = { 2 6 }
				}
			}
			
			scope:actor = {
				if = {
					limit = {
						has_game_rule = high_whunters
						NOT = {
							has_character_flag = abdul_dude
						}
					}
					spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
				}
				else_if = {
					limit = {
						NOT = {
							any_courtier_or_guest = {
								has_trait = witch_hunter
							}
						}
						NOT = {
							has_character_flag = abdul_dude
						}
					}
					random = {
						chance = 40
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
				metamagic_effect = yes
			}
			if = {
				limit = {
					scope:recipient = {
						NOT = {
							has_character_flag = abdul_dude
						}
					}
				}
				trigger_event = {
					id = magic_ev2.77
					days = { 7 12 }
				}
			}
			else_if = {
				limit = {
					scope:recipient = {
						is_ai = yes
						any_character_artifact = {
							has_variable = singularity2
						}
						is_imprisoned = no
					}
				}
				scope:actor = {
					trigger_event = {
						id = magic_ev6.64
						days = { 7 12 }
					}
				}
			}
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		#ai_recipients = neighboring_rulers
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}

	ai_frequency = 60

	ai_will_do = {
		base = 0
		
		modifier = {
			add = 70
			scope:recipient = {
				is_at_war_with = scope:actor
			}
		}
		modifier = {
			add = 10
			scope:actor = {
				OR = {
					has_trait = vengeful
					has_trait = sadistic
					has_trait = callous
				}
			}
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}
	}
}

death_wish = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_character_flag = death_wish
			is_imprisoned = no
		}
		scope:recipient = {
			NOT = { has_relation_mminion = scope:actor }
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					has_character_flag = death_wish
				}
			}
		}
		
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				has_immunity_for_death_wish = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = must_be_mortal_custom
				NOR = {
					is_immortal = yes
					is_a_demon_trigger = yes
					has_trait = yaga

					has_trait = immortal1
					has_trait = immortal2
				}
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 8 }
			save_scope_as = magic_user
			#add_character_flag = {
			#	flag = magic_user
			#	years = 5
			#}
			
			scope:recipient = {
				save_scope_as = reci
			}
			
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = death_wish_title
			#	#desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#	
			#}
			mark_as_black_magic_caster_effect = { L = 1 }
			if = {
				limit = {
					has_character_flag = death_wish
				}
				remove_character_flag = death_wish
			}
			else = {
				spend_standard_ps_effect = yes
			}
			custom_tooltip = death_wish_ct
				#if = {
				#	limit = {
				#		scope:recipient = {
				#			has_basic_magic_prot_trigger = yes
				#		}
				#	}
				#	custom_tooltip = bypass_magic_prot_custom_tooltip
				#}
			gain_sc_xp1_effect = yes
			
			execute_or_counter_spell_effect = { SID = 8 }
			send_message_4_magic_sense_effect = yes
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = courtiers
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		
		modifier = {
			add = 80
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
	}
}


teach_sorcery = {
	
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_trait = archmage
			is_imprisoned = no
		}
		scope:recipient = {
			is_adult = yes
			NOR = {
				is_a_demon_trigger = yes
				has_trait = witch_hunter
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = you_are_false_mage
				NOT = {
					any_secret = {
						secret_type = secret_false_mage
					}
				}
			}
		}
		scope:recipient = {
			#custom_description = {
			#	text = "cast_curse_custom_desc"
			#	}
			custom_description = {
				text = must_be_witch_custom
				OR = {
					has_trait = witch
					has_trait = true_witch
					has_focus = witch_focus
					any_secret = {
						secret_type = secret_witch
						is_known_by = scope:actor
					}
				}
			}
			custom_description = {
				text = is_sorcer_custom
				NOR = {
					has_focus = arcane_focus
					has_trait = archmage
					has_character_flag = start_sorcery_training
					has_perk = magical_experiments_p1_perk
					has_character_flag = arcane_unlocked_flag
				}
			}
		}
	}
	icon = icon_learning
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly
	desc = teach_sorcery_desc
	#prompt = "cast_curse_prompt_text"
	#custom_description="cast_curse_custom_desc"
	#notification_text = cast_curse_notification_text

	cooldown_against_recipient = {
		years = teach_sorcery_cooldown_value
	} 
	cooldown = {
		years = teach_sorcery_cooldown_value
	} 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			
			send_interface_message = {
				type = event_toast_effect_neutral
				title = teach_sorcery
				desc = "send_interface_message_text"
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = teach_sorcery_custom_tooltip
				custom_tooltip =  teach_sorcery_custom_tooltip3
				#tooltip="tooltip0"
				stress_impact = {
					arrogant = minor_stress_impact_gain
					paranoid = major_stress_impact_gain
					lazy = medium_stress_impact_gain
					trusting = minor_stress_impact_loss
				}
				scope:recipient = {
					trigger_event = magic_ev3.10
					custom_tooltip = teach_sorcery_custom_tooltip2
				}
			}
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = paranoid
			has_trait = lazy
		}
	}
	
	ai_targets = {
		ai_recipients = children
		ai_recipients = scripted_relations
	}

	ai_frequency = 24

	ai_will_do = {
		base = -30
		
		modifier = {
			add = 70
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
					is_heir_of = scope:actor
				}
			}
		}
		modifier = {
			add = 10
			scope:recipient = {
				has_trait = lifestyle_mystic
			}
		}
		modifier = {
			add = 20
			scope:recipient = {
				OR = {
					has_trait = shrewd
					has_trait = intellect_good_1
					has_trait = intellect_good_2
					has_trait = intellect_good_3
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				OR = {
					has_trait = paranoid
					has_trait = lazy
				}
			}
		}
		modifier = {
			add = 30
			scope:actor = {
				culture = {
					has_cultural_tradition = mage_rulership_tradition
				}
			}
		}
		modifier = {
			add = -100
			has_game_rule = min_num_of_mages
		}
	}
}

witch_trial = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
				is_adult = yes
				has_trait = witch_hunter
				#has_trait_xp = {
				#	trait = supernatural_hunter
				#	track = witch_hunting
				#	value > 29
				#}
				is_imprisoned = no
		}
		scope:recipient = {
			is_adult = yes
			is_imprisoned_by = scope:actor
		}	
	}
	#is_valid_showing_failures_only = {
	#	
	#}
	icon = torture_interaction
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_prison
	desc = witch_trial_desc
	#prompt = "cast_curse_prompt_text"
	#custom_description="cast_curse_custom_desc"
	#notification_text = cast_curse_notification_text

	cooldown_against_recipient = { days = 7 } 
	cooldown = { days = 7 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			
			send_interface_message = {
				type = event_toast_effect_neutral
				title = witch_trial
				desc = "send_interface_message_text"
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = witch_trial_ct
				custom_tooltip = witch_trial_ct3
				#tooltip="tooltip0"
				stress_impact = {
					compassionate = minor_stress_impact_gain
				}
				scope:recipient = {
					custom_tooltip = witch_trial_ct2
				}
				trigger_event = magic_ev3.54
			}
		}
	}
	
	auto_accept = yes
}

stop_the_witch = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
				is_ruler = yes
				is_adult = yes
				has_trait = witch_hunter
				has_trait_xp = {
					trait = supernatural_hunter
					track = witch_hunting
					value > 29
				}
				is_imprisoned = no
		}
		scope:recipient = {
			is_adult = yes
			is_imprisoned = no
			OR = {
				has_trait = witch
				has_trait = true_witch
				has_trait = archmage
				is_a_demon_trigger = yes
				has_focus = witch_focus
				has_focus = arcane_focus
				any_secret = {
					secret_type = secret_witch
					is_known_by = scope:actor
				}
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			custom_description = {
				text = has_hook_on_you_custom
				NOT = { has_hook = scope:actor }
			}
		}
	}
	icon = torture_interaction
	common_interaction = yes
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile
	desc = stop_the_witch_desc
	#cooldown_against_recipient = { years = 4 } 
	#cooldown = { years = 4 } 

	cooldown_against_recipient = { years = 2 } 
	cooldown = { years = 2 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	
	on_accept = {
		scope:actor = {
			
			send_interface_message = {
				type = event_toast_effect_neutral
				title = stop_the_witch
				desc = "send_interface_message_text"
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = stop_the_witch_ct
				#custom_tooltip = witch_trial_ct3
				#tooltip="tooltip0"
				stress_impact = {
					compassionate = minor_stress_impact_gain
				}
				scope:recipient = {
					custom_tooltip = stop_the_witch_ct2
				}
				if = {
					limit = {
						scope:recipient = {
							is_landed_or_landless_administrative = yes
						}
					}
					trigger_event = {
						id = magic_ev4.10
						#days = { 2 5 }
					}
				}
				else = {
					trigger_event = {
						id = magic_ev4.2
						#days = { 2 4 }
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

fed_dark_blade_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	any_equipped_character_artifact = {	has_variable = dark_blade	}	is_imprisoned = no	}
		scope:recipient = {	is_imprisoned_by = scope:actor	}
	}
	is_valid_showing_failures_only = {
		custom_description = {
			text = is_on_mage_duel_custom
			scope:actor = {
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile
	desc = fed_dark_blade_interaction_desc
	cooldown_against_recipient = { months = 1 } 
	cooldown = { months = 1 } 

	#cooldown_against_recipient = { days = 1 } 
	#cooldown = { days = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	
	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = fed_dark_blade_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = fed_dark_blade_interaction_ct
				custom_tooltip = fed_dark_blade_interaction_ct2
				mark_as_black_magic_caster_effect = { L = 1 }
				send_interface_toast = {
					title=dark_blade_fed
					custom_tooltip = dark_blade_fed_ct
					if = {
						limit = {
							can_be_power_saturated_trigger = yes
						}
						gain_standard_ps_effect = yes
					}
				}

				
				#custom_tooltip = witch_trial_ct3
				#tooltip="tooltip0"
				stress_impact = {
					compassionate = major_stress_impact_gain
					just = major_stress_gain
					sadistic = minor_stress_loss
				}
				scope:recipient = {
					death = {
						death_reason = death_murder
						killer = scope:actor
					}
				}
				hidden_effect = {
					add_secret = {
						type = secret_murder
						target = scope:recipient
					}
				}
				
			}
			dark_blade_grows_stronger = yes
			#trigger_event = magic_ev6.67
			hidden_effect = {
				random = {
					chance = 10
					trigger_event = magic_ev6.67
				}
			}
			
			
			hidden_effect = {
				if = {
					limit = {
						NOT = {
							has_game_rule = low_whunters
						}
					}
					if = {
						limit = {
							is_ai = no
						}
						random = {
							chance = 50
							spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
						}
					}
				}
			}
		}
	}
	
	auto_accept = yes
}

demand_submission_cgm_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			is_adult = yes
			exists = house
			has_trait = grandmaster_coven
		}
		scope:recipient = {
			is_imprisoned = no
			is_adult = yes
			OR = {
				has_trait = witch
				any_secret = {
					secret_type = secret_witch
					is_known_by = scope:actor
				}
			}
			NOT = {
				is_a_demon_trigger = yes
			}
		}
		OR = {
			AND = {
				scope:actor = {	
					has_trait_xp = {
						trait = grandmaster_coven
						value > 29
					}
				}
				scope:recipient = {	
					exists = house
					house = scope:actor.house
				}
			}
			AND = {
				scope:actor = {	
					has_trait_xp = {
						trait = grandmaster_coven
						value > 99
					}
					OR = {
						any_vassal_or_below = {
							this = scope:recipient
						}
						any_vassal_or_below = {
							any_courtier_or_guest = {
								this = scope:recipient
							}
						}
						any_courtier_or_guest = {
							this = scope:recipient
						}
					}
				}
				scope:recipient = {	
					OR = {
						AND = {
							exists = house
							house = {
								NOT = {
									has_house_modifier = witch_coven
								}
							}
						}
						is_lowborn = yes
					}
				}
			}
		}
	}
	is_valid_showing_failures_only = {
		custom_description = {
			text = already_has_strong_hook
			scope:actor = {
				NOT = {
					has_strong_hook = scope:recipient
				}
			}
		}	
	}
	icon = icon_grandmaster_coven
	ai_maybe = yes
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = demand_submission_cgm_interaction_desc
	greeting = negative
	notification_text = DEMAND_SUBMISSION_PROPOSAL
	cooldown_against_recipient = { years = 20 } 
	cooldown = { months = 6 }
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes


	#answer_accept_key = SEND_GIFT_ACCEPT
	#answer_reject_key = SEND_GIFT_REJECT
	
	#pre_answer_maybe_key = ANSWER_MIGHT_SUCCEED
	#pre_answer_no_key = ANSWER_CANT_SUCCEED
	#pre_answer_yes_key = ANSWER_WILL_SUCCEED
	#pre_answer_maybe_breakdown_key = ANSWER_SUM_CHANCE

	use_diplomatic_range = yes
	#send_options_exclusive = no
	#on_decline_summary = imprison_decline_summary
	
	on_accept = {
		scope:actor = {
			hidden_effect = {
				if = {
					limit = {
						has_hook = scope:recipient
					}
					remove_hook = {
						target = scope:recipient
					}
				}
			}
			send_interface_message = {
				type = event_toast_effect_neutral
				title = demand_submission_cgm_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				add_hook = {
					type = loyalty_hook
					target = scope:recipient
				}
				add_trait_xp = {
					trait = grandmaster_coven
					value = 5
				}
				
				scope:recipient = {
					add_opinion = {
						target = scope:actor
						modifier = disgusted_opinion
						opinion = -5
					}
					if = {
						limit = {
							NOT = {	faith = scope:actor.faith	}
						}
						set_character_faith_with_conversion = scope:actor.faith
					}
					if = {
						limit = {
							is_independent_ruler = yes
							highest_held_title_tier < scope:actor.highest_held_title_tier
						}
						create_title_and_vassal_change = {
							type = swear_fealty
							save_scope_as = change
						}
						change_liege = {
							liege = scope:actor
							change = scope:change
						}
						resolve_title_and_vassal_change = scope:change
					}
				}
			}
		}
	}
	on_decline = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = demand_submission_cgm_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				#add_opinion = {
				#	target = scope:recipient
				#	modifier = disgusted_opinion
				#	opinion = -30
				#}
				if = {
					limit = {
						has_trait_xp = {
							trait = grandmaster_coven
							value > 4
						}
					}
					add_trait_xp = {
						trait = grandmaster_coven
						value = -5
					}
				}
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_imprison_refusal
					#opinion = -30
				}
				
				scope:recipient = {
					add_opinion = {
						target = scope:actor
						modifier = disgusted_opinion
						opinion = -30
					}
				}
			}
		}
	}
	
	ai_accept = {
		base = -10
		modifier = {
			add = {
				value = scope:actor.diplomacy
				multiply = 3
			}
			desc = DS_DIPLOMACY_ACTOR
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = arrogant
			}
			desc = DS_IS_ARROGANT
		}
		modifier = {
			add = -40
			scope:recipient = {
				has_trait = archmage
			}
			desc = DS_IS_MAGE
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = craven
			}
			desc = DS_IS_CRAVEN
		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 20
			scope:actor = {
				any_vassal_or_below = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 50
			scope:actor = {
				any_courtier_or_guest = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 20
			scope:recipient = {
				is_lowborn = yes
			}
			desc = DS_I_AM_NOBODY
		}
		modifier = {
			add = 20
			scope:actor = {
				has_trait_xp = {
					trait = grandmaster_coven
					value > 99
				}
			}
			desc = DS_HIGH_AUTH
		}
		modifier = {
			add = -200
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			desc = DS_YOUR_RIVAL
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
	}
	ai_targets = {
		ai_recipients = vassals
		chance = 0.5
	}
	ai_targets = {
		ai_recipients = family
		chance = 0.25
	}
	ai_targets = {
		ai_recipients = courtiers
		chance = 0.25
	}
	ai_frequency = 24
	ai_will_do = {
		base = 50
	}
	auto_accept = no
}

send_agent_cgm_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			is_adult = yes
			exists = house
			has_trait = grandmaster_coven
			has_trait_xp = {
				trait = grandmaster_coven
				value > 64
			}
		}
		scope:recipient = {	
			is_ruler = yes
			is_landed_or_landless_administrative = yes
		}
	}
	#is_valid_showing_failures_only = {
	#	
	#}
	icon = icon_grandmaster_coven
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile
	desc = send_agent_cgm_interaction_desc
	cooldown_against_recipient = { years = 2 } 
	cooldown = { years = 2 } 

	#cooldown_against_recipient = { days = 1 } 
	#cooldown = { days = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	
	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = send_agent_cgm_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = send_agent_cgm_interaction_ct
				custom_tooltip = send_agent_cgm_interaction_ct2
				if = {
					limit = {
						scope:send_agent_cgm_secrets = yes
					}
					custom_tooltip = send_agent_cgm_interaction_ct4
				}
				else_if = {
					limit = {
						scope:send_agent_cgm_magic_item = yes
					}
					custom_tooltip = send_agent_cgm_interaction_ct6
				}
				
				scope:recipient = {
					custom_tooltip = send_agent_cgm_interaction_ct3
					if = {
						limit = {
							scope:send_agent_cgm_sow_dis = yes
						}
						hidden_effect = {
							capital_county = {
								add_county_modifier = {
									modifier = medium_investment_in_revolt_modifier
									years = 2
								}
							}
							add_character_modifier = {
								modifier = problems_with_merchants_modifier
								years = 2
							}
						}
						custom_tooltip = send_agent_cgm_interaction_ct5
					}
					else_if = {
						limit = {
							scope:send_agent_cgm_rep_sab = yes
						}
						add_character_modifier = {
							modifier = harmful_rumors_modifier
							years = 1
						}
					}
					else_if = {
						limit = {
							scope:send_agent_cgm_give_sup = yes
						}
						send_interface_toast = {
							title = sca_secret_suppor_modifier
							add_character_modifier = {
								modifier = sca_secret_suppor_modifier
								years = 3
							}
						}
					}
				}
			}
		}
		hidden_effect = {
			create_common_witch_effect3 = yes
			scope:created_witch = {
				add_secret = {
					type = secret_witch
					target = scope:created_witch
				}
				random_secret = {
					limit = {
						secret_type = secret_witch
					}
					reveal_to = scope:actor
				}
				
				add_character_modifier = {
					modifier = special_task_modifier
					years = 1
				}
				add_opinion = {
					target = scope:actor
					modifier = friendliness_opinion
					opinion = 200
				}
			}
			scope:actor = {
				send_interface_toast = {
					title = send_agent_cgm_interaction
					left_icon = scope:created_witch
					add_hook_no_toast = {
						type = loyalty_hook
						target = scope:created_witch
					}
				}
				if = {
					limit = {
						scope:send_agent_cgm_secrets = yes
					}
					trigger_event = {
						id = magic_ev4.80
						months = { 2 3 }
					}
				}
				if = {
					limit = {
						scope:send_agent_cgm_magic_item = yes
					}
					scope:recipient = {
						trigger_event = {
							id = magic_ev4.81
							months = { 2 3 }
						}
					}
				}
			}
		}
	}
	options_heading = send_agent_cgm_option_title
	send_option = {
		flag = send_agent_cgm_secrets
		localization = SEND_AGENT_CMG_O1
	}
	send_option = {
		flag = send_agent_cgm_sow_dis
		localization = SEND_AGENT_CMG_O2
	}
	send_option = {
		flag = send_agent_cgm_rep_sab
		localization = SEND_AGENT_CMG_O3
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				OR = {
					any_character_artifact = { has_variable = magic1 }
					any_courtier_or_guest = {
						any_character_artifact = { has_variable = magic1 }
					}
				}
			}
		}
		flag = send_agent_cgm_magic_item
		localization = SEND_AGENT_CMG_O4
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				NOT = {
					has_character_modifier = sca_secret_suppor_modifier
				}
			}
		}
		flag = send_agent_cgm_give_sup
		localization = SEND_AGENT_CMG_O5
	}

	auto_accept = yes
}
command_minion_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			is_adult = yes
			OR = {
				AND = {
					has_relation_mminion = scope:recipient
					has_hook_of_type = {
						target = scope:recipient
						type = magic_domination_hook
					}
				}
				AND = {
					OR = {
						has_character_modifier = succubus_modifier
						has_character_modifier = incubus_modifier
					}
					scope:recipient = {
						OR = {
							has_relation_lover = scope:actor
							has_relation_soulmate = scope:actor
						}
						NOT = {
							has_character_flag = abdul_dude
						}
					}
				}
			}
			
		}
		scope:recipient = {
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = has_ready_hook_custom
				OR = {
					has_strong_usable_hook = scope:recipient
					AND = {
						OR = {
							has_character_modifier = succubus_modifier
							has_character_modifier = incubus_modifier
						}
						scope:recipient = {
							OR = {
								has_relation_lover = scope:actor
								has_relation_soulmate = scope:actor
							}
						}
					}
				}
			}
		}
		scope:recipient = {
			NOT = {
				has_trait = demon2
			}
		}
	}
	icon = icon_incapable
	ai_maybe = yes
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = command_minion_interaction_desc
	greeting = negative
	notification_text = COMMAND_MINION_PROPOSAL
	cooldown_against_recipient = { years = 1 } 
	cooldown = { days = 1 }
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	use_diplomatic_range = no
	
	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = command_minion_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				if = {
					limit = {
						has_usable_hook = scope:recipient
					}
					use_hook = scope:recipient
				}
				
				stress_impact = {
					deceitful = medium_stress_impact_loss
				}
				scope:recipient = {
					if = {
						limit = {
							exists = diarch
							diarch = scope:actor
						}
						scope:actor = {
							update_diarchy_swing_with_perspective_effect = {
								SWING = medium_sop_swing_diarch_gain
								LIEGE = scope:recipient
							}
						}
					}
					if = {
						limit = {
							scope:command_minion_goold = yes
						}
						pay_short_term_gold = {
							gold = gift_value
							target = scope:actor
						}
					}
					else_if = {
						limit = {
							scope:command_minion_war = yes
						}
						scope:actor = {
							every_character_war = {
								limit = {
									OR = {
										primary_attacker = scope:actor
										primary_defender = scope:actor
									}
									#scope:recipient = {
									#	NOT = {
									#		is_participant_in_war = this
									#	}
									#}
								}
								if = {
									limit = {
										primary_attacker = scope:actor
									}
									add_attacker = scope:recipient
								}
								else_if = {
									limit = {
										primary_defender = scope:actor
									}
									add_defender = scope:recipient
								}
							}
						}
						hidden_effect = {
							if = {
								limit = {
									NOT = { has_game_rule = min_num_of_mages }
								}
								random = {
									chance = 20
									create_mage_effect = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:command_minion_suicide = yes
						}
						#show_as_tooltip = {
						#	death = {
						#		death_reason = death_suicide
						#	}
						#}
						trigger_event = magic_ev5.3
						scope:actor = {
							send_interface_toast = {
								title = command_minion_interaction
								show_as_tooltip = {
									scope:recipient = {
										death = natural
									}
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:command_minion_lover = yes
						}
						if = {
							limit = {
								NOT = {
									is_attracted_to_gender_of = scope:actor
								}
							}
							set_sexuality = bisexual
						}
						set_relation_lover = scope:actor
						save_scope_as = had_sex_with_effect_partner
						scope:actor = {
							custom_tooltip = had_sex_with_effect.first_person.tt
							trigger_event = debug.410
						}

					}
					else_if = {
						limit = {
							scope:command_minion_surrender = yes
						}
						scope:recipient = {
							every_character_war = {
								limit = {
									OR = {
										primary_attacker = scope:recipient
										primary_defender = scope:recipient
									}
								}
								if = {
									limit = {
										primary_attacker = scope:recipient
									}
									end_war = defender
								}
								else_if = {
									limit = {
										primary_defender = scope:recipient
									}
									end_war = attacker
								}
							}
						}
						hidden_effect = {
							if = {
								limit = {
									NOT = { has_game_rule = min_num_of_mages }
								}
								random = {
									chance = 30
									create_mage_effect = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:command_minion_titles = yes
						}
						if = {
							limit = {
								scope:actor = {
									is_landed_or_landless_administrative = yes
								}
							}
							scope:recipient = {
								create_title_and_vassal_change = {
									type = granted
									save_scope_as = title_change
									add_claim_on_loss = no
								}
					
								every_held_title = {
									limit = {
										any_claimant = {
											this = scope:actor
										}
									}
									change_title_holder_include_vassals = {
										holder = scope:actor
										change = scope:title_change
									}
								}
								resolve_title_and_vassal_change = scope:title_change
							}
							hidden_effect_new_object = {
								scope:actor = {
									spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
									scope:whunter = {
										add_perk = a_job_done_right_perk
										add_intrigue_skill = 5
										random = {
											chance = 50
											start_scheme = {
												type = murder
												target_character = scope:actor
											}
										}
									}
									
								}
								if = {
									limit = {
										NOT = { has_game_rule = min_num_of_mages }
									}
									random = {
										chance = 50
										create_mage_effect = yes
									}
								}
							}
						}
						else_if = {
							limit = {
								scope:recipient = {
									is_independent_ruler = yes
									highest_held_title_tier > tier_kingdom
									government_has_flag = government_is_administrative
								}
							}
							scope:actor = {
								save_scope_as = adventurer
								procure_estate_interaction_effect = yes
							}
						}
						else_if = {
							limit = {
								scope:recipient = {
									highest_held_title_tier >= tier_duchy
									any_held_county = {
										exists = title_province
										count > 1
									}
								}
							}
							scope:recipient = {
								hidden_effect = {
									random_held_county = {
										limit = {
											NOT = {
												THIS = scope:recipient.capital_county
											}
										}
										add_to_list = offered_titles
										save_scope_as = new_primary_title
									}
								}
							}
							scope:actor = {
								#negotiate_settlement_interaction_effect = yes
								hidden_effect = {
									if = {
										limit = {
											NOT = { has_trait = adventurer }
										}
										add_trait = adventurer
									}
									every_courtier = {
										add_trait = adventurer_follower
									}
								}
								ep3_become_landed_transfer_effect = {
									TITLE_RECEIVER = scope:actor
									TITLE_LIST = offered_titles
									TYPE = granted
									REASON = flag:granted
								}
								hidden_effect = {
									if = {
										limit = {
											has_character_modifier = ep3_lust_for_land_modifier
										}
										remove_character_modifier = ep3_lust_for_land_modifier
									}
								}
							}
						}
					}
					else_if = {
						limit = {
							scope:command_minion_entertain = yes
						}
						save_scope_as = had_sex_with_effect_partner
						scope:actor = {
							add_stress = major_stress_loss
							stress_impact = {
								sadistic = medium_stress_loss
								compassionate = medium_stress_gain
							}
							if = {
								limit = {
									OR = {
										has_trait = lustful
										has_trait = rakish
									}
								}
								
								scope:actor = {
									custom_tooltip = had_sex_with_effect.first_person.tt
									trigger_event = debug.410
								}
							}
						}
						
						scope:recipient = {
							add_stress = major_stress_gain
						}
						
					}
					else_if = {
						limit = {
							scope:command_minion_dismiss_regency = yes
						}
						scope:actor = { end_diarchy = yes }
					}
					else_if = {
						limit = {
							scope:command_minion_patron = yes
						}
						scope:actor = {
							add_contact = scope:recipient
						}
					}
					#else_if = {
					#	limit = {
					#		scope:command_minion_prisoners = yes
					#	}
					#	scope:recipient = {
					#		if = {
					#			limit = {
					#				exists = house
					#			}
					#			every_prisoner = {
					#				limit = {
					#					trigger_if = {
					#						limit = {
					#							exists = house
					#						}
					#						NOT = { house = scope:recipient.house }
					#					}
					#				}
					#				hidden_effect = {
					#					release_from_prison = yes
					#				}
					#				scope:actor = {
					#					imprison = {
					#						target = PREV
					#						type = dungeon
					#					}
					#				}
					#			}
					#		}
					#		else = {
					#			every_prisoner = {
					#				hidden_effect = {
					#					release_from_prison = yes
					#				}
					#				scope:actor = {
					#					imprison = {
					#						target = PREV
					#						type = dungeon
					#					}
					#				}
					#			}
					#		}
					#	}
					#}
					else_if = {
						limit = {
							scope:command_minion_obedient = yes
						}
						scope:actor = {
							add_hook = {
								type = loyalty_hook
								target = scope:recipient
							}
						}
					}
					else_if = {
						limit = {
							scope:command_minion_marry = yes
						}
						if = {
							limit = {
								scope:actor = {
									is_male = yes
								}
							}
							scope:actor = {
								marry = scope:recipient
							}
						}
						else = {
							scope:actor = {
								marry_matrilineal = scope:recipient
							}
						}
					}
					else_if = {
						limit = {
							scope:command_minion_convertion = yes
						}
						scope:recipient = {
							set_character_faith = scope:actor.faith
						}
					}
					else_if = {
						limit = {
							scope:command_minion_fallen_hunter = yes
						}
						scope:recipient = {
							if = {
								limit = {
									has_character_modifier = inq_modifier
								}
								remove_character_modifier = inq_modifier
							}
							remove_trait = witch_hunter
							add_trait_force_tooltip = witch_hunter2
							if = {
								limit = {
									is_witch_trigger = no
								}
								give_witch_secret_or_trait_effect2 = yes
							}
						}
					}
					else_if = {
						limit = {
							scope:command_minion_influence = yes
						}
						scope:recipient = {
							change_influence = major_influence_loss
						}
						scope:actor = {
							change_influence = scope:recipient.major_influence_gain
						}
					}
					else_if = {
						limit = {
							scope:command_minion_join_me = yes
						}
						scope:actor = {
							add_courtier = scope:recipient
						}
					}
					else_if = {
						limit = {
							scope:command_minion_secrets = yes
						}
						custom_tooltip = command_minion_secrets_ct
						hidden_effect = {
							scope:recipient = {
								every_secret = {
									limit = {
										NOT = {
											is_known_by = scope:actor
										}
									}
									if = {
										limit = {
											exists = secret_target
										}
										scope:actor = {
											send_interface_toast = {
												title = command_minion_interaction
												left_icon = scope:recipient
												right_icon = secret_target
												PREV = {
													reveal_to = scope:actor
												}
											}
										}
									}
									else = {
										scope:actor = {
											send_interface_toast = {
												title = command_minion_interaction
												left_icon = scope:recipient
												PREV = {
													reveal_to = scope:actor
												}
											}
										}
									}
								}
								every_known_secret = {
									limit = {
										NOT = {
											is_known_by = scope:actor
										}
									}
									if = {
										limit = {
											exists = secret_target
										}
										scope:actor = {
											send_interface_toast = {
												title = command_minion_interaction
												left_icon = prev.secret_owner
												right_icon = secret_target
												PREV = {
													reveal_to = scope:actor
												}
											}
										}
									}
									else = {
										scope:actor = {
											send_interface_toast = {
												title = command_minion_interaction
												left_icon = prev.secret_owner
												PREV = {
													reveal_to = scope:actor
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	on_decline = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = command_minion_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				if = {
					limit = {
						has_relation_mmaster = scope:recipient
					}
					custom_tooltip = command_minion_failed
				}
				if = {
					limit = {
						has_hook = scope:recipient
					}
					remove_hook = {
						target = scope:recipient
					}
				}
				scope:recipient = {
					if = {
						limit = {
							has_relation_mminion = scope:actor
						}
						remove_relation_mminion = scope:actor
						add_opinion = {
							target = scope:actor
							modifier = use_magic_on_me_opinion
						}
					}
					if = {
						limit = {
							scope:actor = {
								OR = {
									has_character_modifier = succubus_modifier
									has_character_modifier = incubus_modifier
								}
							}
							OR = {
								has_relation_lover = scope:actor
								has_relation_soulmate = scope:actor
							}
						}
						if = {
							limit = {
								has_relation_lover = scope:actor
							}
							remove_relation_lover = scope:actor
						}
						if = {
							limit = {
								has_relation_soulmate = scope:actor
							}
							remove_relation_soulmate = scope:actor
						}
						add_opinion = {
							target = scope:actor
							#modifier = confusion_opinion
							modifier = suspicion_opinion
							opinion = -50
						}
					}
					
				}
				hidden_effect = {
					send_interface_toast = {
						title = command_minion_interaction
						custom_tooltip = command_minion_failed
					}
				}
			}
		}
	}
	options_heading = command_minion_option_title
	send_options_exclusive = yes
	send_option = {
		is_valid = {
			custom_description = {
				text = target_has_no_gold
				scope:recipient = {
					gold > 0
				}
			}
			
		}
		flag = command_minion_goold
		localization = COMMAND_MINION_O1
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_war = {
					OR = {
						primary_attacker = scope:actor
						primary_defender = scope:actor
					}
					#scope:recipient = {
					#	NOT = {
					#		is_participant_in_war = this
					#	}
					#}
				}
			}
			scope:recipient = {
				#is_landed_or_landless_administrative = yes
				is_ruler = yes
				#is_at_war = no

			}
		}
		is_valid = {
			scope:recipient = {
				#is_at_war = no
				NOT = {
					is_at_war_with = scope:actor
				}
				is_landed_or_landless_administrative = yes
			}
		}
		flag = command_minion_war
		localization = COMMAND_MINION_O2
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				any_character_war = {
					OR = {
						primary_attacker = scope:recipient
						primary_defender = scope:recipient
					}
				}
			}
		}
		flag = command_minion_surrender
		localization = COMMAND_MINION_O5
	}
	send_option = {
		is_shown = {
			scope:actor = {
				has_strong_hook = scope:recipient
			}
			#scope:recipient = {
			#	has_relation_mmaster = scope:actor
			#}
		}
		flag = command_minion_suicide
		localization = COMMAND_MINION_O3
	}
	send_option = {
		is_shown = {
			scope:actor = {
				NOR = {
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
		flag = command_minion_lover
		localization = COMMAND_MINION_O4
	}
	send_option = {
		is_shown = {
			OR = {
				AND = {
					scope:actor = {
						is_landed_or_landless_administrative = yes
					}
					scope:recipient = {
						any_held_title = {
							any_claimant = {
								this = scope:actor
							}
						}
					}
				}
				AND = {
					scope:actor = {
						is_landed_or_landless_administrative = no
					}
					scope:recipient = {
						highest_held_title_tier >= tier_duchy
						OR = {
							any_held_county = {
								exists = title_province
								count > 1
							}
							AND = {
								is_independent_ruler = yes
								highest_held_title_tier > tier_kingdom
								government_has_flag = government_is_administrative
							}
						}
					}
				}
			}
		}
		is_valid = {
			scope:recipient = {
				is_at_war = no
			}
			scope:actor = {
				is_at_war = no
			}
		}
		flag = command_minion_titles
		localization = COMMAND_MINION_O6
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_at_war = no
				NOT = {
					any_held_title = {
						any_claimant = {
							this = scope:actor
						}
					}
				}
			}
			scope:actor = {
				OR = {
					stress > 100
					has_trait = sadistic
					has_trait = gluttonous
				}
				NOT = {
					has_trait = shy
					has_trait = just
				}
			}
		}
		flag = command_minion_entertain
		localization = COMMAND_MINION_O7
	}
	send_option = {
		is_shown = {
			scope:actor = {
				exists = diarch
				diarch = scope:recipient
				can_leave_diarchy_trigger = yes
			}
		}
		flag = command_minion_dismiss_regency
		localization = liege_dismiss_entrenched_regency_interaction
	}
	#send_option = {
	#	is_shown = {
	#		scope:recipient = {
	#			OR = {
	#				AND = {
	#					NOT = {
	#						exists = house
	#					}
	#					has_prisoners = yes
	#				}
	#				AND = {
	#					exists = house
	#					any_prisoner = {
	#						NOT = {
	#							house = scope:recipient.house
	#						}
	#					}
	#				}
	#			}
	#		}
	#	}
	#	flag = command_minion_prisoners
	#	localization = COMMAND_MINION_O8
	#}
	send_option = {
		is_shown = {
			scope:actor = {
				is_landless_adventurer = yes
			}
			scope:recipient = {
				is_landed_or_landless_administrative = yes
				NOT = {
					is_contact_of = scope:actor
				}
			}
		}
		flag = command_minion_patron
		localization = COMMAND_MINION_O9
	}
	send_option = {
		is_shown = {
			scope:actor = {
				NOT = {
					has_hook = scope:recipient
				}
				OR = {
					has_character_modifier = succubus_modifier
					has_character_modifier = incubus_modifier
				}
			}
		}
		flag = command_minion_obedient
		localization = COMMAND_MINION_10
	}
	send_option = {
		is_shown = {
			#scope:actor = {
			#	scriptedtests_can_marry_character = scope:recipient
			#}
			scope:actor = {
				is_ruler = yes
			}
			OR = {
				scope:recipient = {
					can_marry_character_trigger = { CHARACTER = scope:actor }
				}
				scope:actor = {
					can_marry_character_trigger = { CHARACTER = scope:recipient }
				}
			}
			
		}
		is_valid = {
			scope:actor = {
				is_imprisoned = no
			}
			scope:recipient = {
				is_imprisoned = no
				is_hostage = no
			}
		}
		flag = command_minion_marry
		localization = COMMAND_MINION_11
	}
	send_option = {
		is_shown = {
			NOT = {
				scope:actor.faith = scope:recipient.faith
			}
			trigger_if = {
				limit = { exists = scope:recipient.faith.religious_head	}
				NOT = { scope:recipient = scope:recipient.faith.religious_head	}
			}
		}
		flag = command_minion_convertion
		localization = game_concept_demand_conversion
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				has_trait = witch_hunter
			}
		}
		flag = command_minion_fallen_hunter
		localization = COMMAND_MINION_12
	}
	send_option = {
		is_shown = {
			scope:actor = {
				is_ruler = yes
				is_imprisoned = no
				government_has_flag = government_is_administrative
				NOT = {
					is_at_war_with = scope:recipient
				}
			}
			scope:recipient = {
				is_ruler = yes
				is_imprisoned = no
				
				government_has_flag = government_is_administrative
			}
		}
		flag = command_minion_influence
		localization = COMMAND_MINION_13
	}
	send_option = {
		is_shown = {
			scope:actor = {
				is_ruler = yes
			}
			scope:recipient = {
				is_ruler = no
				NOT = {
					is_courtier_of = scope:actor
				}
			}
		}
		is_valid = {
			scope:recipient = {
				is_imprisoned = no
				is_adult = yes
				is_travelling = no
				is_concubine = no
				is_hostage = no
			}
		}
		flag = command_minion_join_me
		localization = COMMAND_MINION_14
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				any_secret = {
					NOT = {
						is_known_by = scope:actor
					}
				}
			}
		}
		flag = command_minion_secrets
		localization = COMMAND_MINION_15
	}
	ai_accept = {
		base = 40
		modifier = {
			add = -50
			scope:recipient = {
				OR = {
					has_trait = lunatic_1
					has_trait = lunatic_genetic
				}
			}
			desc = DS_IS_LUNATIC
		}
		modifier = {
			add = -50
			scope:actor = {
				NOT = {
					has_usable_hook = scope:recipient
				}
			}
			desc = DS_IS_NO_HOOKS
		}
		modifier = {
			add = {
				value = scope:actor.diplomacy
				multiply = 2
			}
			desc = DS_DIPLOMACY_ACTOR
		}
		modifier = {
			add = {
				value = scope:actor.intrigue
				multiply = 2
			}
			desc = DS_INTRIGUE_ACTOR
		}
		modifier = {
			add = -40
			scope:recipient = {
				has_trait = stubborn
			}
			desc = DS_IS_STUBBORN
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = craven
			}
			desc = DS_IS_CRAVEN
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = fickle
			}
			desc = DS_IS_FICKLE
		}
		modifier = {
			add = 30
			scope:actor = {
				has_character_modifier = master_psionic_modifier
			}
			desc = DS_IS_MASTER_PSIONIC
		}
		modifier = {
			add = -60
			scope:command_minion_suicide = yes
			scope:recipient = {
				NOR = {
					has_trait = depressed_1
					has_trait = depressed_genetic
				}
			}
			desc = DS_IS_SUICIDE
		}
		modifier = {
			add = -50
			OR = {
				scope:command_minion_war = yes
				scope:command_minion_surrender = yes
			}
			scope:recipient = {
				NOR = {
					has_trait = brave
					has_trait = wrathful
					has_trait = craven
				}
			}
			desc = DS_IS_SUICIDE
		}
		modifier = {
			add = -40
			scope:command_minion_obedient = yes
			desc = DS_IS_SUICIDE
		}
		modifier = {
			add = -50
			OR = {
				scope:command_minion_war = yes
			}
			scope:recipient = {
				has_trait = craven
			}
			desc = DS_IS_SUICIDE
		}
		modifier = {
			add = -40
			scope:command_minion_titles = yes
			scope:recipient = {
				NOR = {
					has_trait = greedy
					has_trait = generous
				}
			}
			desc = DS_IS_SUICIDE
		}
		modifier = {
			add = -50
			scope:command_minion_titles = yes
			scope:recipient = {
				has_trait = greedy
			}
			desc = DS_IS_SUICIDE
		}
		modifier = {
			add = -20
			scope:command_minion_lover = yes
			scope:recipient = {
				NOT = {
					is_attracted_to_gender_of = scope:actor
				}
			}
			desc = DS_IS_SUICIDE
		}
		modifier = {
			add = -20
			scope:command_minion_entertain= yes
			scope:recipient = {
				OR = {
					has_trait = arrogant
					has_trait = shy
				}
			}
			desc = DS_IS_SUICIDE
		}
	}
	#ai_targets = {
	#	ai_recipients = vassals
	#	chance = 0.5
	#}
	#ai_targets = {
	#	ai_recipients = family
	#	chance = 0.25
	#}
	#ai_targets = {
	#	ai_recipients = courtiers
	#	chance = 0.25
	#}
	#ai_frequency = 24
	#ai_will_do = {
	#	base = 50
	#}
	auto_accept = no
}

power_strike = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			#is_landed_or_landless_administrative = yes
			OR = {
				has_perk = healer_p9_perk
				AND = {
					has_trait = source
					has_trait_xp = {
						trait = source
						track = magic_potential
						value > 79
					}
				}
				has_trait = demon2
			}
		}
		scope:recipient = {
			OR = {
				is_imprisoned = no
				AND = {
					is_imprisoned = yes
					is_imprisoned_by = scope:actor
				}
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			#custom_description = {
			#	text = magic_protection_custom
			#	has_full_magic_prot_trigger = no
			#}
			custom_description = {
				text = will_deflect_spell_custom
				NOR = {
					has_trait = archmage
					is_a_demon_trigger = yes
					has_trait = yaga
				}
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					AND = {
						has_trait = source
						has_trait_xp = {
							trait = source
							track = magic_potential
							value > 79
						}
					}
					has_trait = demon2
				}
			}
			custom_description = {
				text = physical_contact_custom
				has_physical_contanct2 = yes
			}
		}
		scope:recipient = {
			custom_description = {
				text = only_specified_child3
				OR = {
					NOT = {
						is_child_of = scope:actor
					}
					scope:actor = {
						has_trait = sadistic
					}
				}
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	category = interaction_category_hostile

	cooldown_against_recipient = { days = 30 } 
	cooldown = { days = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 9 }
			save_scope_as = magic_user
			hidden_effect = {
				mark_as_black_magic_caster_effect = { L = 2 }
			}
			if = {
				limit = {
					scope:recipient = {
						OR = {
							has_trait = incapable
							NOR = {
								has_trait = archmage
								is_a_demon_trigger = yes
								has_trait = yaga
							}
							AND = {
								OR = {
									has_trait = archmage
									is_a_demon_trigger = yes
									has_trait = yaga
								}
								is_imprisoned_by = scope:actor
							}
						}
					}
				}
				expose_your_witch_secret = yes
				if = {
					limit = {
						OR = {
							AND = {
								has_trait = source
								has_trait_xp = {
									trait = source
									track = magic_potential
									value > 79
								}
							}
							has_trait = demon2
						}
					}
					custom_tooltip = no_mana_loss_ct
				}
				else = {
					if = {
						limit = {
							scope:weaken_spell_flag = yes
						}
						spend_minor_ps_effect = yes
					}
					else = {
						spend_standard_ps_effect = yes
					}
				}
				if = {
					limit = {
						is_in_army = no
					}
					scope:actor.location.county_controller = {
						save_scope_as = owner1
					}
	
					if = {
						limit = {
							NOR = {
								scope:actor = scope:owner1
								scope:recipient = scope:owner1
							}
						}
						custom_tooltip = warning_use_magic_out_of_secure_place_ct2
					}
					else_if = {
						limit = {
							NOT = {
								scope:actor = scope:owner1
							}
							scope:recipient = scope:owner1
						}
						custom_tooltip = warning_use_magic_out_of_secure_place_ct
					}
					
				}
				
	
				if = {
					limit = {
						trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = scope:actor.faith GENDER_CHARACTER = scope:actor }
					}
					custom_tooltip = use_magic_openly_ct
					spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
				}
				else = {
					custom_tooltip = use_magic_openly_ct2
				}
				
				#if = {
				#	limit = {
				#		scope:recipient = {
				#			has_basic_magic_prot_trigger = yes
				#		}
				#	}
				#	custom_tooltip = bypass_magic_prot_custom_tooltip
				#}
				gain_cm_xp1_effect = yes
				if = {
					limit = {
						scope:weaken_spell_flag = no
					}
					metamagic_effect = yes
				}
				
				if = {
					limit = {
						OR = {
							has_relation_rival = scope:recipient
							has_relation_nemesis = scope:recipient
						}
					}
					stress_impact = {
						forgiving = medium_stress_impact_gain
						vengeful = major_stress_impact_loss
					}
				}
				stress_impact = {
					compassionate = medium_stress_impact_gain
					wrathful = medium_stress_impact_loss
					sadistic = medium_stress_impact_loss
				}

				execute_or_counter_spell_effect = { SID = 9 }
				send_message_4_magic_sense_effect = yes
			}
			else = {
				send_interface_message = {
					type = event_toast_effect_neutral
					title = power_strike
					desc = "power_strike_desc"
					left_icon = scope:actor
					right_icon = scope:recipient
					custom_tooltip = mage_duel_duel_ct
					if = {
						limit = {
							has_trait = archmage
							has_trait_xp = {
								trait = archmage
								track = power_saturation
								value < 50
							}
						}
						custom_tooltip = mage_duel_duel_ct2
					}
					#if = {
					#	limit = {
					#		has_full_magic_prot_trigger = yes
					#	}
					#	custom_tooltip = mage_duel_duel_ct4
					#}
					if = {
						limit = {
							any_character_artifact = {
								OR = {
									#has_variable = catalyst
									has_variable = singularity
									has_variable = dark_blade
									has_variable = blackgrimoire
								}
							}
						}
						custom_tooltip = mage_duel_duel_ct7
					}
					scope:recipient = {
						trigger_event = magic_ev5.32
						custom_tooltip = power_strike_md_ct1
						add_opinion = {
							modifier = attacked_me_by_magic_opinion
							target = scope:actor
							opinion = -80
						}
						if = {
							limit = {
								is_a_demon_trigger = yes
								scope:actor = {
									NOT = {	is_a_demon_trigger = yes	}
								}
							}
							custom_tooltip = mage_duel_duel_ct3
						}
						#if = {
						#	limit = {
						#		has_full_magic_prot_trigger = yes
						#	}
						#	custom_tooltip = mage_duel_duel_ct5
						#}
						if = {
							limit = {
								is_legendary_mage_trigger = yes
							}
							custom_tooltip = mage_duel_duel_ct6
						}
						if = {
							limit = {
								any_character_artifact = {
									OR = {
										#has_variable = catalyst
										has_variable = singularity
										has_variable = dark_blade
										has_variable = blackgrimoire
									}
								}
							}
							custom_tooltip = mage_duel_duel_ct8
						}
					}
				}
			}			
		}
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ai = yes
				NOR = {
					has_trait = archmage
					is_a_demon_trigger = yes
					has_trait = yaga
				}
			}
			scope:actor = {
				is_in_army = no
			}
		}
		is_valid = {
			custom_description = {
				text = target_already_has_wounds_custom
				scope:recipient = {
					NOR = {
						has_trait = wounded_1
						has_trait = wounded_2
						has_trait = wounded_3
					}
				}
			}
		}
		flag = weaken_spell_flag
		localization = POWER_STRIKE_O1
	}
	send_option = {
		is_shown = {
			scope:weaken_spell_flag = yes
			scope:actor = scope:actor.location.county_controller
			scope:actor.location = scope:recipient.location
			scope:recipient = {
				is_ai = yes
				NOR = {
					has_trait = archmage
					is_a_demon_trigger = yes
					has_trait = yaga
					is_imprisoned = yes
					is_at_war_with = scope:actor
				}
			}
		}
		#is_valid = {
		#	scope:actor.location = scope:recipient.location
		#}
		flag = power_strike_imprison_flag
		localization = POWER_STRIKE_O2
	}

	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	ai_targets = {
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}
	ai_frequency = 24
	send_options_exclusive = no
	auto_accept = yes
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				has_trait = craven
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = this.faith GENDER_CHARACTER = this }
				NOR = {
					is_a_demon_trigger = yes
					has_trait = excommunicated
					has_trait = lunatic_1
					has_trait = lunatic_genetic
				}
			}
		}
		modifier = {
			add = 50
			scope:actor = {
				NOT = {
					trait_is_criminal_in_faith_trigger = { TRAIT = witch FAITH = this.faith GENDER_CHARACTER = this }
				}
			}
			scope:recipient = {
				OR = {
					has_trait = supernatural_hunter
					any_secret = {
						secret_type = secret_witch_hunter
						is_known_by = scope:actor
					}
				}
			}
		}
	}
}

aura_boost = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			has_perk = healer_p9_perk
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly

	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 6 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 10 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			spend_standard_ps_effect = yes
			

			custom_tooltip = use_magic_custom_tooltip1
				#if = {
				#	limit = {
				#		scope:recipient = {
				#			has_basic_magic_prot_trigger = yes
				#		}
				#	}
				#	custom_tooltip = bypass_magic_prot_custom_tooltip
				#}
				gain_sc_xp1_effect = yes
				display_extended_duration_spell_catalyst = yes
				stress_impact = {
					compassionate = minor_stress_impact_loss
					sadistic = minor_stress_gain
					generous = minor_stress_loss
					#callous = minor_stress_gain
				}
				metamagic_effect = yes
				scope:recipient = {
					if = {
						limit = {
							NOT = {
								scope:aura_boost_clear = yes
							}
						}
						if = {
							limit = {	has_character_modifier = aura_boost1_modifier	}
							remove_character_modifier = aura_boost1_modifier
						}
						if = {
							limit = {	has_character_modifier = aura_boost2_modifier	}
							remove_character_modifier = aura_boost2_modifier
						}
					}
					
					if = {
						limit = {
							scope:aura_boost_mind = yes
						}
						if = {
							limit = {
								scope:actor = {
									any_equipped_character_artifact = {
										has_variable = catalyst
									}
								}
							}
							add_character_modifier = {
								modifier = aura_boost1_modifier
								years = 50
							}
						}
						else = {
							add_character_modifier = {
								modifier = aura_boost1_modifier
								years = 25
							}
						}
						
					}
					else_if = {
						limit = {
							scope:aura_boost_body = yes
						}
						if = {
							limit = {
								scope:actor = {
									any_equipped_character_artifact = {
										has_variable = catalyst
									}
								}
							}
							add_character_modifier = {
								modifier = aura_boost2_modifier
								years = 50
							}
						}
						else = {
							add_character_modifier = {
								modifier = aura_boost2_modifier
								years = 25
							}
						}
					}
					else_if = {
						limit = {
							scope:aura_boost_clear = yes
						}
						if = {
							limit = {	has_character_modifier = aura_boost1_modifier	}
							remove_character_modifier = aura_boost1_modifier
						}
						if = {
							limit = {	has_character_modifier = aura_boost2_modifier	}
							remove_character_modifier = aura_boost2_modifier
						}
						if = {
							limit = {	has_character_modifier = cursed_modifier	}
							remove_character_modifier = cursed_modifier
						}
					}
					else_if = {
						limit = {
							scope:demonic_dark_blessing = yes
						}
						add_character_modifier = {
							modifier = gift_from_hell_modifier
						}
					}
				}
		}
	}
	options_heading = aura_boost_option_title
	send_option = {
		is_shown = {
			scope:recipient = {
				NOT = {
					has_character_modifier = aura_boost1_modifier
				}
			}
		}
		flag = aura_boost_mind
		localization = AURA_BOOST_O1
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				NOT = {
					has_character_modifier = aura_boost2_modifier
				}
			}
		}
		flag = aura_boost_body
		localization = AURA_BOOST_O2
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				OR = {
					has_character_modifier = aura_boost2_modifier
					has_character_modifier = aura_boost1_modifier
					has_character_modifier = cursed_modifier
				}
			}
		}
		flag = aura_boost_clear
		localization = AURA_BOOST_O3
	}
	send_option = {
		is_shown = {
			scope:actor = {
				is_a_demon_trigger = yes
			}
			scope:recipient = {
				NOT = {
					has_character_modifier = gift_from_hell_modifier
				}
			}
		}
		flag = demonic_dark_blessing
		localization = AURA_BOOST_O4
	}
	auto_accept = yes
}

bless_land = {
	target_type = title
	target_filter = recipient_domain_titles
	is_shown = {
		#scope:recipient = scope:actor
		scope:actor = {
			is_imprisoned = no
			has_character_flag = bless_land_flag
			is_ruler = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			custom_description = {
				text = no_valid_spell_target
				is_ruler = yes
				#exists = capital_county
				any_held_county = {
					exists = title_province
				}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly

	cooldown_against_recipient = { years = 2 } 
	cooldown = { years = 2 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	can_be_picked_title = {
		scope:target = {
			is_leased_out = no
			tier = tier_county
			holder = scope:recipient
		}
	}
	on_accept = {
		scope:target = {
			save_scope_as = ttile
		}
		scope:actor = {
			set_spell_id = { ID = 11 }
			gain_sc_xp1_effect = yes
			spend_standard_ps_effect = yes
			custom_tooltip = use_magic_custom_tooltip1
		}
		if = {
			limit = {
				NOT = {
					scope:actor = scope:recipient
				}
			}
			stress_impact = {
				generous = minor_stress_loss
				callous = minor_stress_gain
			}
		}
		display_extended_duration_spell_catalyst = yes
		scope:target.title_province = {
			county = {
				if = {
					limit = {
						has_county_modifier = cursed_land_modifier
					}
					remove_county_modifier = cursed_land_modifier
				}
				hidden_effect = {
					if = {
						limit = {
							has_county_modifier = blessed_land_modifier
						}
						remove_county_modifier = blessed_land_modifier
					}
				}
				if = {
					limit = {
						scope:actor = {
							any_equipped_character_artifact = {
								has_variable = catalyst
							}
						}
					}
					add_county_modifier = {
						modifier = blessed_land_modifier
						years = 20
					}
				}
				else = {
					add_county_modifier = {
						modifier = blessed_land_modifier
						years = 10
					}
				}
				
			}
			
			#if = {
			#	limit = {
			#		has_province_modifier = blessed_land_modifier
			#	}
			#	remove_province_modifier = blessed_land_modifier
			#}
			#add_province_modifier = {
			#	modifier = blessed_land_modifier
			#	years = 10
			#}
		}
	}
	auto_accept = yes
}

shadowstep_spell = {
	is_shown = {
		scope:recipient = scope:actor
		scope:actor = {
			OR = {
				has_character_flag = shadowstep_flag
				AND = {
					has_trait = archmage
					any_equipped_character_artifact = {
						has_variable = magic_crown
					}
				}
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
		}
		scope:actor = {
			custom_description = {
				text = prison_magic_secure_custom
				OR = {
					is_imprisoned = no
					AND = {
						is_imprisoned = yes
						exists = scope:actor.imprisoner
						scope:actor.imprisoner = {
							NOR = {
								has_trait = witch
								any_secret = { secret_type = secret_witch }
								is_a_demon_trigger = yes
								has_trait = witch_hunter
								has_trait = lifestyle_mystic
							}
						}
					}
				}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly
	desc = shadowstep_spell_desc

	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 6 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 12 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			spend_standard_ps_effect = yes
			

			send_interface_message = {
				type = event_toast_effect_neutral
				title = shadowstep_spell
				desc = "send_interface_message_text"
				left_icon = scope:actor
				right_icon = scope:recipient
				custom_tooltip = use_magic_custom_tooltip1
				display_extended_duration_spell_catalyst = yes
				gain_sc_xp1_effect = yes

				stress_impact = {
					craven = minor_stress_impact_loss
					brave = minor_stress_impact_gain
				}
				metamagic_effect = yes
				if = {
					limit = {
						is_imprisoned = no
					}
					if = {
						limit = {
							any_equipped_character_artifact = {
								has_variable = catalyst
							}
						}
						if = {
							limit = {
								any_equipped_character_artifact = {
									has_variable = magic_crown
								}
							}
							add_character_modifier = {
								modifier = shadow_step_modifier2
								years = 2
							}
						}
						else = {
							add_character_modifier = {
								modifier = shadow_step_modifier
								years = 2
							}
						}
					}
					else = {
						if = {
							limit = {
								any_equipped_character_artifact = {
									has_variable = magic_crown
								}
							}
							add_character_modifier = {
								modifier = shadow_step_modifier2
								years = 1
							}
						}
						else = {
							add_character_modifier = {
								modifier = shadow_step_modifier
								years = 1
							}
						}
					}
					
					custom_tooltip = shadow_step_prison_ct
				}
				else = {
					release_from_prison = yes
					scope:actor.imprisoner = {
						if = {
							limit = {
								OR = {
									has_revoke_title_reason = scope:actor
									has_banish_reason = scope:actor
									has_execute_reason = scope:actor
								}
							}
							add_opinion = {
								target = scope:actor
								modifier = escaped_from_prison_crime
							}
						}
						else = {
							add_opinion = {
								target = scope:actor
								modifier = escaped_from_prison_opinion
							}
						}
						save_scope_as = imprisoner
					}
					#custom_tooltip = escape_from_prison_decision_effect_tooltip	#to removing?
					trigger_event = {
						on_action = escape_from_prison
					}
				}
			}
		}
	}
	
	auto_accept = yes
	#ai_potential = {
	#	NOT = {
	#		has_trait = brave
	#	}
	#}
	
	ai_targets = {
		ai_recipients = self
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:actor = {
				any_targeting_scheme = {
					is_hostile = yes
					is_scheme_exposed = yes
				}
				NOR = {
					has_character_modifier = shadow_step_modifier
					has_character_modifier = shadow_step_modifier2
					has_trait = brave
				}
			}
		}
		modifier = {
			add = 1
			scope:actor = {
				OR = {
					has_trait = paranoid
					has_trait = craven
				}
				NOR = {
					has_character_modifier = shadow_step_modifier
					has_character_modifier = shadow_step_modifier2
				}
			}
		}
		modifier = {
			add = 100
			scope:actor = {
				is_imprisoned = yes
			}
		}
	}
}

plague_spell = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_character_flag = plague_spell_flag
			is_imprisoned = no
		}
		scope:recipient = {
			NOR = {
				has_relation_mminion = scope:actor
				#has_relation_mmaster = scope:actor
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		#scope:recipient = {
		#	custom_description = {
		#		text = magic_protection_custom
		#		has_full_magic_prot_trigger = no
		#		OR = {
		#			has_basic_magic_prot_trigger = no
		#			AND = {
		#				has_basic_magic_prot_trigger = yes
		#				scope:actor = {	can_penetrate_basic_magic_prot_trigger = yes	}
		#			}
		#		}
		#	}
		#}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					AND = {
						can_spend_standard_ps_trigger = no
						has_trait = yaga
					}
				}
				
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 5 } 
	cooldown = { years = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 13 }
			save_scope_as = magic_user
			
			hidden_effect = {
				if = {
					limit = {
						has_game_rule = high_whunters
					}
					random = {
						chance = 30
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_courtier_or_guest = {
								has_trait = witch_hunter
							}
						}
					}
					random = {
						chance = 20
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
			}
			
			
			send_interface_message = {
				type = event_toast_effect_neutral
				title = plague_spell
				#desc = "send_interface_message_text"
				left_icon = scope:actor
				right_icon = scope:recipient
				mark_as_black_magic_caster_effect = { L = 1 }
				gain_sc_xp1_effect = yes
				spend_standard_ps_effect = yes
				
				stress_impact = {
					compassionate = medium_stress_impact_gain
				}
				if = {
					limit = {
						always = no
					}
					custom_tooltip = plague_spell_ct	#just to avoid notifications in error log...
				}
				execute_or_counter_spell_effect = { SID = 13 }
			}
			metamagic_effect = yes
			send_message_4_magic_sense_effect = yes
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOR = {
			has_trait = compassionate
			has_trait = just
		}
	}
	
	ai_targets = {
		ai_recipients = scripted_relations
		ai_recipients = war_enemies
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		modifier = {
			add = 90
			scope:recipient = {
				is_at_war_with = scope:actor
			}
		}
		modifier = {
			add = 50
			scope:actor = {
				NOT = {
					has_trait = forgiving
				}
			}
			scope:recipient = {
				is_ruler = yes
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}
		modifier = {
			add = 20
			scope:actor = {
				has_trait = vengeful
			}
			scope:recipient = {
				is_ruler = yes
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				has_trait = lazy
			}
		}
		modifier = {
			add = -20
			scope:actor = {
				has_trait = content
			}
		}
		modifier = {
			add = -100
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
	}
}

hipercognition = {
	is_shown = {
		scope:recipient = scope:actor
		scope:actor = {
			is_imprisoned = no
			has_character_flag = hipercognition_flag
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly

	cooldown_against_recipient = { years = 8 } 
	cooldown = { years = 8 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 14 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			spend_standard_ps_effect = yes
			

			send_interface_message = {
				type = event_toast_effect_neutral
				title = hipercognition
				desc = "send_interface_message_text"
				left_icon = scope:actor
				#right_icon = scope:recipient
				custom_tooltip = use_magic_custom_tooltip1
				display_extended_duration_spell_catalyst = yes
				gain_sc_xp1_effect = yes
				if = {
					limit = {
						any_equipped_character_artifact = {
							has_variable = catalyst
						}
					}
					if = {
						limit = {
							scope:hipercognition_diplo = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier1
							years = 16
						}
					}
					else_if = {
						limit = {
							scope:hipercognition_mart = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier2
							years = 16
						}
					}
					else_if = {
						limit = {
							scope:hipercognition_stew = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier3
							years = 16
						}
					}
					else_if = {
						limit = {
							scope:hipercognition_intr = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier4
							years = 16
						}
					}
				}
				else = {
					if = {
						limit = {
							scope:hipercognition_diplo = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier1
							years = 8
						}
					}
					else_if = {
						limit = {
							scope:hipercognition_mart = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier2
							years = 8
						}
					}
					else_if = {
						limit = {
							scope:hipercognition_stew = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier3
							years = 8
						}
					}
					else_if = {
						limit = {
							scope:hipercognition_intr = yes
						}
						add_character_modifier = {
							modifier = hipercognition_modifier4
							years = 8
						}
					}
				}
				

				metamagic_effect = yes
			}
		}
	}
	options_heading = hipercognition_option_title
	send_option = {
		flag = hipercognition_diplo
		localization = diplomacy
	}
	send_option = {
		flag = hipercognition_mart
		localization = martial
	}
	send_option = {
		flag = hipercognition_stew
		localization = stewardship
	}
	send_option = {
		flag = hipercognition_intr
		localization = intrigue
	}
	auto_accept = yes
}

firestorm_spell = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			can_cast_firestorm_trigger = yes
			is_imprisoned = no
		}
		scope:recipient = {
			NOR = {
				has_relation_mminion = scope:actor
				#has_relation_mmaster = scope:actor
			}
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					AND = {
						can_spend_standard_ps_trigger = no
						has_trait = yaga
					}
				}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 5 } 
	cooldown = { years = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 15 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			hidden_effect = {
				if = {
					limit = {
						has_game_rule = high_whunters
					}
					random = {
						chance = 60
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_courtier_or_guest = {
								has_trait = witch_hunter
							}
						}
					}
					random = {
						chance = 30
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
			}
			
			
			mark_as_black_magic_caster_effect = { L = 1 }
			gain_cm_xp1_effect = yes
			if = {
				limit = {
					is_ai = no
				}
				spend_standard_ps_effect = yes
			}
			stress_impact = {
				compassionate = medium_stress_impact_gain
			}
			execute_or_counter_spell_effect = { SID = 15 }
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = war_enemies
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		
		modifier = {
			add = 100
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		#modifier = {
		#	add = 30
		#	scope:recipient = {
		#		opinion = {
		#			target = scope:actor
		#			value < -80
		#		}
		#	}
		#}
		modifier = {
			add = -100
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
					scope:actor.location = scope:recipient.location
				}
			}
		}
	}
}

mana_siphon_spell = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			is_adult = yes
			has_character_flag = mana_siphon_flag
		}
		scope:recipient = {
			OR = {
				is_imprisoned = no
				is_imprisoned_by = scope:actor
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
			custom_description = {
				text = has_magic_flu
				NOT = {
					has_character_modifier = magic_flu_modifier
				}
			}
		}
		scope:actor = {
			custom_description = {
				text = you_are_full_mana
				can_be_power_saturated_trigger = yes
			}
		}
		scope:recipient = {
			custom_description = {
				text = target_must_be_ps
				can_spend_standard_ps_trigger = yes
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_ps
	ai_maybe = no
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = mana_siphon_spell_desc
	greeting = negative
	#notification_text = MANA_SIPHON_PROPOSAL
	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:hook = yes
				}
				desc = MANA_SIPHON_PROPOSAL1
			}
			triggered_desc = {
				trigger = {
					scope:mana_siphon_gold = yes
				}
				desc = MANA_SIPHON_PROPOSAL2
			}
			desc = MANA_SIPHON_PROPOSAL3
		}
	}
	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 1 }
	#can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	use_diplomatic_range = yes
	auto_accept = {
		scope:recipient = {
			is_imprisoned_by = scope:actor
		}
	}
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 16 }
			send_interface_message = {
				type = event_toast_effect_neutral
				title = mana_siphon_spell
				left_icon = scope:actor
				right_icon = scope:recipient
				
				if = {
					limit = {
						scope:hook = yes
						has_hook = scope:recipient
					}
					use_hook = scope:recipient
				}
				if = {
					limit = {
						scope:mana_siphon_gold = yes
					}
					pay_short_term_gold = {
						gold = gift_value
						target = scope:recipient
					}
				}
				scope:recipient = {
					if = {
						limit = {
							is_imprisoned_by = scope:actor
						}
						custom_tooltip = mana_siphon_spell_imp_ct
						if = {
							limit = {
								NOR = {
									scope:mana_siphon_gold = yes
									scope:hook = yes
									has_opinion_modifier = {
										modifier = hate_opinion
										target = scope:actor
									}
								}
							}
							add_opinion = {
								target = scope:actor
								modifier = hate_opinion
								opinion = -200
							}
						}
					}
				}
				if = {
					limit = {
						scope:mana_siphon_magic_potential = yes
					}
					stress_impact = {
						sadistic = major_stress_loss
						compassionate = major_stress_gain
					}
					gain_standard_ps_effect = yes
					add_trait_xp = {
						trait = source
						track = magic_potential
						value = 4
					}
					scope:recipient = {
						add_stress = massive_stress_gain
						spend_standard_ps_effect = yes
						add_trait_xp = {
							trait = source
							track = magic_potential
							value = -4
						}
						if = {
							limit = {
								has_trait = maimed
							}
							random = {
								chance = 50
								death = {
									death_reason = death_murder
									killer = scope:actor
								}
							}
						}
						else = {
							add_trait = maimed
						}
					}
				}
				else = {
					gain_standard_ps_effect = yes
					scope:recipient = {
						#if = {
						#	limit = {
						#		is_imprisoned_by = scope:actor
						#	}
						#	custom_tooltip = mana_siphon_spell_imp_ct
						#}
						spend_standard_ps_effect = yes
					}
				}
				
			}
		}
	}
	on_decline = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = mana_siphon_spell
				left_icon = scope:actor
				right_icon = scope:recipient
				add_prestige = -100
				scope:recipient = {
					add_opinion = {
						target = scope:actor
						modifier = disgusted_opinion
						opinion = -10
					}
				}
			}
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook	
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_option = {
		flag = mana_siphon_gold
		localization = MANA_SIPHON_O2
	}
	send_option = {
		flag = mana_siphon_magic_potential
		is_shown = {
			scope:actor = {
				has_trait = source
			}
			scope:recipient = {
				has_trait = source
				is_ai = yes
			}
		}
		is_valid = {
			custom_description = {
				text = your_smp_is_higher
				scope:actor.my_smp_value <= scope:recipient.my_smp_value
			}
			#scope:actor = {
			#	custom_description = {
			#		text = your_source_is_powerful
			#		has_trait_xp = {
			#			trait = source
			#			track = magic_potential
			#			value < 80
			#		}
			#	}
			#}
			#scope:recipient = {
			#	custom_description = {
			#		text = target_source_is_too_weak
			#		has_trait_xp = {
			#			trait = source
			#			track = magic_potential
			#			value > 20
			#		}
			#	}
			#}
		}
		localization = MANA_SIPHON_O3
	}
	
	ai_accept = {
		base = -100
		modifier = {
			add = -10000
			scope:mana_siphon_magic_potential = yes
			desc = DS_MUTILATED
		}
		modifier = {
			add = {
				value = scope:actor.diplomacy
				multiply = 2
			}
			desc = DS_DIPLOMACY_ACTOR
		}
		modifier = {
			add = 1000
			scope:hook = yes
			desc = HOOOK_USED_TXT
		}
		modifier = {
			add = 100
			scope:mana_siphon_gold = yes
			desc = OFFEERED_PAYMENT
		}
		modifier = {
			add = 20
			scope:recipient = {
				is_close_family_of = scope:actor
			}
			desc = CLOSE_FAMILY_REASON
		}
		modifier = {
			add = 100
			scope:recipient = {
				has_trait = source
				has_trait_xp = {
					trait = source
					track = instability
					value > 29
				}
			}
			desc = DS_IS_UNSTABLE_SOURCE
		}
		modifier = { # Say no to rivals
			add = -300
			scope:recipient = {
				has_relation_rival = scope:actor
				NOT = { has_relation_nemesis = scope:actor }
			}
			desc = "ACTOR_RIVAL_TO_ME_REASON"
		}
		modifier = { # Say no to nemesis
			add = -2000
			scope:recipient = {
				has_relation_nemesis = scope:actor
			}
			desc = "ACTOR_NEMESIS_TO_ME_REASON"
		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 20
			scope:actor = {
				any_courtier_or_guest = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 10
			scope:recipient = {
				is_lowborn = yes
				NOT = {
					has_character_flag = special_magic_character
				}
			}
			desc = DS_I_AM_NOBODY
		}
		modifier = {
			add = -200
			scope:recipient = {
				OR = {
					is_a_demon_trigger = yes
					has_trait = archmage
					has_focus = arcane_focus
					has_trait = yaga
				}
			}
			desc = DS_IS_MAGIC_USER
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
	}
	send_options_exclusive = no
	auto_accept = no
}

mage_duel = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			has_trait = archmage
		}
		scope:recipient = {
			is_imprisoned = no
			OR = {
				has_trait = archmage
				is_a_demon_trigger = yes
				has_trait = yaga
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		#scope:actor = {
		#	custom_description = {
		#		text = is_away_from_home
		#		OR = {
		#			trigger_if = {
		#				limit = { exists = capital_province }
		#				location = capital_province
		#			}
		#			has_physical_contanct2 = yes
		#		}
		#	}
		#}
		scope:actor = {
			custom_description = {
				text = is_away_from_home
				OR = {
					AND = {
						is_travelling = no
						is_in_army = no
					}
					location = scope:recipient.location
				}
			}
		}
		scope:recipient = {
			custom_description = {
				text = is_away_from_home2
				OR = {
					AND = {
						is_travelling = no
						is_in_army = no
					}
					location = scope:actor.location
				}
			}
		}

		#scope:recipient = {
		#	custom_description = {
		#		text = is_away_from_home2
		#		OR = {
		#			AND = {
		#				is_landed_or_landless_administrative = yes
		#				location = capital_province
		#			}
		#			is_landed_or_landless_administrative = no
		#			scope:actor = {
		#				has_physical_contanct2 = yes
		#			}
		#		}
		#	}
		#}
		scope:recipient = {
			custom_description = {
				text = is_incapable_custom2
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					AND = {
						can_spend_standard_ps_trigger = no
						has_trait = yaga
					}
				}
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_antimagic_seal
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_mage
	ai_maybe = no
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = mage_duel_desc
	greeting = negative
	#notification_text = MANA_SIPHON_PROPOSAL
	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					#scope:mage_duel_my_place = yes
					NOT = {
						scope:mage_duel_your_place = yes
					}
				}
				desc = MAGE_DUEL_PROPOSAL1
			}
			triggered_desc = {
				trigger = {
					scope:mage_duel_your_place = yes
				}
				desc = MAGE_DUEL_PROPOSAL2
			}
			desc = MAGE_DUEL_PROPOSAL3
		}
	}
	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 1 }
	#can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	use_diplomatic_range = yes
	auto_accept = {
		scope:mage_duel_forced = yes
	}
	on_auto_accept = {
		scope:actor = {
			if = {
				limit = {
					NOR = {
						is_at_war_with = scope:recipient
						has_character_modifier = mc_black_mage_modifier
					}
				}
				hidden_effect = {
					if = {
						limit = {
							has_character_modifier = magic_non_honorable_modifier
						}
						remove_character_modifier = magic_non_honorable_modifier
					}
				}
				add_prestige_level = -1
				add_character_modifier = {
					modifier = magic_non_honorable_modifier
					years = 4
				}
				hidden_effect = {
					if = {
						limit = {
							scope:recipient = {
								is_a_demon_trigger = no
							}
						}
						every_living_character = {
							limit = {
								is_true_mage = yes
								NOR = {
									has_relation_rival = scope:recipient
									has_relation_nemesis = scope:recipient
									THIS = scope:actor
									has_opinion_modifier = {
										modifier = distrustful
										target = scope:actor
									}
								}
							}
							add_opinion = {
								target = scope:actor
								modifier = distrustful
							}
						}
					}
				}
			}
			hidden_effect = {
				if = {
					limit = {
						has_variable = mc_member_var
						scope:recipient = { has_variable = mc_member_var }
						NOT = { is_at_war_with = scope:recipient }
					}
					remove_from_mc_effect = yes
				}
			}
			if = {
				limit = {
					location = scope:recipient.location
				}
				trigger_event = magic_ev10.75
			}
			else = {
				custom_tooltip = mage_duel_travel_ct
				start_travel_plan = {
					destination = scope:recipient.location
					on_arrival_event = magic_ev10.75
					players_use_planner = no
				}
			}
			#save_scope_as = attacker
			scope:recipient = {
				custom_tooltip = mage_duel_duel_ct1
				if = {
					limit = {
						NOR = {
							has_trait = brave
							has_trait = calm
						}
					}
					add_stress = medium_stress_gain
				}
				hidden_effect = {
					add_opinion = {
						modifier = attacked_me_by_magic_opinion
						target = scope:actor
						opinion = -80
					}
				}
			}
			display_mage_duel_warnings_effect = yes
		}
	}
	on_accept = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = mage_duel
				left_icon = scope:actor
				right_icon = scope:recipient
				if = {
					limit = {
						scope:mage_duel_forced = yes
					}
					custom_tooltip = md_duel_in_your_location_ct
					show_as_tooltip = {
						if = {
							limit = {
								NOR = {
									is_at_war_with = scope:recipient
									has_character_modifier = mc_black_mage_modifier
								}
							}
							hidden_effect = {
								if = {
									limit = {
										has_character_modifier = magic_non_honorable_modifier
									}
									remove_character_modifier = magic_non_honorable_modifier
								}
							}
							add_prestige_level = -1
							add_character_modifier = {
								modifier = magic_non_honorable_modifier
								years = 4
							}
						}
						if = {
							limit = {
								has_variable = mc_member_var
								scope:recipient = { has_variable = mc_member_var }
								NOT = { is_at_war_with = scope:recipient }
							}
							custom_tooltip = mc_member_force_mage_duel_ct
							remove_from_mc_effect = yes
						}
						if = {
							limit = {
								NOT = { scope:recipient.location = scope:actor.location	}
							}
							custom_tooltip = mage_duel_travel_ct
							start_travel_plan = {
								destination = scope:recipient.location
								on_arrival_event = magic_ev10.75
								players_use_planner = no
							}
						}
						scope:recipient = {
							custom_tooltip = mage_duel_duel_ct
						}
					}
				}
				else_if = {
					limit = {
						scope:mage_duel_your_place = yes
					}
					custom_tooltip = md_duel_in_your_location_ct
					save_scope_as = attacker
					scope:recipient = {
						save_scope_as = defender
						custom_tooltip = mage_duel_duel_ct
					}
					if = {
						limit = {
							scope:actor.location = scope:recipient.location
						}
						trigger_event = magic_ev5.27
					}
					else_if = {
						limit = {
							#NOR = {
							#	is_travelling = yes
							#	exists = involved_activity
							#}
							#location = capital_province
							is_travelling = no
						}
						custom_tooltip = mage_duel_travel_ct
						start_travel_plan = {
							destination = scope:recipient.capital_province
							on_arrival_event = magic_ev5.27
							players_use_planner = no
						}
					}
					else = {
						trigger_event = magic_ev5.27
					}
				}
				else = {
					custom_tooltip = mage_duel_duel_ct1
					custom_tooltip = md_duel_in_my_location_ct
					save_scope_as = defender
					scope:recipient = {
						save_scope_as = attacker
						if = {
							limit = {
								scope:actor.location = scope:recipient.location
							}
							trigger_event = magic_ev5.27
						}
						else_if = {
							limit = {
								is_travelling = no
							}
							custom_tooltip = mage_duel_travel_ct
							start_travel_plan = {
								destination = scope:actor.capital_province
								on_arrival_event = magic_ev5.27
								players_use_planner = no
							}
						}
						else = {
							trigger_event = magic_ev5.27
						}
					}
				}
				display_mage_duel_warnings_effect = yes
				if = {
					limit = {
						scope:mage_duel_as_locked = yes
						NOT = {
							scope:mage_duel_forced = yes
						}
					}
					custom_tooltip = MAGE_DUEL_O5_ct
					hidden_effect = {
						if = {
							limit = {
								NOT = {
									has_character_flag = md_locked_as_for_duel
								}
							}
							add_character_flag = {
								flag = md_locked_as_for_duel
								years = 3
							}
						}
						scope:recipient = {
							if = {
								limit = {
									NOT = {
										has_character_flag = md_locked_as_for_duel
									}
								}
								add_character_flag = {
									flag = md_locked_as_for_duel
									years = 3
								}
							}
						}
					}
				}
			}
		}
	}
	#on_decline = {
	#}
	send_options_exclusive = no
	#options_heading = mage_duel_option_title

	#send_option = {
	#	is_shown = {
	#		NOT = {
	#			scope:actor.location = scope:recipient.location
	#		}
	#	}
	#	is_valid = {
	#		scope:actor = {
	#			is_landed_or_landless_administrative = yes
	#		}
	#	}
	#	flag = mage_duel_my_place
	#	localization = MAGE_DUEL_O1
	#}
	send_option = {
		is_shown = {
			NOT = {
				scope:actor.location = scope:recipient.location
			}
			NOT = {
				scope:mage_duel_forced = yes
			}
		}
		is_valid = {
			scope:recipient = {
				is_landed_or_landless_administrative = yes
			}
		}
		flag = mage_duel_your_place
		localization = MAGE_DUEL_O1A
	}
	#send_option = {
	#	is_shown = {
	#		scope:actor.location = scope:recipient.location
	#	}
	#	flag = mage_duel_here
	#	localization = MAGE_DUEL_O4
	#}
	send_option = {
		is_shown = {
			scope:actor = {
				is_ai = no
				any_character_artifact = {
					OR = {
						has_artifact_modifier = singularity_modifier5
						has_artifact_modifier = singularity_modifierX
					}
				}
			}
			NOT = {
				scope:mage_duel_forced = yes
			}
		}
		
		flag = mage_duel_as_locked
		localization = MAGE_DUEL_O5
	}
	send_option = {
		is_valid = {
			scope:recipient = {
				is_imprisoned = no
				custom_description = {
					text = protected_by_entire_army
					is_in_army = no
				}
				NOT = { has_strong_hook = scope:actor}
			}
			trigger_if = {
				limit = { scope:recipient = { is_ruler = yes } }
				custom_description = {
					text = has_countermeasure_withdraw
					scope:recipient = {
						NOT = {
							has_scheme_countermeasure_parameter = success_chance_vs_indirect_schemes_malus_major
						}
					}
				}
			}
		}
		flag = mage_duel_forced
		localization = MAGE_DUEL_O3b
	}
	
	ai_accept = {
		base = -50
		#modifier = {
		#	add = {
		#		value = scope:actor.diplomacy
		#		#multiply = 2
		#	}
		#	desc = DS_DIPLOMACY_ACTOR
		#}
		modifier = {
			add = 1000
			scope:mage_duel_forced = yes
			desc = IN_MY_PLACE
		}
		modifier = {
			add = 20
			scope:mage_duel_your_place = yes
			desc = IN_MY_PLACE
		}
		modifier = {
			add = 30
			#scope:mage_duel_here = yes
			exists = scope:actor.location
			exists = scope:recipient.location
			scope:actor.location = scope:recipient.location
			desc = IN_MY_PLACE2
		}
		modifier = {
			add = -50
			scope:recipient = {
				OR = {
					is_travelling = yes
					AND = {
						exists = involved_activity
						involved_activity = {
							NOT = {
								any_attending_character = {
									THIS = scope:actor
								}
							}
						}
					}
				}
			}
			desc = DS_IS_BUSY
		}
		modifier = {
			add = 60
			scope:recipient = {
				has_relation_rival = scope:actor
				NOT = { has_relation_nemesis = scope:actor }
				NOT = {	has_trait = impatient	}
			}
			desc = "ACTOR_RIVAL_TO_ME_REASON"
		}
		modifier = {
			add = 100
			scope:recipient = {
				has_relation_nemesis = scope:actor
				NOT = {	has_trait = impatient	}
			}
			desc = "ACTOR_NEMESIS_TO_ME_REASON"
		}
		modifier = {
			add = 80
			scope:recipient = {
				has_relation_rival = scope:actor
				NOT = { has_relation_nemesis = scope:actor }
				has_trait = impatient
			}
			desc = "ACTOR_RIVAL_TO_ME_REASON"
		}
		modifier = {
			add = 120
			scope:recipient = {
				has_relation_nemesis = scope:actor
				has_trait = impatient
			}
			desc = "ACTOR_NEMESIS_TO_ME_REASON"
		}
		modifier = {
			add = 10
			desc = DEMAND_SUBMISSION_I_AM_HEAD_OF_FAITH
			exists = scope:actor.faith.religious_head
			scope:actor.faith.religious_head = scope:actor
			scope:actor.faith = scope:recipient.faith
		}
		#modifier = {
		#	add = 30
		#	scope:recipient = {
		#		has_trait = arrogant
		#	}
		#	desc = DS_IS_ARROGANT
		#}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = ambitious
			}
			desc = DS_IS_AMBITIOUS
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = arrogant
			}
			desc = DS_IS_ARROGANT2
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = brave
			}
			desc = DS_IS_BRAVE
		}
		modifier = {
			add = 20
			scope:recipient = {
				culture = {
					has_cultural_tradition = mage_rulership_tradition
				}
			}
			desc = DS_HAS_MAGE_RULERSHIP
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = irritable
			}
			desc = DS_IS_IRRITABLE
		}
		modifier = {
			add = -50
			scope:actor.overall_magic_power_value > scope:recipient.overall_magic_power_p1_value
			#desc = DS_HAS_LOW_PS
			desc = DS_YOU_ARE_SO_STRONG
		}
		modifier = {
			add = -150
			NOT = {
				scope:mage_duel_as_locked = yes
			}
			scope:actor = {
				any_character_artifact = {
					OR = {
						has_artifact_modifier = singularity_modifier5
						has_artifact_modifier = singularity_modifierX
					}
				}
			}
			scope:recipient = {
				NOT = {
					any_character_artifact = {
						OR = {
							has_artifact_modifier = singularity_modifier5
							has_artifact_modifier = singularity_modifierX
						}
					}
				}
			}
			desc = DS_YOU_HAVE_AS
		}
		modifier = {
			add = -200
			scope:recipient = {
				OR = {
					has_character_flag = not_ready_for_duel_yet
					trigger_if = {
						limit = { has_trait = archmage }
						has_trait_xp = {
							trait = archmage
							track = power_saturation
							value < 10
						}
					}
				}
				
			}

			desc = DS_HAS_LOW_PS
		}
		modifier = {
			add = 10
			scope:actor.overall_magic_power_p1_value < scope:recipient.overall_magic_power_value
			desc = DS_HAS_HIGH_PS
		}
		modifier = {
			add = -100
			scope:recipient = {
				has_trait = craven
			}
			desc = DS_IS_CRAVEN
		}
		modifier = {
			add = -20
			scope:recipient = {
				has_trait = content
			}
			desc = DS_IS_CONTENT
		}
		modifier = {
			add = -20
			scope:recipient = {
				has_trait = calm
			}
			desc = DS_IS_CALM
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = wrathful
			}
			desc = DS_IS_WRATH
		}
		modifier = {
			add = 20
			scope:actor = {
				any_character_artifact = {
					has_variable = magic1
					count = 1
				}
			}
			scope:recipient = {
				NOT = {
					has_trait = greedy
					has_trait = generous
				}
			}
			desc = DS_WANT_MAGIC
		}
		modifier = {
			add = 40
			scope:actor = {
				any_character_artifact = {
					has_variable = magic1
					count > 1
				}
			}
			scope:recipient = {
				NOT = {
					has_trait = greedy
					has_trait = generous
				}
			}
			desc = DS_WANT_MAGIC
		}
		modifier = {
			add = 50
			scope:actor = {
				any_character_artifact = {
					has_variable = magic1
					count = 1
				}
			}
			scope:recipient = {
				has_trait = greedy
			}
			desc = DS_WANT_MAGIC
		}
		modifier = {
			add = 80
			scope:actor = {
				any_character_artifact = {
					has_variable = magic1
					count > 1
				}
			}
			scope:recipient = {
				has_trait = greedy
			}
			desc = DS_WANT_MAGIC
		}
		modifier = {
			add = -30
			scope:recipient = {
				any_character_artifact = {
					has_variable = magic1
				}
			}
			desc = DS_WANT_NOT_LOSS_MAGIC
		}
		modifier = {
			add = 10
			scope:recipient = {
				has_trait = fickle
			}
			desc = DS_IS_FICKLE
		}
		modifier = {
			add = 20
			#scope:recipient = {
			#	has_full_magic_prot_trigger = yes
			#}
			#scope:actor = {
			#	has_full_magic_prot_trigger = no
			#}
			#scope:recipient.duel_endurance_level_value > 3
			scope:actor.overall_magic_power_value < scope:recipient.overall_magic_power_value
			desc = DS_IS_CONFIDENT
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = sadistic
			}
			desc = DS_IS_SADISTIC
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = reckless
			}
			desc = DS_IS_RECKLESS
		}
		modifier = {
			add = 50
			scope:actor = {
				any_courtier = {
					this = scope:recipient
				}
			}
			#scope:recipient = {
			#	exists = liege
			#	liege = scope:actor
			#}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 10
			scope:actor = {
				any_vassal = {
					this = scope:recipient
				}
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 10
			scope:recipient = {
				OR = {
					is_a_demon_trigger = yes
					has_trait = callous
					is_at_war_with = scope:actor
				}
				NOR = {
					has_trait = compassionate
					has_trait = forgiving
					has_relation_best_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
			desc = DS_WANT_YOU_BURN
		}
	}
	#send_options_exclusive = no
	#auto_accept = no
	ai_potential = {
		NOR = {
			has_trait = compassionate
			has_trait = craven
			has_trait = content
		}
	}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
		ai_recipients = realm_characters
		ai_recipients = sub_realm_characters
	}
	ai_frequency = 24
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:actor.overall_magic_power_value > scope:recipient.overall_magic_power_p1_value
		}
		modifier = {
			add = -500
			scope:actor.overall_magic_power_value < scope:recipient.overall_magic_power_value
		}
		modifier = {
			add = 50
			scope:actor = {
				any_equipped_character_artifact = {
					OR = {
						has_artifact_modifier = singularity_modifier5
						has_artifact_modifier = singularity_modifierX
					}
				}
			}
		}
		modifier = {
			add = -200
			scope:recipient = {
				any_character_artifact = {
					OR = {
						has_artifact_modifier = singularity_modifier5
						has_artifact_modifier = singularity_modifierX
					}
				}
			}
		}
		modifier = {
			add = 70
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -200
			scope:mage_duel_forced = yes
		}
		modifier = {
			add = -2000
			scope:mage_duel_forced = yes
			scope:actor = {
				has_variable = mc_member_var
			}
			scope:recipient = {
				has_variable = mc_member_var
			}
		}
		modifier = {
			add = 20
			scope:actor = {
				NOR = {
					has_trait = just
					has_trait = content
					has_trait = compassionate
				}
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
		}
		modifier = {
			add = 70
			scope:actor = {
				OR = {
					has_character_modifier = yaga_modifier
					has_character_modifier = yagas_blood_modifier
					has_trait = yaga
				}
				NOT = {
					has_witch_house_trigger = yes
				}
			}
			scope:recipient = {
				NOR = {
					has_character_modifier = yaga_modifier
					has_character_modifier = yagas_blood_modifier
					has_trait = yaga
				}
				has_witch_house_trigger = yes
			}
		}
		modifier = {
			add = -200
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
		modifier = {
			add = 60
			scope:actor = {
				has_trait = greedy
			}
			scope:recipient = {
				any_character_artifact = {
					has_variable = magic1
				}
			}
		}
		modifier = {
			add = 10
			scope:actor = {
				OR = {
					has_trait = sadistic
					has_trait = irritable
					has_trait = brave
				}
			}
		}
		modifier = {
			add = 20
			scope:actor = {
				any_claimed_artifact = {
					has_variable = magic1
					artifact_owner = scope:recipient
				}
			}
		}
		modifier = {
			add = -10
			scope:actor = {
				can_be_power_saturated_trigger = yes
			}
		}
		modifier = {
			add = -20
			scope:actor = {
				has_hook = scope:recipient
				NOR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				has_strong_hook = scope:recipient
				NOR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			scope:recipient = {
				NOT = {
					any_character_artifact = {
						has_variable = magic1
					}
				}
			}
		}
		modifier = {
			add = -2000
			OR = {
				scope:actor = {
					has_variable = di_supports
					var:di_supports = scope:recipient
				}
				scope:recipient = {
					has_variable = di_supports
					var:di_supports = scope:actor
				}
			}
		}
	}
}
mind_scan = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			has_character_modifier = mind_reader_modifier
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				has_immunity_for_mind_scan = no
			}
		}
		#scope:recipient = {
		#	custom_description = {
		#		text = magic_protection_custom
		#		has_full_magic_prot_trigger = no
		#		OR = {
		#			has_basic_magic_prot_trigger = no
		#			AND = {
		#				has_basic_magic_prot_trigger = yes
		#				scope:actor = {	can_penetrate_basic_magic_prot_trigger = yes	}
		#			}
		#		}
		#	}
		#}
		scope:actor = {
			custom_description = {
				text = physical_contact_custom
				has_physical_contanct = yes
			}
		}
		
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					has_character_flag = mind_reading_elixir
					has_character_modifier = master_psionic_modifier
				}
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	category = interaction_category_hostile
	desc = mind_scan_desc

	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 6 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 17 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			if = {
				limit = {
					NOR = {
						has_character_flag = mind_reading_elixir
						has_character_modifier = master_psionic_modifier
					}
				}
				spend_standard_ps_effect = yes
			}
			
			
			
			mark_as_black_magic_caster_effect = { L = 1 }

			stress_impact = {
				#honest = medium_stress_impact_gain
				#deceitful = minor_stress_impact_loss
				#paranoid = minor_stress_impact_loss
				just = minor_stress_gain
			}
			execute_or_counter_spell_effect = { SID = 17 }
				
			if = {
				limit = {
					has_character_flag = mind_reading_elixir
				}
				remove_character_flag = mind_reading_elixir
			}
			else = {
				metamagic_effect = yes
			}
		}
	}
	
	auto_accept = yes
}

use_raw_magic = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_trait = source
			has_trait_xp = {
				trait = source
				track = magic_potential
				value > 39
			}
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = will_deflect_spell_custom
				NOR = {
					is_true_mage = yes
					has_trait = demon2
					has_trait = yaga
				}
			}
		}
	}
	icon = icon_good_source
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 1 } 
	cooldown = { years = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 18 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = use_raw_magic
			#	desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#	
			#}
			if = {
				limit = {
					is_the_choosen_one_trigger = no
				}
				custom_tooltip = use_raw_magic_ct0
			}
			
			show_as_tooltip = {
				spend_standard_ps_effect = yes
			}	
			execute_or_counter_spell_effect = { SID = 18 }
		}
	}
	
	auto_accept = yes
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = spouses
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
		ai_recipients = courtiers
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					has_relation_bully = scope:actor
					has_relation_victim = scope:actor
					#has_relation_potential_rival = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -100
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				has_perk = fate_weaver_p10_perk
			}
		}
	}
}

start_corruption_interaction = {
	icon = icon_corrupted
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_hostile

	ignores_pending_interaction_block = yes

	scheme = corruption

	send_name = START_SCHEME

	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			OR = {
				any_equipped_character_artifact = {
					has_variable = magic_crown
				}
				#AND = {
				#	has_trait = demon2
				#	has_trait_xp = {
				#		trait = demon2
				#		value > 49
				#	}
				#}
				has_perk = depravity_perk
			}
			is_imprisoned = no
		}
		scope:recipient = {
			is_adult = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			can_start_scheme = {
				type = corruption
				target_character = scope:recipient
			}
		}
		scope:actor = {
			custom_description = {
				text = not_archmage_txt
				OR = {
					has_trait = archmage
					is_a_demon_trigger = yes
				}
			}
		}
		scope:recipient = {
			NOT = { has_strong_hook = scope:actor }
	
			custom_description = {
				text = is_already_corrupted
				NOR = {
					has_trait = corrupted
					has_trait = supernatural_hunter
				}
			}
			custom_description = {
				text = is_incapable_custom2
				NOR = {
					has_trait = incapable
					is_incapable = yes
				}
			}
			custom_description = {
				#text = has_powerful_magic_protection
				text = has_magic_immunity
				NOT = {
					#has_full_magic_prot_trigger = yes
					is_a_demon_trigger = yes
				}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}

	desc = {
		triggered_desc = {
			trigger = {
				scope:actor = {
					can_start_scheme = {
						type = corruption
						target_character = scope:recipient
					}
				}
			}
			desc = scheme_interaction_tt_corruption_approved
		}
	}
	cooldown_against_recipient = { years = 10 } 
	#cooldown = { years = 1 } 
	on_accept = {
		scope:actor = {
			stress_impact = {
				compassionate = major_stress_impact_gain
				honest = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
		}
		hidden_effect = {
			scope:actor = {
				send_interface_toast = {
					title = start_corruption_interaction_notification

					left_icon = scope:actor					
					right_icon = scope:recipient

					start_scheme = {
						type = corruption
						target_character = scope:recipient
					}

					show_as_tooltip = {
						stress_impact = {
							compassionate = major_stress_impact_gain
							honest = medium_stress_impact_gain
							just = medium_stress_impact_gain
						}
					}
				}
				if = {
					limit = {
						has_trait = education_intrigue_5
					}
					random_scheme = {
						limit = {
							scheme_type = corruption
							scheme_target_character = scope:recipient
						}
						add_scheme_progress = 3
					}
				}
			}
		}
	}
	
	auto_accept = yes
	ai_targets = {
		ai_recipients = neighboring_rulers
		#ai_recipients = liege
	}
	ai_potential = {
		NOR = {
			has_trait = compassionate
			has_trait = just
		}
	}
	ai_frequency = 36

	ai_will_do = {
		base = 0
		modifier = {
			add = 20
			scope:recipient = {
				highest_held_title_tier < scope:actor.highest_held_title_tier
			}
		}
		modifier = {
			add = -20
			scope:recipient = {
				highest_held_title_tier >= scope:actor.highest_held_title_tier
			}
		}
		modifier = {
			add = 40
			scope:recipient = {
				has_trait = sadistic
			}
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = callous
			}
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = wrathful
			}
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = greedy
			}
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = gluttonous
			}
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = deceitful
			}
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = arbitrary
			}
		}
		modifier = {
			add = 30
			scope:recipient = {
				has_trait = lustful
			}
		}
		modifier = {
			add = -40
			scope:recipient = {
				has_trait = chaste
			}
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = just
			}
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = compassionate
			}
		}
		modifier = {
			add = -40
			scope:recipient = {
				has_trait = humble
			}
		}
		modifier = {
			add = -40
			scope:recipient = {
				has_trait = zealous
			}
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = honest
			}
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = paranoid
			}
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = archmage
			}
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = stubborn
			}
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = forgiving
			}
		}
		modifier = {
			add = -100
			scope:recipient = {
				is_at_war_with = scope:actor
			}
		}
		modifier = {
			add = -500
			scope:recipient = {
				is_ai = no
			}
		}
		modifier = {
			add = -40
			scope:actor = {
				OR = {
					has_trait = lazy
					has_trait = content
				}
			}
		}
	}
}

special_champion_mission = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			is_adult = yes
			employs_court_position = dark_champion_court_position
			any_court_position_holder = {
				type = dark_champion_court_position
				has_character_flag = ready_for_special_mission
			}
		}
		scope:recipient = {
			NOT = {
				is_imprisoned_by = scope:actor
			}
			NAND = {
				has_court_position = dark_champion_court_position
				exists = liege
				liege = scope:actor
			}
		}
	}
	is_valid_showing_failures_only = {
		custom_description = {
			text = dark_champion_is_on_mission
			scope:actor = {
				employs_court_position = dark_champion_court_position
				any_court_position_holder = {
					type = dark_champion_court_position
					NOR = {
						has_character_flag = special_champion_mission1
						has_character_flag = special_champion_mission2
						has_character_flag = special_champion_mission3
						has_character_flag = special_champion_mission4
					}
				}
			}
		}
		custom_description = {
			text = dark_champion_only_during_peace
			scope:actor = {
				is_at_war = no
			}
		}
	}
	icon = icon_dark_champion
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile
	desc = special_champion_mission_desc
	cooldown_against_recipient = { years = 10 } 
	cooldown = { months = 6 } 

	#cooldown_against_recipient = { days = 1 } 
	#cooldown = { days = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	
	on_accept = {
		scope:actor = {
			hidden_effect = {
				random_court_position_holder = {
					type = dark_champion_court_position
					save_scope_as = dchampion
					if = {
						limit = {
							has_variable = night_attack_q
						}
						remove_variable = night_attack_q
					}
				}
			}
			send_interface_message = {
				type = event_toast_effect_neutral
				title = special_champion_mission
				left_icon = scope:actor
				
				right_icon = scope:recipient
				
				if = {
					limit = {
						scope:assasination_champion_mission = yes
					}
					custom_tooltip = special_champion_mission_o1a
					scope:recipient = {
						custom_tooltip = special_champion_mission_o1b
					}
					hidden_effect = {
						scope:dchampion = {
							add_character_flag = special_champion_mission1
							#trigger_event = magic_ev7.31
						}
						#add_character_flag = special_champion_mission1
						#trigger_event = magic_ev7.31
						scope:recipient = {
							add_character_flag = marked_for_assasination_dc_flag
						}
					}
				}
				else_if = {
					limit = {
						scope:plunder_champion_mission = yes
					}
					custom_tooltip = special_champion_mission_o2a
					scope:recipient = {
						custom_tooltip = special_champion_mission_o2b
					}
					hidden_effect = {
						scope:dchampion = {
							add_character_flag = special_champion_mission2
							#trigger_event = magic_ev7.31
						}
					}
				}
				else_if = {
					limit = {
						scope:abduction_champion_mission = yes
					}
					custom_tooltip = special_champion_mission_o3a
					scope:recipient = {
						custom_tooltip = special_champion_mission_o3b
					}
					hidden_effect = {
						scope:dchampion = {
							add_character_flag = special_champion_mission3
							#trigger_event = magic_ev7.31
						}
					}
				}
				else_if = {
					limit = {
						scope:rescue_champion_mission = yes
					}
					custom_tooltip = special_champion_mission_o4a
					scope:recipient = {
						custom_tooltip = special_champion_mission_o4b
					}
					hidden_effect = {
						scope:dchampion = {
							add_character_flag = special_champion_mission4
							#trigger_event = magic_ev7.31
						}
					}
				}
				else_if = {
					limit = {
						scope:protection_champion_mission = yes
					}
					scope:recipient = {
						add_character_modifier = {
							modifier = dchamp_secret_protection_modifier
							years = 2
						}
					}
				}
				scope:dchampion = {
					trigger_event = {
						id = magic_ev7.31
						days = 1
					}
				}
			}
		}
	}
	options_heading = special_champion_mission_option_title
	send_option = {
		flag = assasination_champion_mission
		localization = special_champion_mission_o1
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_landed_or_landless_administrative = yes
			}
		}
		flag = plunder_champion_mission
		localization = special_champion_mission_o2
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_imprisoned = no
			}
		}
		flag = abduction_champion_mission
		localization = special_champion_mission_o3
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_imprisoned = yes
				NOT = {
					is_imprisoned_by = scope:actor
				}
			}
		}
		flag = rescue_champion_mission
		localization = special_champion_mission_o4
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				NOT = {
					has_character_modifier = dchamp_secret_protection_modifier
				}
			}
		}
		flag = protection_champion_mission
		localization = special_champion_mission_o5
	}

	auto_accept = yes
}

soul_transfer_spell = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_imprisoned = no
			has_character_flag = me_soul_project_done
		}
		scope:recipient = {
			age >= 16
			#is_landed_or_landless_administrative = yes
			is_playable_character = yes
			is_ai = yes
			is_clergy = no
			#faith = {
			#	any_faith_playable_ruler = {
			#		THIS = scope:recipient
			#	}
			#}
			NOR = {
				has_government = republic_government
				has_government = theocracy_government
				has_government = mercenary_government
				has_government = holy_order_government
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
			custom_description = {
				text = has_no_soul_custom
				NOT = {	has_character_flag = no_soul	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
		#scope:recipient = {
		#	custom_description = {
		#	text = magic_protection_custom
		#		has_full_magic_prot_trigger = no
		#		OR = {
		#			has_basic_magic_prot_trigger = no
		#			AND = {
		#				has_basic_magic_prot_trigger = yes
		#				scope:actor = {	can_penetrate_basic_magic_prot_trigger = yes	}
		#			}
		#		}
		#	}
		#}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 1 } 
	cooldown = { years = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 19 }
			scope:recipient = {
				set_spell_id = { ID = 19 }
				save_scope_as = magic_user
			}
			execute_or_counter_spell_effect = { SID = 19 }
			send_message_4_magic_sense_effect = yes
			
		}
	}
	
	auto_accept = yes
	send_option = {
		flag = soul_transfer_artifacts
		localization = ST_ALSO_ARTIFACTS
	}
	send_options_exclusive = no
}


aura_reading = {
	is_shown = {
		scope:actor = {
			is_imprisoned = no
			has_access_to_aura_reading_trigger = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					OR = {
						has_character_modifier = master_magic_modifier
						has_character_modifier = magic_eyes_modifier
						has_perk = magical_creature_perk
						scope:actor = scope:recipient
					}
				}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	category = interaction_category_hostile
	#category = interaction_category_friendly
	desc = aura_reading_desc

	#cooldown_against_recipient = { years = 1 } 
	#cooldown = { days = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 1 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			if = {
				limit = {
					scope:actor = scope:recipient
					NOR = {
						has_character_modifier = master_magic_modifier
						has_character_modifier = magic_eyes_modifier
						has_perk = magical_creature_perk
					}
				}
				custom_tooltip = no_cost_4_this_spell_ct
			}
			else_if = {
				limit = {
					NOR = {
						has_character_modifier = master_magic_modifier
						has_character_modifier = magic_eyes_modifier
						has_perk = magical_creature_perk
					}
				}
				spend_standard_ps_effect = yes
			}
			
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = aura_reading
			#	desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#	
			#}
			custom_tooltip = spell_cannot_be_countered
			custom_tooltip = use_magic_custom_tooltip1
			scope:recipient = {
				custom_tooltip = aura_reading_ct
			}
			trigger_event = magic_ev8.2
			if = {
				limit = {
					NOR = {
						scope:actor = scope:recipient
						has_character_modifier = master_magic_modifier
						has_character_modifier = magic_eyes_modifier
						has_perk = magical_creature_perk
					}
				}
				metamagic_effect = yes
			}
		}
	}
	
	auto_accept = yes
}

cyro_proposal_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			#is_a_demon_trigger = yes
			has_perk = deals_with_mortals_perk
			is_imprisoned = no
			is_adult = yes
		}
		scope:recipient = {
			is_imprisoned = no
			is_adult = yes
			NOT = {
				is_a_demon_trigger = yes
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = not_war_against
				NOT = {
					is_at_war_with = scope:recipient
				}
			}
			custom_description = {
				text = is_incapable_custom
				NOT = {
					has_trait = incapable
				}
			}
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = must_be_mortal_custom
				is_immortal = no
			}
			custom_description = {
				text = has_no_soul_custom
				NOT =  {
					has_character_flag = no_soul
				}
			}
		}
	}
	icon = icon_demon
	ai_maybe = yes
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = cyro_proposal_interaction_desc
	greeting = negative
	notification_text = DEMON_CYRO_PROPOSAL
	cooldown_against_recipient = { years = 20 } 
	cooldown = { years = cyro_proposal_interaction_cooldown_value }
	can_send_despite_rejection = no
	popup_on_receive = yes
	pause_on_receive = yes


	#answer_accept_key = SEND_GIFT_ACCEPT
	#answer_reject_key = SEND_GIFT_REJECT
	
	#pre_answer_maybe_key = ANSWER_MIGHT_SUCCEED
	#pre_answer_no_key = ANSWER_CANT_SUCCEED
	#pre_answer_yes_key = ANSWER_WILL_SUCCEED
	#pre_answer_maybe_breakdown_key = ANSWER_SUM_CHANCE

	use_diplomatic_range = yes
	#send_options_exclusive = no
	#on_decline_summary = imprison_decline_summary
	
	on_accept = {
		scope:actor = {
			hidden_effect = {
				if = {
					limit = { scope:magic_cyro_o1 = yes }
					add_character_flag = {
						flag = magic_cyroo_o1_flag
						years = 1
					}
				}
				else_if = {
					limit = { scope:magic_cyro_o2 = yes }
					add_character_flag = {
						flag = magic_cyroo_o2_flag
						years = 1
					}
				}
				else_if = {
					limit = { scope:magic_cyro_o3 = yes }
					add_character_flag = {
						flag = magic_cyroo_o3_flag
						years = 1
					}
				}
			}
			show_as_tooltip = {
				spend_standard_ps_effect = yes
			}
			
			custom_tooltip = magic_cyro_ct1
			scope:recipient = {
				trigger_event = magic_ev8.15
				custom_tooltip = magic_cyro_ct2
			}
		}
	}
	on_decline = {
		scope:actor = {
			custom_tooltip = magic_cyro_ct3
			show_as_tooltip = {
				add_prestige = -250
			}
			hidden_effect = {
				if = {
					limit = {
						scope:recipient = {
							is_ai = yes
						}
					}
					trigger_event = magic_ev8.16
				}
				else = {
					scope:recipient = {
						trigger_event = magic_ev8.15
					}
				}
			}
		}
	}
	send_options_exclusive = yes
	options_heading = cyro_proposal_interaction_title
	send_option = {
		flag = magic_cyro_o1
		localization = CYRO_OPTION1
	}
	send_option = {
		flag = magic_cyro_o2
		localization = CYRO_OPTION2
	}
	send_option = {
		flag = magic_cyro_o3
		localization = CYRO_OPTION3
	}
	ai_accept = {
		base = -10
		modifier = {
			add = {
				value = scope:actor.diplomacy
				multiply = 0.5
			}
			desc = DS_DIPLOMACY_ACTOR
		}
		modifier = {
			add = {
				value = scope:actor.intrigue
				multiply = 0.5
			}
			desc = DS_INTRIGUE_ACTOR
		}
		modifier = {
			add = -25
			scope:recipient = {
				opinion = {
					target = scope:actor
					value < -30
				}
			}
			desc = DS_CYRO_HATES_U
		}
		#opinion_modifier = { # Opinion Factor
		#	who = scope:recipient
		#	opinion_target = scope:actor
		#	multiplier = 0.5
		#	desc = AI_OPINION_REASON
		#}
		modifier = {
			add = -60
			scope:magic_cyro_o3 = yes
			desc = DS_CYRO_IS_SHORT
		}
		modifier = {
			add = -30
			scope:magic_cyro_o2 = yes
			desc = DS_CYRO_IS_SHORT
		}
		modifier = {
			add = 10
			scope:actor = {
				any_vassal_or_below = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 20
			scope:actor = {
				any_courtier_or_guest = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 40
			scope:recipient = {
				has_trait = ambitious
			}
			desc = DS_IS_AMBITIOUS
		}
		modifier = {
			add = 10
			scope:recipient = {
				has_trait = deceitful
			}
			desc = DS_IS_DECEIT
		}
		modifier = {
			add = -10
			scope:recipient = {
				has_trait = content
			}
			desc = DS_IS_CONTENT
		}
		modifier = {
			add = 40
			scope:recipient = {
				has_trait = corrupted
			}
			desc = DS_IS_CORRUP
		}
		modifier = {
			add = 50
			scope:recipient = {
				has_trait = true_witch
				has_focus = witch_focus
				can_unlock_arcane_focus_trigger = no
			}
			desc = DS_IS_WANNABE_MAGE
		}
		modifier = {
			add = -10
			scope:actor = {
				has_trait = demon1
			}
			desc = DS_IS_MINOR_DEMON
		}
		#modifier = {
		#	add = 10
		#	scope:actor = {
		#		has_trait_xp = {
		#			trait = demon2
		#			value > 74
		#		}
		#	}
		#	desc = DS_IS_MAJOR_DEMON
		#}
		modifier = {
			add = -500
			scope:recipient = {
				has_trait = zealous
			}
			desc = DS_IS_ZEALOUS
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = paranoid
			}
			desc = DS_IS_PARANOID
		}
		modifier = {
			add = -500
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			desc = DS_YOUR_RIVAL
		}
	}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = spouses
		ai_recipients = scripted_relations
		ai_recipients = courtiers
		ai_recipients = guests
	}
	ai_frequency = 36
	ai_will_do = {
		base = 10
		modifier = {
			add = -1000
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
		}
		modifier = {
			add = 50
			scope:recipient = {
				is_landed_or_landless_administrative = yes
				is_ruler = yes
			}
		}
		modifier = {
			add = 20
			scope:recipient = {
				OR = {
					has_trait = true_witch
					has_focus = witch_focus
				}
				can_unlock_arcane_focus_trigger = no
			}
		}
	}
	auto_accept = no
}

tornado_spell = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_character_flag = tornado_spell_flag
			is_imprisoned = no
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				OR = {
					can_spend_standard_ps_trigger = yes
					AND = {
						can_spend_standard_ps_trigger = no
						has_trait = yaga
					}
				}
				
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	#cooldown_against_recipient = { years = 5 } 
	#cooldown = { years = 1 }
	cooldown = { months = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			#set_spell_id = { ID = 30 }
			save_scope_as = magic_user
			#send_message_4_magic_sense_effect = yes
			if = {
				limit = {
					scope:recipient = {
						is_magic_protected = yes
					}
				}
				custom_tooltip = spell_may_be_countered
			}
			
			mark_as_black_magic_caster_effect = { L = 2 }
			show_as_tooltip = {
				gain_cm_xp1_effect = yes
				spend_standard_ps_effect = yes
			}
			#execute_or_counter_spell_effect = { SID = 2 }
			
			stress_impact = {
				compassionate = major_stress_impact_gain
			}
			scope:recipient = {
				custom_tooltip = tornado_spell_ct
			}
			hidden_effect = {
				trigger_event = magic_ev9.65
			}
			#send_interface_message = {
			#	type = event_toast_effect_neutral
			#	title = tornado_spell
			#	#desc = "send_interface_message_text"
			#	left_icon = scope:actor
			#	right_icon = scope:recipient
			#	custom_tooltip = use_magic_custom_tooltip
			#	show_as_tooltip = {
			#		gain_cm_xp1_effect = yes
			#		spend_standard_ps_effect = yes
			#	}
			#	
			#	
			#	stress_impact = {
			#		compassionate = major_stress_impact_gain
			#	}
			#
			#	scope:recipient = {
			#		custom_tooltip = tornado_spell_ct
			#	}
			#	hidden_effect = {
			#		trigger_event = magic_ev9.65
			#	}
			#}
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = war_enemies
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0
		
		modifier = {
			add = 100
			scope:recipient = {
				is_at_war_with = scope:actor
			}
		}
		modifier = {
			add = -200
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
					scope:actor.location = scope:recipient.location
				}
			}
		}
	}
}


drink_magic_potion_interaction = {
	is_shown = {
		scope:recipient = scope:actor
		scope:actor = {
			is_imprisoned = no
			any_character_artifact = {
				OR = {
					has_variable = pot1
					has_variable = pot2
					has_variable = pot3
					has_variable = pot4
					has_variable = pot5
					has_variable = pot6
					has_variable = pot7
					has_variable = pot8
					has_variable = pot9
					has_variable = pot10
				}
			}
		}	
	}
	
	icon = icon_elixir
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly
	desc = drink_magic_potion_interaction_desc

	cooldown = { 
		days = drink_magic_potion_cooldown_value
	} 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			#hidden_effect = {
			#	if = {
			#		limit = {
			#			has_variable = pclash
			#		}
			#		clear_all_md_staff_effect = yes
			#	}
			#}
			send_interface_message = {
				type = event_toast_effect_neutral
				title = drink_magic_potion_interaction
				desc = "send_interface_message_text"
				left_icon = scope:actor
				if = {
					limit = {
						scope:use_pot1 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot1_flag
							days = 1
						}
					}
					if = { limit = { has_trait = disfigured NOT = { has_character_flag = abdul_dude } }
						remove_trait = disfigured
					}
					if = { limit = { has_trait = inbred }
						remove_trait = inbred
					}
					if = { limit = { has_trait = impotent }
						remove_trait = impotent
					}
					if = { limit = { has_trait = bleeder }
						remove_trait = bleeder
					}
					if = { limit = { has_trait = wheezing }
						remove_trait = wheezing
					}
					if = { limit = { has_trait = infertile }
						remove_trait = infertile
					}
					if = { limit = { has_trait = one_legged }
						remove_trait = one_legged
					}
					if = { limit = { has_trait = one_eyed }
						remove_trait = one_eyed
					}
					if = { limit = { has_trait = lunatic_genetic }
						remove_trait = lunatic_genetic
					}
					if = { limit = { has_trait = lunatic_1 }
						remove_trait = lunatic_1
					}
					if = { limit = { has_trait = ill }
						remove_trait = ill
					}
					if = { limit = { has_trait = pneumonic }
						remove_trait = pneumonic
					}
					if = { limit = { has_trait = great_pox }
						remove_trait = great_pox
					}
					if = { limit = { has_trait = early_great_pox }
						remove_trait = early_great_pox
					}
					if = { limit = { has_trait = lovers_pox }
						remove_trait = lovers_pox
					}
					if = { limit = { has_trait = leper }
						remove_trait = leper
					}
					if = { limit = { has_trait = wounded_1 }
						remove_trait = wounded_1
					}
					if = { limit = { has_trait = wounded_2 }
						remove_trait = wounded_2
					}
					if = { limit = { has_trait = wounded_3 }
						remove_trait = wounded_3
					}
					if = { limit = { has_trait = maimed }
						remove_trait = maimed
					}
					if = { limit = { has_trait = infirm }
						remove_trait = infirm
					}
					if = { limit = { has_trait = incapable }
						remove_trait = incapable
					}
					if = { limit = { has_trait = gout_ridden }
						remove_trait = gout_ridden
					}
					if = { limit = { has_trait = consumption }
						remove_trait = consumption
					}
					if = { limit = { has_trait = cancer }
						remove_trait = cancer
					}
					if = { limit = { has_trait = typhus }
						remove_trait = typhus
					}
					if = { limit = { has_trait = bubonic_plague }
						remove_trait = bubonic_plague
					}
					if = { limit = { has_trait = smallpox }
						remove_trait = smallpox
					}
					if = { limit = { has_trait = sickly }
						remove_trait = sickly
					}
					if = { limit = { has_trait = blind }
						remove_trait = blind
					}
					if = { limit = { has_character_modifier = magic_eyes_modifier }
						remove_character_modifier = magic_eyes_modifier
					}
					#if = { limit = { has_character_modifier = magic_claws_modifier }
					#	remove_character_modifier = magic_claws_modifier
					#}
					if = { limit = { has_character_modifier = chronic_headaches_modifier }
						remove_character_modifier = chronic_headaches_modifier
					}
					if = { limit = { has_character_modifier = infected_wound_modifier }
						remove_character_modifier = infected_wound_modifier
					}
					if = { limit = { has_character_modifier = gangrene_modifier }
						remove_character_modifier = gangrene_modifier
					}
					if = {	limit = {	has_trait = measles	}
						remove_trait = measles
					}
					if = {	limit = {	has_trait = dysentery	}
						remove_trait = dysentery
					}
					if = {	limit = {	has_trait = ergotism	}
						remove_trait = ergotism
					}
					if = {	limit = {	has_trait = scarred	}
						remove_trait = scarred
					}
					random_character_artifact = {
						limit = {
							has_variable = pot1
						}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot2 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot2_flag
							days = 1
						}
					}
					gain_standard_ps_effect = yes
					random_character_artifact = {
						limit = {
							has_variable = pot2
						}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot3 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot3_flag
							years = 1
						}
					}
					random_list = {
						10 = {
							if = {
								limit = {
									has_trait = physique_bad_3
								}
								remove_trait = physique_bad_3
							}
							else_if = {
								limit = {
									has_trait = physique_bad_2
								}
								remove_trait = physique_bad_2
							}
							else_if = {
								limit = {
									has_trait = physique_bad_1
								}
								remove_trait = physique_bad_1
							}
							else_if = {
								limit = {
									has_trait = physique_good_1
								}
								remove_trait = physique_good_1
							}
							else_if = {
								limit = {
									has_trait = physique_good_2
								}
								remove_trait = physique_good_2
							}
							add_trait_force_tooltip = physique_good_3
							add_trait_force_tooltip = strong
							add_trait_force_tooltip = athletic
							add_prowess_skill = 3
						}
						50 = {
							if = {
								limit = {
									has_trait = physique_bad_3
								}
								remove_trait = physique_bad_3
							}
							else_if = {
								limit = {
									has_trait = physique_bad_2
								}
								remove_trait = physique_bad_2
							}
							else_if = {
								limit = {
									has_trait = physique_bad_1
								}
								remove_trait = physique_bad_1
							}
							else_if = {
								limit = {
									has_trait = physique_good_1
								}
								remove_trait = physique_good_1
							}
							add_trait_force_tooltip = physique_good_2
							add_trait_force_tooltip = strong
							if = {
								limit = {
									has_trait = fecund
								}
								remove_trait = fecund
							}
							add_trait_force_tooltip = infertile
							add_prowess_skill = 2
						}
						25 = {
							if = {
								limit = {
									has_trait = physique_bad_3
								}
								remove_trait = physique_bad_3
							}
							else_if = {
								limit = {
									has_trait = physique_bad_2
								}
								remove_trait = physique_bad_2
							}
							else_if = {
								limit = {
									has_trait = physique_bad_1
								}
								remove_trait = physique_bad_1
							}

							add_trait_force_tooltip = physique_good_1
							add_trait_force_tooltip = strong
							if = {
								limit = {
									has_trait = fecund
								}
								remove_trait = fecund
							}
							add_trait_force_tooltip = infertile
							add_prowess_skill = 1
						}
						10 = {
							if = {
								limit = {
									has_trait = physique_bad_3
								}
								remove_trait = physique_bad_3
							}
							else_if = {
								limit = {
									has_trait = physique_bad_2
								}
								remove_trait = physique_bad_2
							}
							else_if = {
								limit = {
									has_trait = physique_bad_1
								}
								remove_trait = physique_bad_1
							}
							add_trait_force_tooltip = physique_good_1
							add_trait_force_tooltip = strong
							if = {
								limit = {
									has_trait = fecund
								}
								remove_trait = fecund
							}
							add_trait_force_tooltip = infertile
							add_trait_force_tooltip = disfigured
						}
						5 = {
							if = {
								limit = {
									has_trait = physique_good_3
								}
								remove_trait = physique_good_3
							}
							else_if = {
								limit = {
									has_trait = physique_good_2
								}
								remove_trait = physique_good_2
							}
							else_if = {
								limit = {
									has_trait = physique_good_1
								}
								remove_trait = physique_good_1
							}
							add_trait_force_tooltip = physique_bad_1
							add_trait_force_tooltip = weak
							if = {
								limit = {
									has_trait = fecund
								}
								remove_trait = fecund
							}
							add_trait_force_tooltip = infertile
							add_trait_force_tooltip = disfigured
							add_prowess_skill = -1
						}
					}
					random_character_artifact = {
						limit = {
							has_variable = pot3
						}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot4 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot4_flag
							days = 1
						}
					}
					custom_tooltip = drink_pot4_decision_ct
					random_character_artifact = {
						limit = {
							has_variable = pot4
							}
						destroy_artifact = this
					}
					trigger_event = magic_ev2.42
				}
				else_if = {
					limit = {
						scope:use_pot5 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot5_flag
							years = 3
						}
					}
					hidden_effect = {
						set_age = new_young_age_value
					}
					custom_tooltip = drink_pot5_decision_ct
					random_character_artifact = {
						limit = {
							has_variable = pot5
						}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot6 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot6_flag
							months = 24
						}
					}
					if = {
						limit = {
							has_character_modifier = pot6_modifier
						}
						remove_character_modifier = pot6_modifier
					}
					add_character_modifier = {
						modifier = pot6_modifier
						months = 24
					}
					random_character_artifact = {
						limit = {
							has_variable = pot6
							}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot7 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot7_flag
							months = 6
						}
					}
					if = {
						limit = {
							NOT = {
								has_character_modifier = mind_reader_modifier
							}
						}
						add_character_modifier = {
							modifier = mind_reader_modifier
							months = 7
						}
					}
					custom_tooltip = drink_pot7_decision_ct
					hidden_effect = {
						add_character_flag = {
							flag = mind_reading_elixir
							months = 6
						}
					}
					
					random_character_artifact = {
						limit = {
							has_variable = pot7
							}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot8 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot8_flag
							months = 12
						}
					}
					hidden_effect = {
						if = {
							limit = {
								has_character_modifier = alchemical_enhancement
							}
							remove_character_modifier = alchemical_enhancement
						}
					}
					add_character_modifier = {
						modifier = alchemical_enhancement
						months = 12
					}
					random_character_artifact = {
						limit = {
							has_variable = pot8
							}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot9 = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot9_flag
							months = 12
						}
					}
					hidden_effect = {
						if = {
							limit = {
								has_character_modifier = elixir_learning_modifier
							}
							remove_character_modifier = elixir_learning_modifier
						}
					}
					add_character_modifier = {
						modifier = elixir_learning_modifier
						months = 12
					}
					
					random_character_artifact = {
						limit = {
							has_variable = pot9
							}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot10a = yes
					}
					hidden_effect = {
						add_character_flag = {
							flag = use_recently_pot10_flag
							months = 60
						}
					}
					hidden_effect = {
						if = {
							limit = {
								has_character_modifier = elixir_fertility_modifier
							}
							remove_character_modifier = elixir_fertility_modifier
						}
					}
					add_character_modifier = {
						modifier = elixir_fertility_modifier
						months = 60
					}
					
					random_character_artifact = {
						limit = {
							has_variable = pot10
						}
						destroy_artifact = this
					}
				}
				else_if = {
					limit = {
						scope:use_pot10b = yes
					}
					hidden_effect = {
						primary_partner = {
							add_character_flag = {
								flag = use_recently_pot10_flag
								months = 60
							}
						}
					}
					hidden_effect = {
						primary_partner = {
							if = {
								limit = {
									has_character_modifier = elixir_fertility_modifier
								}
								remove_character_modifier = elixir_fertility_modifier
							}
						}
						
					}
					primary_partner = {
						add_character_modifier = {
							modifier = elixir_fertility_modifier
							months = 60
						}
					}
					random_character_artifact = {
						limit = {
							has_variable = pot10
						}
						destroy_artifact = this
					}
				}
				else = {
					custom_tooltip = no_potion_right_now
				}
			}
		}
	}
	can_send = {
		custom_description = {
			text = no_potion_right_now_custom
			OR = {
				scope:use_pot1 = yes
				scope:use_pot2 = yes
				scope:use_pot3 = yes
				scope:use_pot4 = yes
				scope:use_pot5 = yes
				scope:use_pot6 = yes
				scope:use_pot7 = yes
				scope:use_pot8 = yes
				scope:use_pot9 = yes
				scope:use_pot10a = yes
				scope:use_pot10b = yes
			}
		}
		
	}
	#options_heading = command_minion_option_title
	send_options_exclusive = yes
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot1
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot1_flag
					}
				}
				custom_description = {
					text = you_are_healthy
					OR = {
						has_trait = ill
						has_trait = pneumonic
						has_trait = great_pox
						has_trait = early_great_pox
						has_trait = lovers_pox
						has_trait = leper
						has_trait = wounded_1
						has_trait = wounded_2
						has_trait = wounded_3
						has_trait = maimed
						has_trait = infirm
						has_trait = incapable
						has_trait = gout_ridden
						has_trait = consumption
						has_trait = cancer
						has_trait = typhus
						has_trait = bubonic_plague
						has_trait = smallpox
						has_trait = sickly
						has_trait = blind
						has_trait = lunatic_1
						has_trait = lunatic_genetic
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = disfigured
						has_trait = infertile
						has_trait = bleeder
						has_trait = wheezing
						has_trait = impotent
						has_trait = inbred
						has_character_modifier = chronic_headaches_modifier
						has_character_modifier = infected_wound_modifier
						has_character_modifier = gangrene_modifier
						has_trait = ergotism
						has_trait = measles
						has_trait = dysentery
						has_trait = scarred
					}
				}
			}
		}
		flag = use_pot1
		localization = pot1
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot2
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot2_flag
					}
				}
				custom_description = {
					text = you_are_saturated
					can_be_power_saturated_trigger = yes
				}
			}
		}
		flag = use_pot2
		localization = pot2
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot3
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot3_flag
					}
				}
				custom_description = {
					text = you_are_herculean
					NOT = {
						has_trait = physique_good_3
					}
				}
			}
		}
		flag = use_pot3
		localization = pot3
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot4
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot4_flag
					}
				}
			}
		}
		flag = use_pot4
		localization = pot4
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot5
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot5_flag
					}
				}
				custom_description = {
					text = you_are_too_young
					age > 21
				}
			}
		}
		flag = use_pot5
		localization = pot5
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot6
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot6_flag
					}
				}
			}
		}
		flag = use_pot6
		localization = pot6
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot7
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot7_flag
					}
				}
			}
		}
		flag = use_pot7
		localization = pot7
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot8
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot8_flag
					}
				}
			}
		}
		flag = use_pot8
		localization = pot8
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot9
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot9_flag
					}
				}
			}
		}
		flag = use_pot9
		localization = elixir_learning_modifier
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot10
				}
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					NOT = {
						has_character_flag = use_recently_pot10_flag
					}
				}
			}
		}
		flag = use_pot10a
		localization = use_pot10a_loc
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_artifact = {
					has_variable = pot10
				}
				exists = primary_partner
			}
		}
		is_valid = {
			scope:actor = {
				custom_description = {
					text = potion_used_too_often
					primary_partner = {
						NOT = {
							has_character_flag = use_recently_pot10_flag
						}
					}
				}
			}
		}
		flag = use_pot10b
		localization = use_pot10b_loc
	}
	auto_accept = yes
}
upgrade_amulet_interaction = {
	category = interaction_category_friendly
	common_interaction = yes
	interface_priority = 60
	desc = upgrade_amulet_interaction_desc
	icon = icon_amulet

	target_type = artifact
	target_filter = actor_artifacts

	greeting = positive
	#notification_text = GIFT_ARTIFACT_PROPOSAL

	#answer_accept_key = GIFT_ARTIFACT_ACCEPT
	#answer_reject_key = GIFT_ARTIFACT_REJECT
	
	ai_targets = {
		ai_recipients = self
	}
	ai_frequency = 84

	can_be_picked_artifact = {
		#trigger_if = {
		#	limit = {
		#		scope:actor = {
		#			is_ai = no
		#		}
		#	}
		#	scope:target = {
		#		is_equipped = no
		#	}
		#}
		scope:actor = {
			any_character_artifact = {
				this = scope:target
			}
		}
		scope:target = {
			has_variable = mamulet
		}
	}

	is_shown = {
		scope:recipient = scope:actor
		scope:actor = {
			is_imprisoned = no
			is_witch_trigger = yes
			any_character_artifact = {
				has_variable = mamulet
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = at_least_two_amulets
				any_character_artifact = {
					has_variable = mamulet
					#is_equipped = no
					count > 1
				}
				any_character_artifact = {
					has_variable = mamulet
					is_equipped = no
				}
			}
		}
	}

	on_accept = {
		scope:actor = {
			hidden_effect = {
				every_character_artifact = {
					limit = {
						has_variable = mamulet
						is_equipped = no
						NOT = {
							THIS = scope:target
						}
					}
					if = {
						limit = {
							has_artifact_modifier = immunity_curse_terrain_cancel_negative_supply
							scope:target = {
								has_artifact_modifier = immunity_curse_terrain_cancel_negative_supply
							}
						}
						remove_artifact_modifier = immunity_curse_terrain_cancel_negative_supply
					}
					if = {
						limit = {
							has_artifact_modifier = immunity_curse2_terrain_cancel_negative_supply
							scope:target = {
								has_artifact_modifier = immunity_curse2_terrain_cancel_negative_supply
							}
						}
						remove_artifact_modifier = immunity_curse2_terrain_cancel_negative_supply
					}
					if = {
						limit = {
							has_artifact_modifier = immunity_domination_terrain_cancel_negative_supply
							scope:target = {
								has_artifact_modifier = immunity_domination_terrain_cancel_negative_supply
							}
						}
						remove_artifact_modifier = immunity_domination_terrain_cancel_negative_supply
					}
					if = {
						limit = {
							has_artifact_modifier = immunity_mind_scan_terrain_cancel_negative_supply
							scope:target = {
								has_artifact_modifier = immunity_mind_scan_terrain_cancel_negative_supply
							}
						}
						remove_artifact_modifier = immunity_mind_scan_terrain_cancel_negative_supply
					}
					if = {
						limit = {
							OR = {
								has_artifact_modifier = artifact_hypnotic_power
								has_artifact_modifier = artifact_hypnotic_power2
							}
							scope:target = {
								has_artifact_modifier = artifact_hypnotic_power
							}
						}
						remove_artifact_modifier = artifact_hypnotic_power
					}
					if = {
						limit = {
							OR = {
								has_artifact_modifier = artifact_hypnotic_power
								has_artifact_modifier = artifact_hypnotic_power2
							}
							scope:target = {
								has_artifact_modifier = artifact_hypnotic_power2
							}
						}
						remove_artifact_modifier = artifact_hypnotic_power2
					}
					scope:target = {
						copy_artifact_modifiers = PREV
					}
					destroy_artifact = this
				}
				scope:target = {
					add_durability = 100
					random_list = {
						1 = {
							trigger = {
								NOT = { has_artifact_modifier = artifact_monthly_lifestyle_xp_05_modifier }
							}
							add_artifact_modifier = artifact_monthly_lifestyle_xp_05_modifier
						}
						1 = {
							trigger = {
								NOT = { has_artifact_modifier = artifact_hostile_scheme_phase_duration_add_1_modifier }
							}
							add_artifact_modifier = artifact_hostile_scheme_phase_duration_add_1_modifier
						}
						1 = {
							trigger = {
								NOT = { has_artifact_modifier = artifact_negate_health_penalty_add_1_modifier }
							}
							add_artifact_modifier = artifact_negate_health_penalty_add_1_modifier
						}
						1 = {
							trigger = {
								NOT = { has_artifact_modifier = artifact_epidemic_resistance_1_modifier }
							}
							add_artifact_modifier = artifact_epidemic_resistance_1_modifier
						}
						1 = {
							trigger = {
								NOT = { has_artifact_modifier = artifact_travel_safety_1 }
							}
							add_artifact_modifier = artifact_travel_safety_1
						}
						1 = {

						}
					}
					if = {
						limit = {
							rarity = common
						}
						set_artifact_rarity = masterwork
					}
					else_if = {
						limit = {
							rarity = masterwork
						}
						set_artifact_rarity = famed
					}
					else_if = {
						limit = {
							rarity = famed
						}
						set_artifact_rarity = illustrious
						set_should_decay = no
					}
				}
			}
			custom_tooltip = upgrade_amulet_interaction_ct
			custom_tooltip = upgrade_amulet_interaction_ct2
			custom_tooltip = upgrade_amulet_interaction_ct3
		}
		
	}

	auto_accept = yes

	
	#ai_potential = {
	#}
	
	ai_min_reply_days = 0
	ai_max_reply_days = 0
	
	ai_will_do = {
		base = 0
		
		
	}
}
body_adaptation = {
	is_shown = {
		scope:recipient = scope:actor
		scope:actor = {
			has_perk = form_control_perk
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_demon
	common_interaction = yes
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_friendly
	cooldown = { years = 0 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	
	on_accept = {
		scope:actor = {
			if = {
				limit = {
					scope:body_adaptation20 = yes
				}
				custom_tooltip = body_adaptation20_ct
				if = {
					limit = {
						has_trait = disfigured
					}
					remove_trait = disfigured
				}
				hidden_effect = {
					set_immortal_age = 20
				}
			}
			else_if = {
				limit = {
					scope:body_adaptation40 = yes
				}
				custom_tooltip = body_adaptation40_ct
				if = {
					limit = {
						has_trait = disfigured
					}
					remove_trait = disfigured
				}
				hidden_effect = {
					set_immortal_age = 40
				}
			}
			else_if = {
				limit = {
					scope:body_adaptation70 = yes
				}
				custom_tooltip = body_adaptation70_ct
				if = {
					limit = {
						has_trait = disfigured
					}
					remove_trait = disfigured
				}
				hidden_effect = {
					set_immortal_age = 80	#80 just in case
				}
			}
			else = {
				if = {
					limit = {
						NOR = {
							AND = {
								scope:body_adaptation_giant = yes
								NOT = { has_trait = giant }
							}
							AND = {
								scope:body_adaptation_giant = no
								has_trait = giant
							}
							scope:body_adaptation_hw = yes
							scope:body_adaptation_lw = yes
						}
					}
					custom_tooltip = body_adaptation_no_change
				}
			}
			if = {
				limit = {
					scope:body_adaptation_hf = yes
				}
				if = {
					limit = {
						has_character_modifier = body_adaptation_nf
					}
					remove_character_modifier = body_adaptation_nf
				}
				if = {
					limit = {
						has_character_modifier = body_adaptation_hf
					}
					show_as_tooltip = {
						add_character_modifier = {
							modifier = body_adaptation_hf
						}
					}
				}
				else = {
					add_character_modifier = {
						modifier = body_adaptation_hf
					}
				}
			}
			else_if = {
				limit = {
					scope:body_adaptation_nf = yes
				}
				if = {
					limit = {
						has_character_modifier = body_adaptation_hf
					}
					remove_character_modifier = body_adaptation_hf
				}
				if = {
					limit = {
						has_character_modifier = body_adaptation_nf
					}
					show_as_tooltip = {
						add_character_modifier = {
							modifier = body_adaptation_nf
						}
					}
				}
				else = {
					add_character_modifier = {
						modifier = body_adaptation_nf
					}
				}
			}
			else = {
				if = {
					limit = {
						has_character_modifier = body_adaptation_hf
					}
					remove_character_modifier = body_adaptation_hf
				}
				if = {
					limit = {
						has_character_modifier = body_adaptation_nf
					}
					remove_character_modifier = body_adaptation_nf
				}
			}
			if = {
				limit = {
					scope:body_adaptation_hw = yes
				}
				change_current_weight = 30
				hidden_effect = {
					#change_target_weight = current_weight
					change_target_weight = 30
					if = {
						limit = {
							target_weight < current_weight
						}
						change_target_weight = 10
					}
				}
			}
			else_if = {
				limit = {
					scope:body_adaptation_lw = yes
				}
				change_current_weight = -30
				hidden_effect = {
					#change_target_weight = current_weight
					change_target_weight = -30
					if = {
						limit = {
							target_weight > current_weight
						}
						change_target_weight = -10
					}
				}
			}
			if = {
				limit = {
					scope:body_adaptation_giant = yes
				}
				if = {
					limit = {
						has_trait = dwarf
					}
					remove_trait = dwarf
				}
				if = {
					limit = {
						NOT = {
							has_trait = giant
						}
					}
					add_trait = giant
				}
			}
			else = {
				if = {
					limit = {
						has_trait = giant
					}
					remove_trait = giant
				}
			}
		}
	}
	send_options_exclusive = no
	send_option = {
		is_valid = {
			scope:actor = {
				custom_description = {
					text = magic_option_exclusive
					NOR = {
						scope:body_adaptation40 = yes
						scope:body_adaptation70 = yes
					}
				}
			}
		}
		flag = body_adaptation20
		localization = body_adaptation20
	}
	send_option = {
		is_valid = {
			scope:actor = {
				custom_description = {
					text = magic_option_exclusive
					NOR = {
						scope:body_adaptation20 = yes
						scope:body_adaptation70 = yes
					}
				}
			}
		}
		flag = body_adaptation40
		localization = body_adaptation40
	}
	send_option = {
		is_valid = {
			scope:actor = {
				custom_description = {
					text = magic_option_exclusive
					NOR = {
						scope:body_adaptation20 = yes
						scope:body_adaptation40 = yes
					}
				}
			}
		}
		flag = body_adaptation70
		localization = body_adaptation70
	}
	send_option = {
		is_valid = {
			scope:actor = {
				custom_description = {
					text = magic_option_exclusive
					NOT = {
						scope:body_adaptation_nf = yes
					}
				}
			}
		}
		starts_enabled = {
			scope:actor = {
				has_character_modifier = body_adaptation_hf
			}
		}
		flag = body_adaptation_hf
		localization = body_adaptation_hf
	}
	send_option = {
		is_valid = {
			scope:actor = {
				custom_description = {
					text = magic_option_exclusive
					NOT = {
						scope:body_adaptation_hf = yes
					}
				}
			}
		}
		starts_enabled = {
			scope:actor = {
				has_character_modifier = body_adaptation_nf
			}
		}
		flag = body_adaptation_nf
		localization = body_adaptation_nf
	}
	send_option = {
		is_valid = {
			scope:actor = {
				custom_description = {
					text = magic_option_exclusive
					NOT = {
						scope:body_adaptation_lw = yes
					}
				}
				custom_description = {
					text = limit_reached
					current_weight < 100
				}
			}
		}
		flag = body_adaptation_hw
		localization = body_adaptation_hw
	}
	send_option = {
		is_valid = {
			scope:actor = {
				custom_description = {
					text = magic_option_exclusive
					NOT = {
						scope:body_adaptation_hw = yes
					}
				}
				custom_description = {
					text = limit_reached
					current_weight > -100
				}
			}
		}
		flag = body_adaptation_lw
		localization = body_adaptation_lw
	}
	send_option = {
		starts_enabled = {
			scope:actor = {
				has_trait = giant
			}
		}
		flag = body_adaptation_giant
		localization = body_adaptation_giant
	}
	auto_accept = yes
	ai_frequency = 0
}

demon_annihilation = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			has_perk = killing_machine_perk
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			is_in_army = no
			is_travelling = no
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			is_imprisoned = no
			custom_description = {
				text = protected_by_entire_army
				is_in_army = no
			}
		}
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		trigger_if = {
			limit = { scope:recipient = { is_ruler = yes } }
			custom_description = {
				text = has_countermeasure_withdraw
				scope:recipient = {
					NOT = {
						has_scheme_countermeasure_parameter = success_chance_vs_indirect_schemes_malus_major
					}
				}
			}
		}
	}
	icon = icon_demon
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile

	cooldown_against_recipient = { years = 5 } 
	cooldown = { years = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = yes
	#hidden = yes
	
	on_accept = {
		scope:actor = {
			custom_tooltip = demon_annihilation_ct
			custom_tooltip = demon_annihilation_ct4
			stress_impact = {
				compassionate = medium_stress_impact_gain
				sadistic = medium_stress_impact_loss
				brave = minor_stress_loss
				craven = minor_stress_gain
			}
			custom_tooltip = demon_annihilation_ct6
			custom_tooltip = demon_annihilation_ct2
			if = {
				limit = {
					scope:actor.location = scope:recipient.location
				}
				trigger_event = magic_ev10.23
			}
			else = {
				start_travel_plan = {
					destination = scope:recipient.location
					on_arrival_event = magic_ev10.23
					players_use_planner = yes
				}
			}
			if = {
				limit = {
					scope:recipient = {
						is_travelling = yes
					}
				}
				custom_tooltip = demon_annihilation_ct5
			}
			scope:recipient = {
				custom_tooltip = demon_annihilation_ct3
			}
		}
	}
	
	auto_accept = yes
	ai_potential = {
		NOT = {
			has_trait = compassionate
		}
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = spouses
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
	}

	ai_frequency = 24

	ai_will_do = {
		base = 0
		modifier = {
			add = 10
			scope:actor.overall_magic_power_value > scope:recipient.overall_magic_power_p1_value
			scope:actor.prowess > scope:recipient.prowess
			OR = {
				has_trait = sadistic
				has_trait = fickle
				has_trait = wrathful
				has_trait = irritable
			}
		}
		modifier = {
			add = -500
			OR = {
				scope:actor.overall_magic_power_value < scope:recipient.overall_magic_power_value
				scope:actor.prowess < scope:recipient.prowess
			}
		}
		modifier = {
			add = 50
			scope:actor = {
				any_equipped_character_artifact = {
					OR = {
						has_artifact_modifier = singularity_modifier5
						has_artifact_modifier = singularity_modifierX
					}
				}
			}
		}
		modifier = {
			add = -200
			scope:recipient = {
				any_character_artifact = {
					OR = {
						has_artifact_modifier = singularity_modifier5
						has_artifact_modifier = singularity_modifierX
					}
				}
			}
		}
		modifier = {
			add = 100
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
					is_at_war_with = scope:actor
				}
			}
		}
		modifier = {
			add = -100
			scope:recipient = {
				OR = {
					has_relation_lover = scope:actor
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_soulmate = scope:actor
					is_travelling = yes
				}
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				has_trait = craven
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				can_be_power_saturated_trigger = yes
			}
		}
		modifier = {
			add = -50
			scope:actor = {
				OR = {
					has_trait = lazy
					has_trait = content
				}
			}
		}
		modifier = {
			add = -20
			scope:actor = {
				has_hook = scope:recipient
			}
		}
		modifier = {
			add = -100
			scope:actor = {
				has_strong_hook = scope:recipient
			}
			scope:recipient = {
				NOT = {
					any_character_artifact = {
						has_variable = magic1
					}
				}
			}
		}
		modifier = {
			add = -2000
			OR = {
				scope:actor = {
					has_variable = di_supports
					var:di_supports = scope:recipient
				}
				scope:recipient = {
					has_variable = di_supports
					var:di_supports = scope:actor
				}
			}
		}
	}
}

invite_to_high_council_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		exists = global_var:current_archmage_global
		global_var:current_archmage_global = scope:actor
		scope:actor = {	
			is_imprisoned = no
		}
		scope:recipient = {
			is_imprisoned = no
			OR = {
				has_trait = archmage
				has_trait = yaga
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			custom_description = {
				text = is_mc_member
				NOT = { has_variable = mc_member_var }
			}
			custom_description = {
				text = is_incapable
				NOT = { has_trait = incapable }
			}
		}
		custom_description = {
			text = mc_is_full
			NAND = {
				exists = global_var:current_loremaster_global
				#global_var:current_loremaster_global = {
				#	is_alive = yes
				#}
				exists = global_var:current_black_mage_global
				#global_var:current_black_mage_global = {
				#	is_alive = yes
				#}
				exists = global_var:current_admin_global
				#global_var:current_admin_global = {
				#	is_alive = yes
				#}
			}
		}
	}
	icon = icon_archmage
	ai_maybe = no
	ai_min_reply_days = 0
	ai_max_reply_days = 0
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = invite_to_high_council_interaction_desc
	greeting = positive
	#notification_text = MANA_SIPHON_PROPOSAL
	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:mc_slot_1 = yes
				}
				desc = MC_INV_PROPOSAL1
			}
			triggered_desc = {
				trigger = {
					scope:mc_slot_2 = yes
				}
				desc = MC_INV_PROPOSAL2
			}
			desc = MC_INV_PROPOSAL3
		}
	}
	cooldown_against_recipient = { years = 10 } 
	cooldown = { months = 0 }
	#can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	use_diplomatic_range = no
	#auto_accept = {}
	on_accept = {
		scope:recipient = {
			add_prestige = major_prestige_gain
			add_opinion = {
				target = scope:actor
				modifier = grateful_opinion
				opinion = 25
			}
		}
		if = {
			limit = {
				scope:mc_slot_1 = yes
			}
			scope:recipient = {
				appoint_to_mc1_effect = yes
			}
		}
		else_if = {
			limit = {
				scope:mc_slot_2 = yes
			}
			scope:recipient = {
				appoint_to_mc2_effect = yes
			}
		}
		else_if = {
			limit = {
				scope:mc_slot_3 = yes
			}
			scope:recipient = {
				appoint_to_mc3_effect = yes
			}
		}
	}
	on_decline = {
		scope:actor = {
			add_stress = minor_stress_gain
		}
		scope:recipient = {
			add_prestige = minor_prestige_loss
		}
	}
	#options_heading = mage_duel_option_title

	send_option = {
		is_shown = {
			NOT = {
				exists = global_var:current_loremaster_global
				#global_var:current_loremaster_global = {
				#	is_alive = yes
				#}
			}
		}
		flag = mc_slot_1
		localization = mc_loremaster_modifier
	}
	send_option = {
		is_shown = {
			NOT = {
				exists = global_var:current_black_mage_global
				#global_var:current_black_mage_global = {
				#	is_alive = yes
				#}
			}
		}
		flag = mc_slot_2
		localization = mc_black_mage_modifier
	}
	send_option = {
		is_shown = {
			NOT = {
				exists = global_var:current_admin_global
				#global_var:current_admin_global = {
				#	is_alive = yes
				#}
			}
		}
		flag = mc_slot_3
		localization = mc_admin_modifier
	}
	
	ai_accept = {
		base = 100
		modifier = {
			add = -60
			scope:recipient = {
				has_relation_rival = scope:actor
				NOT = { has_relation_nemesis = scope:actor }
				NOT = {	has_trait = impatient	}
			}
			desc = "ACTOR_RIVAL_TO_ME_REASON"
		}
		modifier = {
			add = -100
			scope:recipient = {
				has_relation_nemesis = scope:actor
				NOT = {	has_trait = impatient	}
			}
			desc = "ACTOR_NEMESIS_TO_ME_REASON"
		}
		modifier = {
			add = -200
			scope:recipient = {
				NOR = {
					has_relation_best_friend = scope:actor
					has_relation_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
					has_relation_mmaster = scope:actor
					has_relation_mminion = scope:actor
				}
				is_a_demon_trigger = yes
			}
			scope:actor = {
				is_a_demon_trigger = no
			}
			desc = "YOU_ARE_PATHETIC_HUMAN"
		}
		modifier = {
			add = -500
			scope:recipient = {
				has_character_flag = abdul_dude
			}
			desc = "DS_WANT_BE_ARCHMAGE"
		}
	}
	#send_options_exclusive = no
	#auto_accept = no
	#ai_potential = {}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
		ai_recipients = guests
		ai_recipients = courtiers
		ai_recipients = realm_characters
		ai_recipients = sub_realm_characters
		ai_recipients = family
		ai_recipients = nearby_domicile_owners
		ai_recipients = contacts
	}
	ai_frequency = 12
	ai_will_do = {
		base = 100
		modifier = {
			add = -100
			scope:actor = {
				OR = {
					has_relation_nemesis = scope:recipient
					has_relation_rival = scope:recipient
				}
			}
		}
		modifier = {
			add = -80
			scope:actor = {
				OR = {
					any_relation = {
						type = friend
						is_true_mage = yes
						NOT = {
							has_variable = mc_member_var
						}
					}
					any_relation = {
						type = best_friend
						is_true_mage = yes
						NOT = {
							has_variable = mc_member_var
						}
					}
				}
			}
		}
		modifier = {
			add = 80
			scope:recipient = {
				is_true_mage = yes
				OR = {
					has_relation_best_friend = scope:actor
					has_relation_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
	}
}

appoint_me_to_high_council_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		exists = global_var:current_archmage_global
		global_var:current_archmage_global = scope:recipient
		scope:actor = {	
			is_imprisoned = no
			OR = {
				has_trait = archmage
				has_trait = yaga
			}
			NOT = { has_variable = mc_member_var }
		}
		scope:recipient = {
			is_imprisoned = no
		}
	}
	is_valid_showing_failures_only = {
		custom_description = {
			text = mc_is_full
			NAND = {
				exists = global_var:current_loremaster_global
				#global_var:current_loremaster_global = {
				#	is_alive = yes
				#}
				exists = global_var:current_black_mage_global
				#global_var:current_black_mage_global = {
				#	is_alive = yes
				#}
				exists = global_var:current_admin_global
				#global_var:current_admin_global = {
				#	is_alive = yes
				#}
			}
		}
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
	}
	icon = icon_mage
	ai_maybe = no
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = appoint_me_to_high_council_interaction_desc
	greeting = positive
	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:mc_slot_1 = yes
				}
				desc = MC_APP_PROPOSAL1
			}
			triggered_desc = {
				trigger = {
					scope:mc_slot_2 = yes
				}
				desc = MC_APP_PROPOSAL2
			}
			desc = MC_APP_PROPOSAL3
		}
	}
	cooldown_against_recipient = { years = 10 } 
	cooldown = { months = 0 }
	#can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	use_diplomatic_range = no
	#auto_accept = {}
	on_accept = {
		if = {
			limit = {
				scope:mc_slot_1 = yes
			}
			scope:actor = {
				appoint_to_mc1_effect = yes
			}
		}
		else_if = {
			limit = {
				scope:mc_slot_2 = yes
			}
			scope:actor = {
				appoint_to_mc2_effect = yes
			}
		}
		else_if = {
			limit = {
				scope:mc_slot_3 = yes
			}
			scope:actor = {
				appoint_to_mc3_effect = yes
			}
		}
	}
	on_decline = {
		scope:actor = {
			add_stress = minor_stress_gain
			add_prestige = minor_prestige_loss
		}
	}
	#options_heading = mage_duel_option_title
	#send_options_exclusive = no
	send_option = {
		is_shown = {
			NOT = {
				exists = global_var:current_loremaster_global
				#global_var:current_loremaster_global = {
				#	is_alive = yes
				#}
			}
		}
		flag = mc_slot_1
		localization = mc_loremaster_modifier
	}
	send_option = {
		is_shown = {
			NOT = {
				exists = global_var:current_black_mage_global
				#global_var:current_black_mage_global = {
				#	is_alive = yes
				#}
			}
		}
		flag = mc_slot_2
		localization = mc_black_mage_modifier
	}
	send_option = {
		is_shown = {
			NOT = {
				exists = global_var:current_admin_global
				#global_var:current_admin_global = {
				#	is_alive = yes
				#}
			}
		}
		flag = mc_slot_3
		localization = mc_admin_modifier
	}
	
	ai_accept = {
		base = -100
		modifier = {
			add = -100
			scope:recipient = {
				has_relation_rival = scope:actor
				NOT = { has_relation_nemesis = scope:actor }
				NOT = {	has_trait = impatient	}
			}
			desc = "ACTOR_RIVAL_TO_ME_REASON"
		}
		modifier = {
			add = -200
			scope:recipient = {
				has_relation_nemesis = scope:actor
				NOT = {	has_trait = impatient	}
			}
			desc = "ACTOR_NEMESIS_TO_ME_REASON"
		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 60
			scope:actor = {
				has_hook = scope:recipient
				NOT = {
					has_strong_hook = scope:recipient
				}
			}
			desc = "DS_HAS_HOOK"
		}
		modifier = {
			add = 300
			scope:actor = {
				has_strong_hook = scope:recipient
			}
			desc = "DS_HAS_HOOK"
		}
	}
	#send_options_exclusive = no
	#auto_accept = no
	#ai_potential = {}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
		ai_recipients = guests
		ai_recipients = courtiers
		ai_recipients = realm_characters
		ai_recipients = sub_realm_characters
		ai_recipients = family
		ai_recipients = hooked_characters
		ai_recipients = nearby_domicile_owners
		ai_recipients = contacts
	}
	ai_frequency = 12
	ai_will_do = {
		base = 100
		modifier = {
			add = -100
			scope:actor = {
				OR = {
					has_relation_nemesis = scope:recipient
					has_relation_rival = scope:recipient
					has_character_flag = special_magic_character
				}
			}
		}
		modifier = {
			add = -90
			scope:actor = {
				is_a_demon_trigger = yes
			}
		}
		modifier = {
			add = -90
			scope:actor = {
				OR = {
					has_trait = lazy
					has_trait = content
				}
			}
		}
	}
}
remove_from_high_council_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		exists = global_var:current_archmage_global
		global_var:current_archmage_global = scope:actor
		scope:actor = {	
			is_imprisoned = no
		}
		scope:recipient = {
			has_variable = mc_member_var
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = you_need_5000_prest
				OR = {
					prestige >= 5000
					scope:recipient = {
						has_trait = incapable
					}
					has_usable_hook = scope:recipient
				}
			}
		}
	}
	icon = icon_archmage
	ai_maybe = no
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = remove_from_high_council_interaction_desc
	greeting = negative
	cooldown_against_recipient = { years = 1 } 
	cooldown = { months = 0 }
	#can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	use_diplomatic_range = no
	auto_accept = { always = yes }
	on_accept = {
		if = {
			limit = {
				scope:recipient = {
					has_trait = incapable
				}
			}
			scope:recipient = {
				stress_impact = {
					incapable = minor_stress_loss
				}
			}
		}
		else_if = {
			limit = {
				scope:hook = yes
			}
			scope:actor = {
				use_hook = scope:recipient
			}
		}
		else = {
			scope:actor = {
				add_prestige = -5000
			}
		}
		scope:recipient = {
			remove_from_mc_effect = yes
			add_opinion = {
				target = scope:actor
				modifier = hate_opinion
				opinion = -100
			}
			hidden_effect = {
				send_interface_toast = {
					title = remove_from_high_council_interaction_title
					left_icon = scope:actor
					custom_tooltip = remove_from_high_council_interaction_info
				}
			}
		}
	}
	send_options_exclusive = no
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook	
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	can_send = {
		scope:actor = {
			custom_description = {
				text = you_need_5000_prest
				OR = {
					prestige >= 5000
					scope:recipient = {
						has_trait = incapable
					}
					scope:hook = yes
				}
			}
		}
	}
	ai_frequency = 0
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_trait = incapable
					AND = {
						has_character_modifier = excluded_from_magic_community
						OR = {
							has_relation_rival = scope:actor
							has_relation_nemesis = scope:actor
						}
					}
				}
			}
		}
	}
}

demand_submission_archmage_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		exists = global_var:archmage_can_deman_submision
		scope:actor = {	
			is_imprisoned = no
			is_adult = yes
			has_character_modifier = mc_archmage_modifier
		}
		scope:recipient = {
			is_imprisoned = no
			is_adult = yes
			OR = {
				is_witch_trigger = yes
				has_trait = archmage
			}
			NOT = {
				is_a_demon_trigger = yes
			}
		}
	}
	is_valid_showing_failures_only = {
		custom_description = {
			text = already_has_strong_hook
			scope:actor = {
				NOT = {
					has_strong_hook = scope:recipient
				}
			}
		}
		custom_description = {
			text = is_mc_member
			scope:recipient = {
				NOT = { has_variable = mc_member_var }
			}
		}
	}
	icon = icon_archmage
	ai_maybe = yes
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = demand_submission_archmage_interaction_desc
	greeting = negative
	#notification_text = DEMAND_SUBMISSION_PROPOSAL
	cooldown_against_recipient = { years = 20 } 
	cooldown = { months = 6 }
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes

	use_diplomatic_range = yes
	#send_options_exclusive = no
	#on_decline_summary = imprison_decline_summary
	
	on_accept = {
		scope:actor = {
			if = {
				limit = {
					scope:achmage_sub1_flag = yes
				}
				hidden_effect = {
					if = {
						limit = {
							has_hook = scope:recipient
						}
						remove_hook = {
							target = scope:recipient
						}
					}
				}
				send_interface_message = {
					type = event_toast_effect_neutral
					title = demand_submission_archmage_interaction
					left_icon = scope:actor
					right_icon = scope:recipient
					add_hook = {
						type = loyalty_hook
						target = scope:recipient
					}
					scope:recipient = {
						add_opinion = {
							target = scope:actor
							modifier = disgusted_opinion
							opinion = -5
						}
					}
				}
			}
			else_if = {
				limit = {
					scope:achmage_sub2_flag = yes
				}
				send_interface_message = {
					type = event_toast_effect_neutral
					title = demand_submission_archmage_interaction
					left_icon = scope:actor
					right_icon = scope:recipient
					scope:recipient = {
						custom_tooltip = ARCH_DEM_O2_ct
						add_opinion = {
							target = scope:actor
							modifier = disgusted_opinion
							opinion = -5
						}
						trigger_event = magic_ev10.76
					}
				}
			}
		}
	}
	on_decline = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = demand_submission_archmage_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_imprison_refusal
				}
				custom_tooltip = demand_submission_archmage_reaction
				scope:recipient = {
					add_opinion = {
						target = scope:actor
						modifier = disgusted_opinion
						opinion = -30
					}
				}
			}
			hidden_effect = {
				trigger_event = magic_ev10.78
			}
		}
	}
	send_options_exclusive = yes
	send_option = {
		is_shown = {
			scope:actor = {
				NOT = {
					has_strong_hook = scope:recipient
				}
			}
		}
		localization = ARCH_DEM_O1
		flag = achmage_sub1_flag
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				any_character_war = {
					is_white_peace_possible = yes
					OR = {
						primary_attacker = scope:recipient
						primary_defender = scope:recipient
					}
				}
			}
		}
		localization = ARCH_DEM_O2
		flag = achmage_sub2_flag
	}
	ai_accept = {
		base = 10
		modifier = {
			add = {
				value = scope:actor.diplomacy
				multiply = 3
			}
			desc = DS_DIPLOMACY_ACTOR
		}
		modifier = {
			add = -50
			scope:recipient = {
				has_trait = arrogant
			}
			desc = DS_IS_ARROGANT
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_trait = craven
			}
			desc = DS_IS_CRAVEN
		}
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 20
			scope:actor = {
				any_vassal_or_below = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 40
			scope:actor = {
				any_courtier_or_guest = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 10
			scope:recipient = {
				is_lowborn = yes
			}
			desc = DS_I_AM_NOBODY
		}
		modifier = {
			add = -200
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			desc = DS_YOUR_RIVAL
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
	}
	ai_targets = {
		ai_recipients = vassals
		ai_recipients = family
		ai_recipients = courtiers
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = liege
	}
	ai_frequency = 24
	ai_will_do = {
		base = 10
		modifier = {
			add = -10
			scope:recipient = {
				OR = {
					has_relation_best_friend = scope:actor
					has_relation_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
		modifier = {
			add = 20
			scope:actor = {
				opinion = {
					target = scope:recipient
					value < 0
				}
			}
		}
	}
	auto_accept = no
}
ask_mc_for_support_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		exists = global_var:current_archmage_global
		global_var:current_archmage_global = scope:recipient
		scope:actor = {	
			is_imprisoned = no
			has_character_modifier = mc_supporter_modifier
		}
		#scope:recipient = {
		#	is_imprisoned = no
		#}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			is_imprisoned = no
			NOT = {
				is_at_war_with = scope:actor
			}
			custom_description = {
				text = archmage_busy_text
				NOT = { has_character_flag = archmage_busy_flag }
			}
		}
		custom_description = {
			text = mc_no_funds_text
			exists = global_var:mc_gold_global
			global_var:mc_gold_global > 199
		}
		scope:actor = {
			custom_description = {
				text = mc_you_are_exc_text
				NOT = {
					has_character_modifier = excluded_from_magic_community
				}
			}
		}
	}
	icon = icon_archmage
	#ai_maybe = no
	#ai_min_reply_days = 1
	#ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = ask_mc_for_support_interaction_desc
	greeting = positive
	cooldown_against_recipient = { years = 10 } 
	cooldown = { months = 10 }
	#can_send_despite_rejection = yes
	popup_on_receive = no
	pause_on_receive = no
	use_diplomatic_range = no
	auto_accept = {	always = yes	}
	on_accept = {
		scope:recipient = {
			custom_tooltip = ask_mc_for_support_interaction_ct
			custom_description_no_bullet = {
				text = empty_description1
			}
		}
		scope:actor = {
			if = {
				limit = {
					scope:mc_support_o1 = yes
				}
				show_as_tooltip = {
					random_list = {
						1 = {
							desc = mc_approval
							show_chance = no
							add_character_modifier = {
								modifier = mc_protection_modifier
								years = 3
							}
						}
						1 = {
							desc = mc_rejection
							show_chance = no
							custom_tooltip = sm_archmage_rejection_ct1
						}
					}
				}
				hidden_effect = {
					scope:recipient = {
						trigger_event = magic_ev10.95
					}
				}
			}
			else_if = {
				limit = {
					scope:mc_support_o2 = yes
				}
				show_as_tooltip = {
					random_list = {
						1 = {
							desc = mc_approval
							show_chance = no
							take_from_mc_funds_effect = {
								RECEIVER = scope:actor
								VALUE = mc_tiny_gold_value
							}
							add_character_modifier = {
								modifier = additional_magic_funds_modifier
								years = 3
							}
						}
						1 = {
							desc = mc_rejection
							show_chance = no
							custom_tooltip = sm_archmage_rejection_ct1
						}
					}
				}
				hidden_effect = {
					scope:recipient = {
						trigger_event = magic_ev10.96
					}
				}
			}
			else_if = {
				limit = {
					scope:mc_support_o3 = yes
				}
				show_as_tooltip = {
					random_list = {
						1 = {
							desc = mc_approval
							show_chance = no
							add_character_modifier = {
								modifier = mc_place_of_power_modifier
								years = 3
							}
						}
						1 = {
							desc = mc_rejection
							show_chance = no
							custom_tooltip = sm_archmage_rejection_ct1
						}
					}
				}
				hidden_effect = {
					scope:recipient = {
						trigger_event = magic_ev10.97
					}
				}
			}
			else_if = {
				limit = {
					scope:mc_support_o4 = yes
				}
				show_as_tooltip = {
					random_list = {
						1 = {
							desc = mc_approval
							show_chance = no
							transfer_to_mc_funds_effect = {
								PAYER = scope:actor
								VALUE = 250
							}
							custom_tooltip = mc_support_o4_ct
						}
						1 = {
							desc = mc_rejection
							show_chance = no
							custom_tooltip = sm_archmage_rejection_ct1
						}
					}
				}
				hidden_effect = {
					scope:recipient = {
						trigger_event = magic_ev10.98
					}
				}
			}
			else_if = {
				limit = {
					scope:mc_support_o5 = yes
				}
				show_as_tooltip = {
					random_list = {
						1 = {
							desc = mc_approval
							show_chance = no
							take_from_mc_funds_effect = {
								RECEIVER = scope:actor
								VALUE = mc_minor_gold_value
							}
						}
						1 = {
							desc = mc_approval
							show_chance = no
							custom_tooltip = mc_support_o5_ct
						}
						1 = {
							desc = mc_rejection
							show_chance = no
							custom_tooltip = sm_archmage_rejection_ct1
						}
					}
				}
				hidden_effect = {
					scope:recipient = {
						trigger_event = magic_ev10.99
					}
				}
			}
		}
	}
	#options_heading = mage_duel_option_title
	#send_options_exclusive = no
	send_option = {
		flag = mc_support_o1
		localization = mc_support_o1
	}
	send_option = {
		is_shown = {
			scope:actor = {
				OR = {
					has_trait = true_witch
					has_trait = archmage
					has_focus = arcane_focus
					AND = {
						has_trait = scholar
						is_witch_trigger = yes
					}
				}
				NOT = {
					has_character_modifier = additional_magic_funds_modifier
				}
			}
		}
		flag = mc_support_o2
		localization = mc_support_o2
	}
	send_option = {
		is_shown = {
			scope:actor = {
				has_power_place_trigger = no
			}
			scope:recipient = {
				has_power_place_trigger = yes
			}
		}
		flag = mc_support_o3
		localization = mc_support_o3
	}
	send_option = {
		is_shown = {
			scope:actor = {
				gold >= 250
				is_ruler = yes
				highest_held_title_tier >= tier_kingdom
				trigger_if = {
					limit = { is_ai = yes }
					NOT = {
						any_court_position_holder = {
							type = mage_court_position
							OR = {
								has_trait = archmage
								has_trait = yaga
								has_focus = arcane_focus
							}
						}
					}
				}
			}
		}
		flag = mc_support_o4
		localization = mc_support_o4
	}
	send_option = {
		is_shown = {
			scope:actor = {
				any_character_war = {
					OR = {
						primary_attacker = scope:actor
						primary_defender = scope:actor
					}
				}
			}
		}
		flag = mc_support_o5
		localization = mc_support_o5
	}
	
	#send_options_exclusive = no
	#auto_accept = no
	#ai_potential = {}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
		ai_recipients = guests
		ai_recipients = courtiers
		ai_recipients = realm_characters
		ai_recipients = sub_realm_characters
		ai_recipients = family
	}
	ai_frequency = 36
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:mc_support_o2 = yes
			scope:actor = {
				OR = {
					has_trait = true_witch
					has_trait = archmage
					has_focus = witch_focus
					has_focus = arcane_focus
				}
				NOT = {
					has_trait = generous
				}
			}
		}
		modifier = {
			add = 50
			scope:mc_support_o2 = yes
			scope:actor = {
				OR = {
					has_trait = true_witch
					has_trait = archmage
					has_focus = witch_focus
					has_focus = arcane_focus
				}
				has_trait = greedy
			}
		}
		modifier = {
			add = 50
			scope:mc_support_o1 = yes
			scope:actor = {
				OR = {
					has_trait = paranoid
					any_targeting_scheme = {
						is_scheme_exposed = yes
					}
				}
				NOT = {
					has_trait = trusting
				}
			}
		}
		modifier = {
			add = 50
			scope:mc_support_o3 = yes
			scope:actor = {
				OR = {
					has_trait = archmage
					has_focus = arcane_focus
					has_trait = true_witch
				}
				NOT = {
					has_trait = source
				}
			}
		}
		modifier = {
			add = 50
			scope:mc_support_o4 = yes
			scope:actor = {
				gold >= 250
				is_ruler = yes
				highest_held_title_tier >= tier_kingdom
				NOT = {
					any_court_position_holder = {
						type = mage_court_position
						OR = {
							has_trait = archmage
							has_trait = yaga
							has_focus = arcane_focus
						}
					}
				}
			}
		}
		modifier = {
			add = 50
			scope:mc_support_o4 = yes
			scope:actor = {
				is_ruler = yes
				any_character_war = {
					OR = {
						primary_attacker = scope:actor
						primary_defender = scope:actor
					}
				}
			}
		}
		modifier = {
			add = -500
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
					is_at_war_with = scope:recipient
					has_character_flag = distrusts_mages_flag
				}
			}
		}
	}
}

magic_inception_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			has_character_modifier = master_psionic_modifier
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
		}
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				is_ai = yes
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 100
	category = interaction_category_hostile
	desc = magic_inception_interaction_desc
	cooldown_against_recipient = { years = 10 } 
	cooldown = { months = 12 }
	#can_send_despite_rejection = yes
	popup_on_receive = no
	pause_on_receive = no
	use_diplomatic_range = no
	auto_accept = {	always = yes	}
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 32 }
			save_scope_as = magic_user
			send_message_4_magic_sense_effect = yes
			hidden_effect_new_object = {
				if = {
					limit = {
						has_game_rule = high_whunters
					}
					random = {
						chance = 30
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_courtier_or_guest = {
								has_trait = witch_hunter
							}
						}
					}
					random = {
						chance = 15
						spawn_witch_hunter_full_chance_effect = { EMPL = scope:actor }
					}
				}
			}
			mark_as_black_magic_caster_effect = { L = 1 }
			gain_sc_xp1_effect = yes
			spend_standard_ps_effect = yes
			
			stress_impact = {
				just = minor_stress_gain
				honest = minor_stress_gain
				deceitful = minor_stress_loss
			}
			if = {
				limit = {
					scope:recipient = {
						is_magic_protected = yes
					}
				}
				custom_tooltip = spell_may_be_countered
			}
			if = {
				limit = {
					scope:magic_inception_o1 = yes
				}
				set_spell_id = { ID = 321 }
				show_as_tooltip = {
					real_magic_inception_effect1 = yes
				}
				hidden_effect = {
					execute_or_counter_spell_effect = { SID = 321 }
				}
			}
			else_if = {
				limit = {
					scope:magic_inception_o2 = yes
				}
				set_spell_id = { ID = 322 }
				show_as_tooltip = {
					real_magic_inception_effect2 = yes
				}
				hidden_effect = {
					execute_or_counter_spell_effect = { SID = 322 }
				}
			}
			else_if = {
				limit = {
					scope:magic_inception_o3 = yes
				}
				set_spell_id = { ID = 323 }
				show_as_tooltip = {
					real_magic_inception_effect3 = yes
				}
				hidden_effect = {
					execute_or_counter_spell_effect = { SID = 323 }
				}
			}
			else_if = {
				limit = {
					scope:magic_inception_o4 = yes
				}
				set_spell_id = { ID = 324 }
				show_as_tooltip = {
					real_magic_inception_effect4 = yes
				}
				hidden_effect = {
					execute_or_counter_spell_effect = { SID = 324 }
				}
			}
			else_if = {
				limit = {
					scope:magic_inception_o5 = yes
				}
				set_spell_id = { ID = 325 }
				show_as_tooltip = {
					real_magic_inception_effect5 = yes
				}
				hidden_effect = {
					execute_or_counter_spell_effect = { SID = 325 }
				}
			}
			else_if = {
				limit = {
					scope:magic_inception_o6 = yes
				}
				set_spell_id = { ID = 326 }
				show_as_tooltip = {
					real_magic_inception_effect6 = yes
				}
				hidden_effect = {
					execute_or_counter_spell_effect = { SID = 326 }
				}
			}
			else_if = {
				limit = {
					scope:magic_inception_o7 = yes
				}
				set_spell_id = { ID = 327 }
				show_as_tooltip = {
					real_magic_inception_effect7 = yes
				}
				hidden_effect = {
					execute_or_counter_spell_effect = { SID = 327 }
				}
			}
			metamagic_effect = yes
		}
	}
	options_heading = magic_inception_option_title
	#send_options_exclusive = no
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ruler = yes
				any_character_war = {
					is_white_peace_possible = yes
					OR = {
						primary_attacker = scope:recipient
						primary_defender = scope:recipient
					}
				}
			}
		}
		flag = magic_inception_o1
		localization = magic_inception_o1
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				OR = {
					is_ruler = yes
					is_diarch = yes
				}
			}
		}
		flag = magic_inception_o2
		localization = magic_inception_o2
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ruler = yes
				NOT = {
					has_trait = conqueror
				}
			}
		}
		flag = magic_inception_o3
		localization = magic_inception_o3
	}
	send_option = {
		flag = magic_inception_o4
		localization = magic_inception_o4
	}
	send_option = {
		flag = magic_inception_o5
		localization = magic_inception_o5
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				any_secret = {
					count > 0
				}
			}
		}
		flag = magic_inception_o6
		localization = magic_inception_o6
	}
	send_option = {
		is_valid = {
			scope:actor = {
				NOT = {
					has_hook = scope:recipient
				}
			}
		}
		flag = magic_inception_o7
		localization = magic_inception_o7
	}
	
	#send_options_exclusive = no
	#auto_accept = no
	#ai_potential = {}
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = war_enemies
		ai_recipients = scripted_relations
		ai_recipients = guests
		ai_recipients = courtiers
		ai_recipients = realm_characters
		ai_recipients = sub_realm_characters
		ai_recipients = family
	}
	ai_frequency = 200
	ai_will_do = {
		base = 0
	}
}

antimagic_seal = {
	is_shown = {
		#NOT = { scope:recipient = scope:actor }
		scope:actor = {
				has_character_modifier = master_metamagic_modifier
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
		}
		scope:actor = {
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
		scope:recipient = {
			custom_description = {
				text = has_magic_immunity
				has_immunity_for_antimagic_seal = no
			}
		}
	}
	icon = icon_magic
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_hostile
	desc = "antimagic_seal_desc"

	cooldown_against_recipient = { years = 10 } 
	cooldown = { months = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	
	on_accept = {
		scope:actor = {
			set_spell_id = { ID = 33 }
			save_scope_as = magic_user
			custom_tooltip = use_magic_custom_tooltip1
			spend_standard_ps_effect = yes
			display_extended_duration_spell_catalyst = yes
			if = {
				limit = {
					scope:recipient = {
						has_unstable_source_trigger = yes
					}
				}
				antimagic_seal_effect = yes
			}
			else = {
				execute_or_counter_spell_effect = { SID = 33 }
			}
			
			send_message_4_magic_sense_effect = yes
			metamagic_effect = yes
		}
	}
	
	auto_accept = yes
}
threaten_with_magic_interaction = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:actor = {	
			is_imprisoned = no
			is_adult = yes
			has_trait = witch
			trigger_if = {
				limit = {
					is_ai = yes
				}
				has_trait = archmage
				dread > 50
				scope:recipient = {
					NOT = {
						any_court_position_holder = {
							type = mage_court_position
							OR = {
								has_perk = mage_tower_p2_perk
								has_trait = archmage
							}
						}
					}
				}
			}
		}
		scope:recipient = {
			is_imprisoned = no
			#is_adult = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = magic_threat_no_demands
				OR = {
					NOT = {
						has_hook = scope:recipient
					}
					AND = {
						scope:recipient = {
							is_ruler = yes
							any_character_war = {
								OR = {
									AND = {
										primary_attacker = scope:recipient
										any_war_defender = {
											THIS = scope:actor
										}
									}
									AND = {
										any_war_attacker = {
											THIS = scope:actor
										}
										primary_defender = scope:recipient
									}
								}
							}
						}
					}
					AND = {
						scope:recipient = {
							any_character_artifact = {
								any_artifact_claimant = {
									THIS = scope:actor
								}
							}
						}
					}
					AND = {
						scope:recipient = {
							is_vassal_of = scope:actor
							exists = joined_faction
						}
					}
				}
			}
		}
		scope:recipient = {
			#custom_description = {
			#	text = has_magic_immunity
			#	is_antimagic_trigger = no
			#}
			custom_description = {
				text = is_powerful_being
				NOR = {
					is_powerful_being = yes
					has_perk = mage_tower_p2_perk
				}
			}
			custom_description = {
				text = is_damn_brave
				NOT = {
					has_trait = brave
				}
			}
			NOT = { has_trait = witch_hunter }
			NOT = { has_strong_hook = scope:actor }
		}
	}
	icon = icon_witch
	ai_maybe = yes
	ai_min_reply_days = 1
	ai_max_reply_days = 1
	common_interaction = yes
	interface_priority = 100
	category = interaction_category_diplomacy
	desc = threaten_with_magic_interaction_desc
	greeting = negative
	notification_text = threaten_with_magic_interaction_proposal
	cooldown_against_recipient = { years = 10 } 
	cooldown = { months = 1 }
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes

	use_diplomatic_range = yes
	#send_options_exclusive = no
	#on_decline_summary = imprison_decline_summary
	
	on_accept = {
		scope:actor = {
			if = {
				limit = {
					scope:magic_threaten_hook_flag = yes
				}
				hidden_effect = {
					if = {
						limit = {
							has_hook = scope:recipient
						}
						remove_hook = {
							target = scope:recipient
						}
					}
				}
				send_interface_message = {
					type = event_toast_effect_neutral
					title = threaten_with_magic_interaction
					left_icon = scope:actor
					right_icon = scope:recipient
					add_hook = {
						type = threat_hook
						target = scope:recipient
					}
				}
				if = {
					limit = {
						is_landless_adventurer = yes
						scope:recipient = {
							is_landed_or_landless_administrative = yes
							NOT = {
								is_contact_of = scope:actor
							}
						}
					}
					add_contact = scope:recipient
				}
			}
			else_if = {
				limit = {
					scope:magic_threaten_quo_flag = yes
				}
				send_interface_message = {
					type = event_toast_effect_neutral
					title = threaten_with_magic_interaction
					left_icon = scope:actor
					right_icon = scope:recipient
					every_character_war = {
						limit = {
							is_white_peace_possible = yes
							OR = {
								AND = {
									primary_attacker = scope:recipient
									primary_defender = scope:actor
								}
								AND = {
									primary_attacker = scope:actor
									primary_defender = scope:recipient
								}
							}
						}
						end_war = white_peace
					}
				}
			}
			else_if = {
				limit = {
					scope:magic_threaten_surrender_flag = yes
				}
				send_interface_message = {
					type = event_toast_effect_neutral
					title = threaten_with_magic_interaction
					left_icon = scope:actor
					right_icon = scope:recipient
					every_character_war = {
						limit = {
							OR = {
								AND = {
									primary_attacker = scope:recipient
									any_war_defender = {
										THIS = scope:actor
									}
								}
								AND = {
									any_war_attacker = {
										THIS = scope:actor
									}
									primary_defender = scope:recipient
								}
							}
						}
						if = {
							limit = {
								primary_attacker = scope:recipient
							}
							end_war = defender
						}
						else = {
							end_war = attacker
						}
					}
				}
			}
			else_if = {
				limit = {
					scope:magic_threaten_artifact_flag = yes
				}
				hidden_effect = {
					every_personal_claimed_artifact = {
						limit = {
							artifact_war_claimable_artifact_trigger = yes
						}
						add_to_list = transferred_artifacts
					}
					if = {
						limit = { exists = house }
						house = {
							every_house_claimed_artifact = {
								limit = {
									artifact_war_claimable_artifact_trigger = yes
									artifact_owner = {
										trigger_if = { # Lowborn or not the same House
											limit = { exists = house }
											NOT = { house = scope:attacker.house }
										}
									}
								}
								add_to_list = transferred_artifacts
							}
						}
					}
				}
				send_interface_message = {
					type = event_toast_effect_neutral
					title = threaten_with_magic_interaction
					left_icon = scope:actor
					right_icon = scope:recipient
					every_in_list = {
						list = transferred_artifacts
						save_scope_as = artifact
						set_owner = {
							target = scope:actor
							history = {
								type = given
								actor = scope:recipient
								recipient = scope:actor
							}
						}
						hidden_effect = {
							scope:recipient = {
								if = {
									limit = {
										NOT = { has_personal_artifact_claim = scope:artifact }
									}
									add_personal_artifact_claim = scope:artifact
								}
							}
						}
					}
				}
			}
			else_if = {
				limit = {
					scope:magic_threaten_faction_flag = yes
				}
				send_interface_message = {
					type = event_toast_effect_neutral
					title = threaten_with_magic_interaction
					left_icon = scope:actor
					right_icon = scope:recipient
					scope:recipient = {
						if = {
							limit = {
								exists = joined_faction
							}
							leave_faction = joined_faction
							add_character_flag = {
								flag = joining_faction_block
								years = 10
							}
						}
					}
				}
			}
			scope:recipient = {
				add_opinion = {
					target = scope:actor
					modifier = threatened_opinion
					opinion = -30
				}
			}
		}
	}
	on_decline = {
		scope:actor = {
			send_interface_message = {
				type = event_toast_effect_neutral
				title = nope_threaten_with_magic_interaction
				left_icon = scope:actor
				right_icon = scope:recipient
				add_prestige = major_prestige_loss
				add_opinion = {
					target = scope:recipient
					modifier = refusal_opinion
					opinion = -50
				}
				scope:recipient = {
					custom_tooltip = magic_threaten_fails_ct
					add_opinion = {
						target = scope:actor
						modifier = threatened_opinion
						opinion = -100
						years = 20
					}
				}
			}
			hidden_effect = {
				if = {
					limit = {
						is_ai = yes
					}
					if = {
						limit = {
							is_character_interaction_shown = {
								recipient = scope:recipient
								interaction = tornado_spell
							}
							is_character_interaction_valid = {
								recipient = scope:recipient
								interaction = tornado_spell
							}
						}
						run_interaction = {
							interaction = tornado_spell
							actor = this
							recipient = scope:recipient
							execute_threshold = accept
						}
					}
					else_if = {
						limit = {
							is_character_interaction_shown = {
								recipient = scope:recipient
								interaction = cast_powerfull_curse
							}
							is_character_interaction_valid = {
								recipient = scope:recipient
								interaction = cast_powerfull_curse
							}
						}
						run_interaction = {
							interaction = cast_powerfull_curse
							actor = this
							recipient = scope:recipient
							execute_threshold = accept
						}
					}
					else_if = {
						limit = {
							is_character_interaction_shown = {
								recipient = scope:recipient
								interaction = cast_curse
							}
							is_character_interaction_valid = {
								recipient = scope:recipient
								interaction = cast_curse
							}
						}
						run_interaction = {
							interaction = cast_curse
							actor = this
							recipient = scope:recipient
							execute_threshold = accept
						}
					}
				}
			}
		}
	}
	send_options_exclusive = yes
	send_option = {
		is_shown = {
			scope:actor = {
				NOT = {
					has_hook = scope:recipient
				}
			}
		}
		localization = MAGIC_THREATEN_O1
		flag = magic_threaten_hook_flag
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ruler = yes
				any_character_war = {
					is_white_peace_possible = yes
					OR = {
						AND = {
							primary_attacker = scope:recipient
							primary_defender = scope:actor
						}
						AND = {
							primary_attacker = scope:actor
							primary_defender = scope:recipient
						}
					}
				}
			}
		}
		localization = MAGIC_THREATEN_O2
		flag = magic_threaten_quo_flag
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_ruler = yes
				any_character_war = {
					OR = {
						AND = {
							primary_attacker = scope:recipient
							any_war_defender = {
								THIS = scope:actor
							}
						}
						AND = {
							any_war_attacker = {
								THIS = scope:actor
							}
							primary_defender = scope:recipient
						}
					}
				}
			}
		}
		localization = MAGIC_THREATEN_O3
		flag = magic_threaten_surrender_flag
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				any_character_artifact = {
					any_artifact_claimant = {
						THIS = scope:actor
					}
				}
			}
		}
		localization = MAGIC_THREATEN_O4
		flag = magic_threaten_artifact_flag
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				is_vassal_of = scope:actor
				exists = joined_faction
			}
		}
		localization = MAGIC_THREATEN_O5
		flag = magic_threaten_faction_flag
	}
	ai_accept = {
		base = -50
		modifier = {
			add = -30
			scope:recipient = {
				OR = {
					has_trait = lunatic_1
					has_trait = lunatic_genetic
				}
			}
			desc = DS_IS_LUNATIC
		}
		modifier = {
			add = -10
			scope:recipient = {
				has_trait = arrogant
			}
			desc = DS_IS_ARROGANT
		}
		modifier = {
			add = -20
			scope:recipient = {
				has_trait = stubborn
			}
			desc = DS_IS_STUBBORN
		}
		modifier = {
			add = 50
			scope:recipient = {
				has_trait = craven
			}
			desc = DS_IS_CRAVEN
		}
		modifier = {
			add = 10
			scope:actor = {
				has_trait = true_witch
			}
			desc = YOU_ARE_TRUE_WITCH
		}
		modifier = {
			add = 50
			scope:actor = {
				has_trait = archmage
				is_legendary_mage_trigger = no
			}
			desc = YOU_ARE_MAGE
		}
		modifier = {
			add = 80
			scope:actor = {
				has_trait = archmage
				is_legendary_mage_trigger = yes
			}
			desc = YOU_ARE_MAGE
		}
		modifier = {
			add = 10
			scope:actor = {
				has_trait = necromancer
			}
			desc = YOU_ARE_LICH
		}
		modifier = {
			add = 10
			scope:actor = {
				wh_attraction_value > 4
				wh_attraction_value < 9
			}
			desc = DS_FEARS_YOUR_MAGIC
		}
		modifier = {
			add = 20
			scope:actor = {
				wh_attraction_value > 8
				wh_attraction_value < 14
			}
			desc = DS_FEARS_YOUR_MAGIC
		}
		modifier = {
			add = 30
			scope:actor = {
				wh_attraction_value > 13
				wh_attraction_value < 19
			}
			desc = DS_FEARS_YOUR_MAGIC
		}
		modifier = {
			add = 40
			scope:actor = {
				wh_attraction_value > 18
			}
			desc = DS_FEARS_YOUR_MAGIC
		}
		modifier = {
			add = -30
			scope:recipient = {
				any_character_artifact = {
					has_variable = mamulet
				}
			}
			desc = DS_HAS_MAMULET
		}
		modifier = {
			add = -30
			scope:magic_threaten_surrender_flag = yes
			desc = DS_NEVER_SURRENDER
		}
		modifier = {
			add = -200
			scope:recipient = {
				is_ruler = yes
				any_court_position_holder = {
					type = mage_court_position
					OR = {
						has_perk = mage_tower_p2_perk
						has_trait = archmage
					}
				}
			}
			desc = DS_HAS_COURT_MAGE
		}
		modifier = {
			add = 10
			scope:actor = {
				any_vassal_or_below = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = 20
			scope:actor = {
				any_courtier_or_guest = { this = scope:recipient }
			}
			desc = DS_IS_VASSAL
		}
		modifier = {
			add = -200
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			desc = DS_YOUR_RIVAL
		}
		modifier = {
			add = 10
			scope:actor = {
				dread > 60
				dread < 95
			}
			desc = ACTOR_HIGH_DREAD
		}
		modifier = {
			add = 20
			scope:actor = {
				dread >= 95
			}
			desc = ACTOR_HIGH_DREAD
		}
		modifier = {
			add = 10
			scope:actor = {
				has_character_modifier = mc_archmage_modifier
			}
			scope:recipient = {
				OR = {
					exists = global_var:mc_revealed
					has_trait = true_witch
					is_true_mage = yes
				}
			}
			desc = ACTOR_IS_ARCHMAGE
		}
		modifier = {
			add = -10
			scope:recipient = {
				is_ruler = yes
				is_landed_or_landless_administrative = yes
				is_independent_ruler = yes
				NOT = { highest_held_title_tier = tier_empire }
			}
			desc = DS_IS_INDEPENDENT_RULER
		}
		modifier = {
			add = -20
			scope:recipient = {
				is_ruler = yes
				is_landed_or_landless_administrative = yes
				is_independent_ruler = yes
				highest_held_title_tier = tier_empire
			}
			desc = DS_IS_INDEPENDENT_RULER
		}
		#modifier = {
		#	add = intimidated_external_reason_value
		#	scope:recipient = {
		#		NOT = { target_is_liege_or_above = scope:actor }
		#		has_dread_level_towards = {
		#			target = scope:actor
		#			level = 1
		#		}
		#	}
		#	desc = INTIMIDATED_REASON
		#}
	}
	ai_targets = {
		ai_recipients = vassals
		ai_recipients = family
		ai_recipients = courtiers
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		ai_recipients = liege
		ai_recipients = war_enemies
	}
	ai_frequency = 12
	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			scope:magic_threaten_artifact_flag = yes
			scope:recipient = {
				any_character_artifact = {
					any_artifact_claimant = {
						THIS = scope:actor
					}
				}
			}
		}
		modifier = {
			add = 100
			scope:magic_threaten_quo_flag = yes
			scope:recipient = {
				is_ruler = yes
				any_character_war = {
					primary_attacker = scope:recipient
					primary_defender = scope:actor
				}
			}
		}
		modifier = {
			add = 80
			scope:magic_threaten_surrender_flag = yes
			scope:recipient = {
				is_ruler = yes
				any_character_war = {
					primary_attacker = scope:actor
					primary_defender = scope:recipient
				}
			}
		}
		modifier = {
			add = 80
			scope:magic_threaten_faction_flag = yes
			scope:recipient = {
				scope:recipient = {
					is_vassal_of = scope:actor
					exists = joined_faction
				}
			}
		}
	}
	auto_accept = no
}
join_mages_summit = {
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		scope:recipient = {
			exists = involved_activity
			involved_activity = {
				has_activity_type = mages_summit
				is_current_phase_active = no
			}
		}
		scope:actor = {
			OR = {
				has_trait = archmage
				has_trait = yaga
				has_trait = true_witch
				has_focus = arcane_focus
			}
			NOT = {
				has_character_modifier = excluded_from_magic_community
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			#is_travelling = no
			#is_imprisoned = no
			#NOT = {
			#	exists = involved_activity
			#}
			is_available = yes
			#is_healthy = yes
			#is_in_army = no
		}
	}
	icon = icon_mage
	common_interaction = no
	interface_priority = 90
	popup_on_receive = no
	category = interaction_category_diplomacy
	desc = join_mages_summit_desc
	#prompt = "cast_curse_prompt_text"
	#custom_description="cast_curse_custom_desc"
	#notification_text = cast_curse_notification_text

	cooldown_against_recipient = { years = 9 } 
	cooldown = { years = 1 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	
	on_accept = {
		scope:recipient = {
			involved_activity = {
				save_scope_as = msummit
			}
		}
		scope:actor = {
			add_to_activity = scope:msummit
		}
	}
	
	auto_accept = yes
	ai_potential = {
		always = yes
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = vassals
		ai_recipients = liege
		ai_recipients = dynasty
		ai_recipients = spouses
		ai_recipients = scripted_relations
		ai_recipients = realm_characters
	}

	ai_frequency = 12

	ai_will_do = {
		base = 100
	}
}

thorn_walls_spell = {
	target_type = title
	target_filter = recipient_domain_titles
	is_shown = {
		scope:recipient = scope:actor
		scope:actor = {
			is_ruler = yes
			is_imprisoned = no
			has_character_flag = thorn_walls_spell_flag
		}	
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			custom_description = {
				text = no_valid_spell_target
				exists = capital_county
			}
			custom_description = {
				text = power_needed_custom
				can_spend_standard_ps_trigger = yes
			}
			custom_description = {
				text = is_incapable_custom
				NOT = { has_trait = incapable }
			}
			custom_description = {
				text = is_on_mage_duel_custom
				NOT = {	has_variable = pclash	}
			}
		}
		scope:actor = {
			custom_description = {
				text = have_antimagic_seal
				is_antimagic_trigger = no
			}
		}
	}
	icon = icon_magic
	common_interaction = yes
	interface_priority = 90
	category = interaction_category_friendly

	cooldown_against_recipient = { years = 2 } 
	cooldown = { years = 2 } 
	ignores_pending_interaction_block = yes
	use_diplomatic_range = no
	#hidden = yes
	can_be_picked_title = {
		scope:target = {
			is_leased_out = no
			tier = tier_county
		}
	}
	on_accept = {
		scope:target = {
			save_scope_as = ttile
		}
		scope:actor = {
			set_spell_id = { ID = 34 }
			gain_sc_xp1_effect = yes
			spend_standard_ps_effect = yes
			mark_as_black_magic_caster_effect = { L = 1 }
			stress_impact = {
				craven = minor_stress_loss
			}
			add_dread = medium_dread_gain
			expose_your_witch_secret = yes
		}
		display_extended_duration_spell_catalyst = yes
		scope:target.title_province = {
			county = {
				hidden_effect = {
					if = {
						limit = {
							has_county_modifier = thorn_walls_modifier
						}
						remove_county_modifier = thorn_walls_modifier
					}
				}
				
				if = {
					limit = {
						scope:actor = {
							any_equipped_character_artifact = {
								has_variable = catalyst
							}
						}
					}
					add_county_modifier = {
						modifier = thorn_walls_modifier
						years = 10
					}
				}
				else = {
					add_county_modifier = {
						modifier = thorn_walls_modifier
						years = 5
					}
				}
			}
		}
	}
	auto_accept = yes
}