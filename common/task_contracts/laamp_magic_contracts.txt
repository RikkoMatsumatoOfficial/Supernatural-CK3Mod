#Inconvenient Witch
laamp_magic_1001 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_intrigue_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that value foreign intelligence.
				if = {
					limit = { has_trait = deceitful }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = arbitrary }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = wrathful }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				if = {
					limit = { has_trait = honest }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = calm }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = impatient }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 100
	}

	# Validity Triggers
	valid_to_create = {
		has_realm_law_flag = laamp_contracts_weight_up_witch
		
		NOT = {
			has_character_flag = took_laamp_magic_1001_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		NOT = {
			scope:employer = { government_has_flag = government_is_tribal }
		}
		scope:employer = {
			highest_held_title_tier >= tier_county
			is_ai = yes
		}
		
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1001_flag
				years = 12
			}
			trigger_event = magic_ev9.12
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_crime_value
			}
		}
		
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Searching for Ingredients
laamp_magic_1002 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that value foreign intelligence.
				if = {
					limit = { has_trait = education_learning }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_herbalist }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = true_witch }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_mystic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		scope:employer = {
			is_witch_huter = no
			OR = {
				has_trait = lifestyle_herbalist
				is_witch_trigger = yes
			}
			is_landed_or_landless_administrative = yes
			OR = {
				has_trait = true_witch
				has_trait = lifestyle_herbalist
				has_perk = combat_spells_p3_perk
				has_trait = scholar
			}
			highest_held_title_tier >= tier_county
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1002_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1002_flag
				years = 10
			}
			trigger_event = magic_ev9.15
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Demonic Possession
laamp_magic_1003 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that value foreign intelligence.
				if = {
					limit = { has_trait = craven }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = humble }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_mystic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		#NOT = {
		#	exists = var:laamp_magic_1003_var
		#}
		NOT = {
			any_character_task_contract = {
				has_task_contract_type = laamp_magic_1003
			}
		}
		#any_available_task_contract = {
		#	NOT = { has_task_contract_type = laamp_magic_1003 }
		#}
		scope:employer = {
			is_witch_huter = no
			is_witch_trigger = no
			is_landed_or_landless_administrative = yes
			any_courtier_or_guest = {
				OR = {
					has_trait = possessed_1
					has_trait = possessed_genetic
				}
			}
			NOT = {
				has_trait = zealous
			}
			#highest_held_title_tier >= tier_county
			highest_held_title_tier >= tier_duchy
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1003_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1003_flag
				years = 20
			}
			if = {
				limit = {
					OR = {
						has_perk = magical_senses_perk
						has_perk = magical_experiments_p1_perk
						is_a_demon_trigger = yes
					}
				}
				trigger_event = magic_ev9.17
			}
			else = {
				trigger_event = magic_ev9.16
			}
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_critical_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_critical_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Ruthless Rivalry
laamp_magic_1004 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_intrigue_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = no
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that value foreign intelligence.
				if = {
					limit = { has_trait = wrathful }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = sadistic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = callous }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_mystic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		scope:employer = {
			is_witch_huter = no
			is_witch_trigger = no
			is_landed_or_landless_administrative = yes
			NOR = {
				has_trait = zealous
				has_trait = compassionate
			}
			highest_held_title_tier >= tier_county
			#highest_held_title_tier >= tier_dychy
			is_ai = yes
			any_relation ={
				type = rival
				is_antimagic_trigger = no
				has_immunity_for_regular_curse = no
				has_immunity_for_powerful_curse = no
				is_magic_protected = no
				NOT = { THIS = ROOT }
			}
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1004_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1004_flag
				years = 5
			}
			trigger_event = magic_ev9.27
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_crime_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_critical_crime_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = flag:no
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Task For The Healer
laamp_magic_1005 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		add = {
			if = {
				limit = {
					OR = {
						has_trait = archmage
						has_trait = lifestyle_herbalist
						has_trait = lifestyle_physician
					}
				}
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				if = {
					limit = { has_trait = craven }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_mystic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				if = {
					limit = { has_trait = zealous }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		scope:employer = {
			is_witch_trigger = no
			is_landed_or_landless_administrative = yes
			OR = {
				has_trait = cancer
				has_trait = consumption
				has_trait = pneumonic
				has_trait = typhus
			}
			highest_held_title_tier >= tier_county
			#highest_held_title_tier >= tier_dychy
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1005_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1005_flag
				years = 5
			}
			trigger_event =magic_ev9.29
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_crime_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_critical_crime_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_full_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = flag:no
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Magic Anomaly
laamp_magic_1006 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		multiply = 2
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		is_true_mage = yes
		can_be_power_saturated_trigger = yes
		dynasty ?= {
			NOT = {
				has_variable = took_laamp_magic_1006_flag
			}
		}
		scope:employer = {
			is_landed_or_landless_administrative = yes
			highest_held_title_tier >= tier_county
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			dynasty ?= {
				set_variable = took_laamp_magic_1006_flag
			}
			trigger_event = magic_ev9.30
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = {
					play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract"
					show_as_tooltip = {
						add_prestige = medium_prestige_gain
					}
				}
				
				custom_tooltip = laamp_magic_1006_ct
				#if = {
				#	limit = {
				#		has_trait = archmage
				#		has_trait_xp = {
				#			trait = archmage
				#			track = secret_knowledge
				#			value < 100
				#		}
				#	}
				#	gain_sc_xp2_effect = yes
				#}
				#else_if = {
				#	limit = {
				#		OR = {
				#			has_focus = witch_focus
				#			has_focus = arcane_focus
				#		}
				#	}
				#	custom_tooltip = ev2.47.a_ct
				#	hidden_effect = {
				#		add_magic_lifestyle_perk_points = 1
				#	}
				#}
				#gain_huge_ps_effect = yes
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = {
					play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract"
					add_stress = minor_stress_gain
				}
			}
		}
	}
}
#The Secret Scroll
laamp_magic_1007 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_intrigue_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		#add = {
		#	if = {
		#		limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
		#		add = task_contract_weight_standard_bonus_value
		#	}
		#}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that value foreign intelligence.
				if = {
					limit = { has_trait = greedy }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		#any_character_task_contract = {
		#	NOT = { has_task_contract_type = laamp_magic_1003 }
		#}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			any_character_task_contract = {
				has_task_contract_type = laamp_magic_1007
			}
		}
		NOT = {
			any_artifact = {
				has_variable = msscroll
			}
		}
		is_ai = no
		scope:employer = {
			is_witch_huter = no
			is_witch_trigger = no
			is_landed_or_landless_administrative = yes
			highest_held_title_tier >= tier_county
			#highest_held_title_tier >= tier_duchy
			is_ai = yes
		}
		
		NOT = {
			has_character_flag = took_laamp_magic_1007_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1007_flag
				years = 50
			}
			trigger_event = magic_ev9.35
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				custom_tooltip = laamp_magic_1007_desc_ct
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Secret Mission
laamp_magic_1008 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_intrigue_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		#add = {
		#	if = {
		#		limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
		#		add = task_contract_weight_standard_bonus_value
		#	}
		#}
		# Employer weights.
		#scope:employer = {
		#	add = {
		#		# Weight up.
		#		## Traits that value foreign intelligence.
		#		if = {
		#			limit = { has_trait = deceitful }
		#			add = task_contract_weight_bonus_employer_has_associated_traits_value
		#		}
		#		if = {
		#			limit = { has_trait = wrathful }
		#			add = task_contract_weight_bonus_employer_has_associated_traits_value
		#		}
		#		# Weight down.
		#		if = {
		#			limit = { has_trait = honest }
		#			add = task_contract_weight_malus_employer_has_associated_traits_value
		#		}
		#		if = {
		#			limit = { has_trait = just }
		#			add = task_contract_weight_malus_employer_has_associated_traits_value
		#		}
		#		# Restrictions.
		#		min = task_contract_weight_employer_associated_traits_min_value
		#		max = task_contract_weight_employer_associated_traits_max_value
		#	}
		#	multiply = task_contract_weight_by_tier_value
		#	# This weight is an override, so make sure it's placed at the bottom.
		#	add = task_contract_weight_employer_contact_list_value
		#}
		#multiply = 100
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		NOT = {
			exists = var:laamp_magic_1008_var
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		OR = {
			has_trait = true_witch
			has_trait = archmage
		}
		NOT = {
			is_a_demon_trigger = yes
		}
		NOT = {
			any_relation = {
				THIS = scope:employer
			}
		}
		NOT = {
			any_character_task_contract = {
				has_task_contract_type = laamp_magic_1008
			}
		}
		NOT = {
			dynasty ?= {
				has_variable = laamp_magic_secret_mission_took
			}
		}
		scope:employer = {
			NOT = {
				has_trait = honest
			}
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		scope:employer = {
			NOR = {
				has_trait = witch_hunter
				has_trait = supernatural_hunter	#witch_hunter2
			}
			is_landed_or_landless_administrative = yes
			highest_held_title_tier >= tier_county
			is_ai = yes
		}
		
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			trigger_event = magic_ev9.40
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		set_global_variable = {
			name = laamp_magic_1008_var
			years = 20
		}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_crime_value
			}
		}
		
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 200
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Monster Hunt
laamp_magic_1009 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_intrigue_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		#add = {
		#	if = {
		#		limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
		#		add = task_contract_weight_standard_bonus_value
		#	}
		#}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		NOT = {
			is_a_demon_trigger = yes
		}
		NOT = {
			any_character_task_contract = {
				has_task_contract_type = laamp_magic_1009
			}
		}
		scope:employer = {
			is_witch_huter = no
			is_landed_or_landless_administrative = yes
			is_adult = yes
			NOR = {
				has_character_flag = special_magic_character
				has_trait = archmage
				is_a_demon_trigger = yes
			}
			highest_held_title_tier >= tier_duchy
			#highest_held_title_tier >= tier_dychy
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1009_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1009_flag
				years = 100
			}
			trigger_event = magic_ev9.52
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_full_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = flag:no
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				task_contract_taker = {
					show_as_tooltip = {
						death = {
							death_reason = death_mysterious
						}
					}
				}
				
				#save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.

				#laamp_rewards_disburse_ordinary_currency_effect = {
				#	GOLD = 0
				#	PRESTIGE = task_contract_failure_prestige_loss_full_value
				#	PIETY = 0
				#	PROVISIONS = 0
				#	OPINION = task_contract_opinion_standard_failure_value
				#	OPINION_TYPE = failed_task_contract_opinion
				#	CONTACT = no
				#	CONTACT_HOOK = no
				#	EXTRA_REWARD = flag:no
				#}
			}
		}
	}
}
#Haunted Manor
laamp_magic_1010 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = no
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				## Traits that value foreign intelligence.
				if = {
					limit = { has_trait = wrathful }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = sadistic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = callous }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_mystic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		scope:employer = {
			is_witch_huter = no
			is_witch_trigger = no
			is_landed_or_landless_administrative = yes
			NOT = {
				has_trait = cynical
			}
			highest_held_title_tier >= tier_duchy
			#highest_held_title_tier >= tier_dychy
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1010_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1010_flag
				years = 50
			}
			trigger_event = magic_ev9.80
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = task_contract_success_prestige_gain_full_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = flag:no
				}
			}
		}
		
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Rumors about artifacts
laamp_magic_1011 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_intrigue_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		if = {
			limit = { has_trait = lifestyle_mystic }
			add = task_contract_weight_bonus_employer_has_associated_traits_value
		}
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		NOT = {
			any_character_artifact = {
				has_variable = magic1
			}
		}
		any_artifact = {
			exists = artifact_owner
			has_variable = magic1
			NOR = {
				any_artifact_claimant = {
					THIS = ROOT
				}
				artifact_owner = ROOT
				artifact_owner = scope:employer
			}
			artifact_owner = {
				in_diplomatic_range = ROOT
			}
		}
		scope:employer = {
			is_witch_huter = no
			is_landed_or_landless_administrative = yes
			highest_held_title_tier >= tier_county
			#highest_held_title_tier >= tier_dychy
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1011_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1011_flag
				years = 20
			}
			trigger_event = magic_ev9.89
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = no
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Standard Rewards.
				custom_tooltip = laamp_magic_1011_ct1
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				custom_tooltip = laamp_magic_1011_ct2
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}

#lift curse
laamp_magic_1012 = {
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				if = {
					limit = { has_trait = trusting }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { has_trait = lifestyle_mystic }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		is_ai = no
		scope:employer = {
			is_witch_huter = no
			is_witch_trigger = no
			is_landed_or_landless_administrative = yes
			NOT = {
				has_trait = paranoid
			}
			highest_held_title_tier >= tier_county
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1012_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1012_flag
				years = 50
			}
			trigger_event = magic_ev10.37
		}
	}
	on_create = {
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_minor_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				# Camp building extra Learning Rewards: +50%.
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_critical
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_failure_prestige_loss_full_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}
#Library
laamp_magic_1013 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		scope:employer = {
			add = {
				# Weight up.
				## Traits that value foreign intelligence.
				if = {
					limit = { has_trait = scholar }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		#any_character_task_contract = {
		#	NOT = { has_task_contract_type = laamp_magic_1003 }
		#}
		OR = {
			has_realm_law_flag = laamp_contracts_weight_up_witch
			has_realm_law_flag = nerd_camp_purpose
		}
		
		NOT = {
			any_character_task_contract = {
				has_task_contract_type = laamp_magic_1013
			}
		}
		scope:employer = {
			is_witch_huter = no
			is_landed_or_landless_administrative = yes
			is_imprisoned = no
			is_adult = yes
			highest_held_title_tier >= tier_county
			#highest_held_title_tier >= tier_duchy
			is_ai = yes
			OR = {
				has_trait = education_learning_5
				has_trait = education_learning_4
				has_trait = education_learning_3
				has_trait = education_learning_2
				has_trait = education_learning_1
				has_trait = scholar
				has_trait = true_witch
				has_trait = archmage
				has_trait = lifestyle_mystic
				has_trait = lifestyle_physician
				has_trait = diligent
				has_trait = journaller
			}
		}
		
		NOT = {
			has_character_flag = took_laamp_magic_1013_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		task_contract_employer = { is_landed_or_landless_administrative = yes }
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1013_flag
				years = 50
			}
			trigger_event = magic_ev10.150
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_half_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_full_value
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_critical = {
			should_print_on_complete = no
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				custom_tooltip = laamp_magic_1013_desc_ct
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = task_contract_success_prestige_gain_half_value
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
		success_standard = {
			should_print_on_complete = no
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				task_contract_taker = {
					custom_tooltip = laamp_magic_1013_desc_ct
					add_prestige = task_contract_success_prestige_gain_half_value
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}

#Court Mage evaluation
laamp_magic_1014 = {
	#group = laamp_contracts_witchy_group
	group = laamp_contracts_learning_group
	icon = "gfx/interface/icons/traits/witch.dds"
	travel = yes
	use_diplomatic_range = yes

	weight = {
		# Standard weights.
		value = task_contract_weight_default_value
		add = {
			if = {
				limit = { has_realm_law_flag = laamp_contracts_weight_up_witch }
				add = task_contract_weight_standard_bonus_value
			}
		}
		add = {
			if = {
				limit = {
					OR = {
						has_trait = archmage
						has_trait = lifestyle_herbalist
						has_trait = lifestyle_physician
					}
				}
				add = task_contract_weight_standard_bonus_value
			}
		}
		# Employer weights.
		scope:employer = {
			add = {
				# Weight up.
				if = {
					limit = { has_trait = paranoid }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				if = {
					limit = { is_witch_trigger = no }
					add = task_contract_weight_bonus_employer_has_associated_traits_value
				}
				# Weight down.
				if = {
					limit = { has_trait = trusting }
					add = task_contract_weight_malus_employer_has_associated_traits_value
				}
				# Restrictions.
				min = task_contract_weight_employer_associated_traits_min_value
				max = task_contract_weight_employer_associated_traits_max_value
			}
			multiply = task_contract_weight_by_tier_value
			# This weight is an override, so make sure it's placed at the bottom.
			add = task_contract_weight_employer_contact_list_value
		}
		#multiply = 1000
	}

	# Validity Triggers
	valid_to_create = {
		OR = {
			has_trait = witch
			has_trait = lifestyle_mystic
			has_trait = true_witch
			has_trait = archmage
			has_focus = arcane_focus
		}
		scope:employer = {
			is_witch_huter = no
			is_landed_or_landless_administrative = yes
			is_imprisoned = no
			is_adult = yes
			any_court_position_holder = {
				type = mage_court_position
				is_legendary_mage_trigger = no
				is_ai = yes
				is_imprisoned = no
				NOT = {
					is_at_war_with = scope:employer
				}
			}
			is_a_demon_trigger = no
			NOR = {
				has_trait = trusting
				has_trait = archmage
			}
			highest_held_title_tier >= tier_county
			#highest_held_title_tier >= tier_dychy
			is_ai = yes
		}
		has_realm_law_flag = laamp_contracts_weight_up_witch
		NOT = {
			has_character_flag = took_laamp_magic_1014_flag
		}
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		#employer_has_treasury_to_offer_job_trigger = yes
		valid_laamp_sensible_start_trigger = yes
		#NOT = {
		#	scope:employer = { government_has_flag = government_is_tribal }
		#}

	}
	valid_to_accept = {
		# Standard triggers.
		valid_laamp_basic_accept_only_trigger = yes
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:employer
			LAAMP = root
		}
		scope:employer = {
			is_landed_or_landless_administrative = yes
			any_court_position_holder = {
				type = mage_court_position
				is_legendary_mage_trigger = no
				is_ai = yes
				is_imprisoned = no
				NOT = {
					is_at_war_with = scope:employer
				}
			}
		}
	}
	valid_to_continue = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		scope:employer = {
			is_landed_or_landless_administrative = yes
			any_court_position_holder = {
				type = mage_court_position
				is_legendary_mage_trigger = no
				is_ai = yes
				is_imprisoned = no
				NOT = {
					is_at_war_with = scope:employer
				}
			}
		}
	}
	valid_to_keep = {
		# Standard triggers.
		valid_laamp_basic_trigger = {
			EMPLOYER = root.task_contract_employer
			LAAMP = root.task_contract_taker
		}
		scope:employer = {
			is_landed_or_landless_administrative = yes
			any_court_position_holder = {
				type = mage_court_position
				is_imprisoned = no
				is_legendary_mage_trigger = no
				is_ai = yes
				NOT = {
					is_at_war_with = scope:employer
				}
			}
		}
	}

	# On_actions
	on_accepted = {
		task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_accept_contract" }
		# For the intro event.
		save_scope_as = task_contract
		
		# Then we start the travel.
		task_contract_taker ?= {
			add_character_flag = {
				flag = took_laamp_magic_1014_flag
				years = 50
			}
			trigger_event =magic_ev10.151
		}

		# Plus, set up a tracking variable for us.
		#increment_variable_effect = {
		#	VAR = wins_tally
		#	VAL = 0
		#}
	}
	on_create = {
		#set_global_variable = {
		#	name = laamp_magic_1003_var
		#	value = 1
		#	days = 100
		#}
		scope:contract = {
			# Make our gold rewards static.
			save_scope_as = task_contract
			grab_gold_fuzz_number_effect = yes
			set_variable = {
				name = gold_success_standard
				value = task_contract_taker.task_contract_success_gold_gain_crime_value
			}
			# Make sure critical values are a bit higher.
			save_scope_value_as = { name = gold_safety_margin value = flag:yes }
			set_variable = {
				name = gold_success_critical
				value = task_contract_taker.task_contract_success_gold_gain_critical_crime_value
			}

			task_contract_employer = {
				random_court_position_holder = {
					type = mage_court_position
					limit = {
						NOT = { is_at_war_with = scope:employer }
						is_imprisoned = no
					}
					if = {
						limit = {
							NOT = { has_character_flag = cm_busy_flag }
						}
						add_character_flag = {
							flag = cm_busy_flag
							years = 5
						}
					}
				}
			}
		}
		#every_character_task_contract = {
		#	limit = {
		#		has_task_contract_type = laamp_magic_1003
		#		NOT = { THIS = scope:contract }
		#	}
		#	invalidate_contract = yes
		#}
	}

	# Rewards
	task_contract_reward = {
		success_standard = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				# Standard Rewards.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_full_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_standard_reward_value
					OPINION_TYPE = succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		success_critical = {
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_success_on_contract" }
				if = {
					limit = {
						task_contract_taker.domicile ?= { has_domicile_parameter = camp_improved_learning_contract_rewards }
					}
					save_scope_value_as = { name = extra_reward value = flag:yes }
				}
				else = {
					save_scope_value_as = { name = extra_reward value = flag:no }
				}
				custom_tooltip = laamp_magic_1014_desc_success_critical_ct
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = scope:task_contract.var:gold_success_standard
					PRESTIGE = task_contract_success_prestige_gain_full_value
					PIETY = 0
					PROVISIONS = task_contract_success_provisions_gain_medium_value
					OPINION = task_contract_opinion_excelled_reward_value
					OPINION_TYPE = critically_succeeded_task_contract_opinion
					CONTACT = yes
					CONTACT_HOOK = yes
					EXTRA_REWARD = scope:extra_reward
				}
			}
		}
		failure_standard = {
			positive = no
			should_print_on_complete = yes
			effect = {
				task_contract_taker = { play_sound_effect = "event:/DLC/EP3/SFX/UI/Contracts/ep3_ui_contracts_failure_on_contract" }
				save_scope_value_as = { name = extra_reward value = flag:no }
				# Standard Penalties.
				laamp_rewards_disburse_ordinary_currency_effect = {
					GOLD = 0
					PRESTIGE = 0
					PIETY = 0
					PROVISIONS = 0
					OPINION = task_contract_opinion_standard_failure_value
					OPINION_TYPE = failed_task_contract_opinion
					CONTACT = no
					CONTACT_HOOK = no
					EXTRA_REWARD = flag:no
				}
			}
		}
	}
}